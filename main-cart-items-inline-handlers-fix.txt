================================================================================
MAIN-CART-ITEMS.LIQUID - INLINE HANDLER ISSUES & FIXES
================================================================================
Date: 2025-10-10
File: sections/main-cart-items.liquid
Total Issues: 7 inline onclick handlers
Priority: URGENT (CSP violations, security concerns)

================================================================================
WHY THIS IS A PROBLEM:
================================================================================

1. SECURITY: Inline event handlers violate Content Security Policy (CSP)
2. MAINTAINABILITY: Harder to debug and maintain scattered JS in HTML
3. PERFORMANCE: Repeated inline handlers create unnecessary overhead
4. BEST PRACTICES: Separation of concerns (HTML/CSS/JS should be separate)

================================================================================
ISSUE #1-4: COLOR PICKER INLINE HANDLERS (4 instances)
================================================================================

LOCATION: Lines 103, 113, 196, 206

CURRENT CODE (BAD):
-------------------
Line 103:
<div
  class="color-picker {{ color_class }} selected"
  data-variant-id="{{ item.variant.id }}"
  data-color="{{ current_color }}"
  data-item-key="{{ item.key }}"
  data-current-size="{{ size_option.value | default: '' }}"
  title="{{ current_color }}"
  onclick="changeItemColor(this)"    ← REMOVE THIS
></div>

Line 113:
<div
  class="color-picker selected"
  data-variant-id="{{ item.variant.id }}"
  data-color="{{ current_color }}"
  data-item-key="{{ item.key }}"
  data-current-size="{{ size_option.value | default: '' }}"
  title="{{ current_color }}"
  onclick="changeItemColor(this)"    ← REMOVE THIS
  style="background: {{ current_color | downcase }} !important;"
></div>

Line 196:
<div
  class="color-picker {{ color_class }}"
  data-variant-id="{{ variant.id }}"
  data-color="{{ variant_color }}"
  data-item-key="{{ item.key }}"
  data-current-size="{{ size_option.value | default: '' }}"
  title="{{ variant_color }}"
  onclick="changeItemColor(this)"    ← REMOVE THIS
></div>

Line 206:
<div
  class="color-picker"
  data-variant-id="{{ variant.id }}"
  data-color="{{ variant_color }}"
  data-item-key="{{ item.key }}"
  data-current-size="{{ size_option.value | default: '' }}"
  title="{{ variant_color }}"
  onclick="changeItemColor(this)"    ← REMOVE THIS
  style="background: {{ variant_color | downcase }} !important;"
></div>


FIXED CODE (GOOD):
------------------
Remove the onclick="changeItemColor(this)" from ALL 4 instances above.

The divs should look like:
<div
  class="color-picker {{ color_class }} selected"
  data-variant-id="{{ item.variant.id }}"
  data-color="{{ current_color }}"
  data-item-key="{{ item.key }}"
  data-current-size="{{ size_option.value | default: '' }}"
  title="{{ current_color }}"
></div>

================================================================================
ISSUE #5-7: SIDEBAR SECTION TOGGLE HANDLERS (3 instances)
================================================================================

LOCATION: Lines 251, 267, 283

CURRENT CODE (BAD):
-------------------
Line 251:
<div class="sidebar-header" onclick="toggleSection(this)">    ← REMOVE THIS
  <span class="sidebar-title">Add a Note to<br>Your Order:</span>
  <span class="expand-icon"><span class="pmorph__icon"></span></span>
</div>

Line 267:
<div class="sidebar-header" onclick="toggleSection(this)">    ← REMOVE THIS
  <span class="sidebar-title">Receive Special Offers and<br>First Look at New Products.</span>
  <span class="expand-icon"><span class="pmorph__icon"></span></span>
</div>

Line 283:
<div class="sidebar-header" onclick="toggleSection(this)">    ← REMOVE THIS
  <span class="sidebar-title">Estimate Shipping Rates</span>
  <span class="expand-icon"><span class="pmorph__icon"></span></span>
</div>


FIXED CODE (GOOD):
------------------
Remove onclick="toggleSection(this)" from ALL 3 instances above.

The divs should look like:
<div class="sidebar-header">
  <span class="sidebar-title">Add a Note to<br>Your Order:</span>
  <span class="expand-icon"><span class="pmorph__icon"></span></span>
</div>

================================================================================
JAVASCRIPT FIX REQUIRED
================================================================================

FILE: assets/main-cart-items.js
ACTION: Add event listeners at the end of the file

ADD THIS CODE TO main-cart-items.js:
------------------------------------

// ===================================================================
// COLOR PICKER EVENT LISTENERS (replaces inline onclick handlers)
// ===================================================================
document.addEventListener('DOMContentLoaded', function() {
  
  // Attach click handlers to all color pickers
  const colorPickers = document.querySelectorAll('.color-picker');
  
  colorPickers.forEach(function(picker) {
    picker.addEventListener('click', function() {
      changeItemColor(this);
    });
    
    // Add keyboard accessibility
    picker.setAttribute('role', 'button');
    picker.setAttribute('tabindex', '0');
    
    picker.addEventListener('keydown', function(e) {
      if (e.key === 'Enter' || e.key === ' ') {
        e.preventDefault();
        changeItemColor(this);
      }
    });
  });
  
  // ===================================================================
  // SIDEBAR SECTION TOGGLE EVENT LISTENERS (replaces inline onclick)
  // ===================================================================
  
  const sidebarHeaders = document.querySelectorAll('.sidebar-header');
  
  sidebarHeaders.forEach(function(header) {
    header.addEventListener('click', function() {
      toggleSection(this);
    });
    
    // Add keyboard accessibility
    header.setAttribute('role', 'button');
    header.setAttribute('tabindex', '0');
    header.setAttribute('aria-expanded', 'false');
    
    header.addEventListener('keydown', function(e) {
      if (e.key === 'Enter' || e.key === ' ') {
        e.preventDefault();
        toggleSection(this);
      }
    });
  });
  
  console.log('✅ Cart event listeners initialized (CSP-compliant)');
});


IMPORTANT NOTES:
----------------
1. Make sure the functions changeItemColor() and toggleSection() already exist
   in your main-cart-items.js file
2. The code above adds the event listeners AFTER the DOM is loaded
3. Bonus: Added keyboard accessibility (Enter/Space key support)
4. Bonus: Added ARIA attributes for screen readers

================================================================================
BONUS FIX: DISPLAY INLINE STYLES (3 instances)
================================================================================

LOCATION: Lines 292, 293, 297

CURRENT CODE (BAD):
-------------------
<div class="shipping-results" id="shipping-results" style="display: none;">
<div class="shipping-loading" id="shipping-loading" style="display: none;">
<div class="shipping-error" id="shipping-error" style="display: none;">


RECOMMENDED FIX:
----------------
Option 1: Add a utility class to your CSS
-----------------------------------------
In assets/main-cart-items.css, add:

.hidden {
  display: none;
}

Then change the HTML to:
<div class="shipping-results hidden" id="shipping-results">
<div class="shipping-loading hidden" id="shipping-loading">
<div class="shipping-error hidden" id="shipping-error">


Option 2: Keep inline (acceptable)
-----------------------------------
These are less critical since they're not event handlers, just utility styles.
If you prefer, you can keep them as-is. They don't violate CSP.

================================================================================
TESTING CHECKLIST
================================================================================

After making the changes, test these functions:

□ Click on color swatches to change product color
□ Click on "Add a Note to Your Order" to expand/collapse
□ Click on "Receive Special Offers" section to expand/collapse  
□ Click on "Estimate Shipping Rates" to expand/collapse
□ Test keyboard navigation (Tab + Enter/Space) on all interactive elements
□ Check browser console for any JavaScript errors
□ Verify CSP compliance (no console warnings about inline handlers)

================================================================================
ESTIMATED TIME TO FIX
================================================================================

1. Remove 7 inline onclick handlers from Liquid file:  ~5 minutes
2. Add event listeners to JavaScript file:              ~10 minutes
3. Test all functionality:                              ~10 minutes
4. (Optional) Add CSS utility class for display:        ~5 minutes
                                                        ____________
                                                        Total: ~30 minutes

================================================================================
BEFORE YOU START
================================================================================

1. ✓ Make sure you have assets/main-cart-items.js file
2. ✓ Backup the current main-cart-items.liquid file
3. ✓ Test in a development/staging environment first
4. ✓ Verify the functions changeItemColor() and toggleSection() exist

================================================================================
SUMMARY OF CHANGES
================================================================================

FILE: sections/main-cart-items.liquid
- Remove onclick="changeItemColor(this)" from lines 103, 113, 196, 206
- Remove onclick="toggleSection(this)" from lines 251, 267, 283
- (Optional) Replace style="display: none;" with class="hidden"

FILE: assets/main-cart-items.js
- Add event listener initialization code at the end of file
- Includes accessibility improvements (keyboard support, ARIA)

RESULT:
- ✅ CSP compliant (no inline JavaScript)
- ✅ Better separation of concerns
- ✅ Improved accessibility
- ✅ Easier to maintain and debug
- ✅ Better performance (event delegation possible in future)

================================================================================
NEED HELP?
================================================================================

If you encounter issues:
1. Check browser console for JavaScript errors
2. Verify all data attributes are still present on elements
3. Make sure jQuery (if used) or vanilla JS functions are available
4. Test with browser DevTools to debug event listeners

Good luck! 🚀
================================================================================

