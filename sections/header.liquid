{{ 'header-currency.css' | asset_url | stylesheet_tag }}
{{ 'header.css' | asset_url | stylesheet_tag }}
{{ 'component-localization-form.css' | asset_url | stylesheet_tag }}

<style>
  :root {
    --menu-drawer-speed: {{ section.settings.menu_drawer_animation_speed | default: 0.6 }}s !important;
    {% if section.settings.enable_menu_hover_color %}
      --menu-hover-color: {{ section.settings.menu_hover_color | default: '#000000' }};
    {% endif %}
  }

  {% if section.settings.enable_menu_hover_color %}
    /* Menu item hover color effect */
    .menu-items .dropdown-group a.dropdown-link,
    .menu-items .dropdown-group > a {
      transition: color 0.3s ease;
    }

    /* Arrows/icons transition - only for dropdown arrows */
    .menu-items .dropdown-group > a svg,
    .menu-items .dropdown-group > a svg path,
    .menu-items .dropdown-group > a img {
      transition: color 0.3s ease, stroke 0.3s ease, fill 0.3s ease, filter 0.3s ease;
    }

    /* Hover state for menu items with dropdowns */
    .menu-items .dropdown-group:hover a.dropdown-link,
    .menu-items .dropdown-group a.dropdown-link:hover {
      color: var(--menu-hover-color) !important;
    }

    /* Hover state for regular menu items (without dropdowns) */
    .menu-items .dropdown-group > a:hover {
      color: var(--menu-hover-color) !important;
    }

    /* Apply hover color to dropdown icons/arrows - only direct children of menu links */
    .menu-items .dropdown-group:hover > a svg,
    .menu-items .dropdown-group:hover > a svg path,
    .menu-items .dropdown-group:hover > a .header-text-color {
      color: var(--menu-hover-color) !important;
      stroke: var(--menu-hover-color) !important;
      fill: var(--menu-hover-color) !important;
    }

    /* For image-based arrows using filter - only direct children of menu links */
    .menu-items .dropdown-group:hover > a img {
      filter: brightness(0) saturate(100%) invert(0);
    }
  {% endif %}
</style>

<script src="{{ 'localization-form.js' | asset_url }}" defer="defer"></script>
<script src="{{ 'flag-emoji-converter.js' | asset_url }}" defer="defer"></script>

{%- liquid
  assign color_scheme = section.settings.color_scheme
  if color_scheme == blank
    assign color_scheme = 'background-1'
  endif

  assign menu = section.settings.menu
  if menu == blank
    assign menu = linklists['main-menu']
  endif
-%}

<header
  class="header-main relative color-{{ color_scheme }} header-z-index {% unless section.settings.enable_sticky %}sticky-disabled{% endunless %}{% if section.settings.enable_transparent and template.name == 'index' %} header-transparent{% endif %}"
  data-header-sticky
>
  <div class=" w-full flex items-center justify-between ">
    <!-- Left: Logo -->
    <div class="flex items-center justify-center  ">
      <a href="{{ routes.root_url }}">
        {% if section.settings.logo != blank %}
          <img
            src="{{ section.settings.logo | image_url }}"
            class="fade-in header-logo-img"
            width="auto"
            height="auto"
            alt="Logo"
          >
        {% else %}
          <span
            class="block font-semibold text-center mt-1 fade-in header-logo-text"
          >
            {{- shop.name -}}
          </span>
        {% endif %}
      </a>
    </div>
    <!-- Right: Menu & Actions -->
    <div class="flex flex-wrap items-center justify-end w-full tracking-tight">
      <!-- Desktop Menu -->
      <nav
        class="flex justify-end lg:justify-between items-center w-full text-[var(--header_text)]"
      >
        <!-- Left: Menu Items -->
        <div class="menu-items hidden lg:!flex  flex-wrap w-2/3 ">
          <ul class="flex-1 flex flex-wrap menu-items-list">
            {%- for link in section.settings.menu.links -%}
              <li class="group dropdown-group flex items-center justify-center ">
                {% if link.links.size > 0 %}
                  <a
                    href="{{ link.url }}"
                    class="cursor-pointer text-[16px] flex items-center group dropdown-link"
                    aria-expanded="false"
                    aria-controls="mega-menu-{{ forloop.index }}"
                    aria-haspopup="true"
                  >
                    {{ link.title }}
                    {% if section.settings.dropdown_icon != blank %}
                      <img
                        src="{{ section.settings.dropdown_icon | image_url }}"
                        alt="Dropdown Icon"
                        class="w-12 h-6 object-contain transition-transform duration-300 group-hover:-rotate-90"
                        width="100%"
                        height="auto"
                        aria-hidden="true"
                      >
                    {% else %}
                      <svg
                        width="41"
                        height="20"
                        viewBox="0 0 41 20"
                        fill="none"
                        xmlns="http://www.w3.org/2000/svg"
                        class="w-5 h-5 object-contain transition-transform duration-300 group-hover:rotate-180 mx-1 header-text-color"
                        stroke="currentColor"
                      >
                        <path d="M20.3119 19.7659C20.7254 19.7298 21.1168 19.5625 21.4298 19.2881L39.5626 3.50455C39.7667 3.3376 39.9354 3.131 40.0586 2.89707C40.1818 2.66313 40.2569 2.40663 40.2795 2.14286C40.3022 1.87909 40.2718 1.61342 40.1903 1.3617C40.1088 1.10998 39.9778 0.877357 39.805 0.677661C39.6323 0.477966 39.4215 0.315286 39.185 0.199328C38.9485 0.0833695 38.6912 0.0164912 38.4285 0.0026841C38.1658 -0.011123 37.9031 0.0284416 37.6559 0.118979C37.4087 0.209515 37.1821 0.349193 36.9897 0.529697L20.1434 15.1881L3.29712 0.529697C3.10468 0.349193 2.87811 0.209515 2.63091 0.118979C2.38372 0.0284416 2.12095 -0.011123 1.85825 0.0026841C1.59555 0.0164912 1.3383 0.0833695 1.10182 0.199328C0.865337 0.315286 0.654461 0.477966 0.481748 0.677661C0.309036 0.877357 0.17802 1.10998 0.0965041 1.3617C0.0149883 1.61342 -0.0153602 1.87909 0.00726535 2.14286C0.0298909 2.40663 0.105028 2.66313 0.228202 2.89707C0.351376 3.131 0.520068 3.3376 0.72423 3.50455L18.8569 19.2881C19.0552 19.4619 19.2862 19.5937 19.5362 19.6758C19.7861 19.7579 20.0499 19.7885 20.3119 19.7659Z" fill="currentColor"/>
                      </svg>
                    {% endif %}
                  </a>

                  <!-- sub-menu dropdown -->
                  <div
                    id="mega-menu-{{ forloop.index }}"
                    class="mega-menu-dropdown mega-menu-hidden"
                    role="region"
                    aria-label="{{ link.title }} submenu"
                  >
                    <div class="bb-mega-menu-first mx-auto p-2  flex">
                      <ul
                        class="flex justify-start m-2 flex-wrap mega-menu-links"
                      >
                        {% for childlink in link.links %}
                          <li class="min-w-[100px] relative">
                            <a
                              href="{{ childlink.url }}"
                              class="block link-secondary font-medium text-[13px] lg:text-[14px] my-4"
                              style="color: gray;"
                            >
                              {{ childlink.title }}
                            </a>

                            {% if childlink.links.size > 0 %}
                              <ul class=" flex flex-col space-y-2">
                                {% for grandchildlink in childlink.links %}
                                  <li>
                                    <a
                                      href="{{ grandchildlink.url }}"
                                      class="block text-[15px] lg:text-[16px] hover:text-[var(--hover)] font-normal text-[var(--header_text)] leading-none pb-2"
                                    >
                                      {{ grandchildlink.title }}
                                    </a>
                                  </li>
                                {% endfor %}
                              </ul>
                            {% endif %}

                            <a href="#" class="underline-link text-[13px] lg:text-[14px] leading-0">
                              {{ 'general.shop_all' | t }}
                              {{ childlink.title }}
                            </a>
                          </li>
                        {% endfor %}
                      </ul>
                      <!-- Mega Menu Images -->
                      <div
                        class="mega-menu-img flex items-center justify-end gap-x-8 py-4 px-4 mega-menu-images"
                      >
                        {% for block in section.blocks %}
                          {% if block.type == 'mega_menu_images' and block.settings.menu_item_name == link.title %}
                            <!-- First Image -->
                            {% if block.settings.image_1 != blank %}
                              <div class="group/card w-[350px] cursor-pointer">
                                <a href="{{ block.settings.button_link_1 }}">
                                  <div class="relative block overflow-hidden">
                                    <div class="aspect-[4/3] overflow-hidden bg-gray-100">
                                      <img
                                        src="{{ block.settings.image_1 | image_url }}"
                                        alt="Shop now image 1"
                                        class="w-full h-full object-cover group-hover/card:scale-110 transition-transform duration-700"
                                        loading="lazy"
                                        width="100%"
                                        height="auto"
                                      >
                                      <div class="absolute inset-0 bg-black/60 flex items-center justify-center translate-y-full group-hover/card:translate-y-0 transition-transform duration-300">
                                        <span class="text-white text-2xl font-bold tracking-tight">
                                          {{- 'general.shop_now' | t -}}
                                        </span>
                                      </div>
                                    </div>
                                  </div>

                                  {% if block.settings.button_text_1 != blank %}
                                    <div class="mt-4 flex items-center justify-between">
                                      <p
                                        class="card-text text-2xl font-medium uppercase group-hover/card:font-bold transition-colors duration-300"
                                        style="color: {{ section.settings.btn_text_color }};"
                                      >
                                        {{ block.settings.button_text_1 }}
                                      </p>
                                      {% render 'icon-playback',
                                        width: 20,
                                        height: 20,
                                        fill: settings.social_icon_color
                                      %}
                                    </div>
                                  {% endif %}
                                </a>
                              </div>

                              <style>
                                .group\/card:hover .card-text {
                                  color: {{ block.settings.btn_text_hover_color | default: '#ff0000' }} !important;
                                }
                              </style>
                            {% endif %}

                            <!-- Second Image -->
                            {% if block.settings.image_2 != blank %}
                              <div class="group/card w-[350px] cursor-pointer">
                                <a href="{{ block.settings.button_link_2 }}">
                                  <div class="relative block overflow-hidden">
                                    <div class="aspect-[4/3] overflow-hidden bg-gray-100">
                                      <img
                                        src="{{ block.settings.image_2 | image_url }}"
                                        alt="Shop now image 2"
                                        class="w-full h-full object-cover group-hover/card:scale-110 transition-transform duration-700"
                                        loading="lazy"
                                        width="100%"
                                        height="auto"
                                      >
                                      <div class="absolute inset-0 bg-black/60 flex items-center justify-center translate-y-full group-hover/card:translate-y-0 transition-transform duration-300">
                                        <span class="text-white text-2xl font-bold tracking-tight">
                                          {{- 'general.shop_now' | t -}}
                                        </span>
                                      </div>
                                    </div>
                                  </div>

                                  {% if block.settings.button_text_2 != blank %}
                                    <div class="mt-4 flex items-center justify-between">
                                      <p
                                        class="card-text text-2xl font-medium uppercase group-hover/card:font-bold transition-colors duration-300"
                                        style="color: {{ block.settings.btn_text_color }};"
                                      >
                                        {{ block.settings.button_text_2 }}
                                      </p>
                                      {% render 'icon-playback',
                                        width: 20,
                                        height: 20,
                                        fill: settings.social_icon_color
                                      %}
                                    </div>
                                  {% endif %}
                                </a>
                              </div>

                              <style>
                                .group\/card:hover .card-text {
                                  color: {{ block.settings.btn_text_hover_color | default: '#ff0000' }} !important;
                                }
                              </style>
                            {% endif %}
                          {% endif %}
                        {% endfor %}
                      </div>
                    </div>

                    {% comment %} scrolling text start{% endcomment %}

                    <div
                      class="scrolling-text-section scrolling-text-borders"
                      id="scrolling-text-{{ section.id }}"
                      data-responsive="true"
                    >
                      <div
                        class="scrolling-text-container"
                        data-direction="{{ section.settings.direction }}"
                      >
                        <!-- First set of content -->
                        {% for i in (1..section.settings.repeat_count) %}
                          <span class="scrolling-text-item">{{ section.settings.scrolling_text }}</span>
                          {% if section.settings.separator_image %}
                            <img
                              class="scrolling-separator"
                              src="{{ section.settings.separator_image | image_url }}"
                              alt="separator"
                              height="100%"
                              width="100%"
                            >
                          {% else %}
                            {% render 'icon-playback',
                              class: 'bi bi-caret-right-fill scrolling-separator',
                              width: '16px',
                              height: '16px',
                              fill: 'currentColor'
                            %}
                          {% endif %}
                        {% endfor %}
                        <!-- Duplicate set for seamless infinite scrolling -->
                        {% for i in (1..section.settings.repeat_count) %}
                          <span class="scrolling-text-item">{{ section.settings.scrolling_text }}</span>
                          {% unless forloop.last %}
                            {% if section.settings.separator_image != blank %}
                              <img
                                class="scrolling-separator"
                                src="{{ section.settings.separator_image | image_url }}"
                                alt="separator"
                                height="100%"
                                width="100%"
                              >
                            {% else %}
                              <span class="scrolling-separator text-[var(--header_text)] px-2">–</span>
                            {% endif %}
                          {% endunless %}
                        {% endfor %}
                      </div>
                    </div>

                    {% comment %} scrolling text end {% endcomment %}
                  </div>
                {% else %}
                  <a href="{{ link.url }}" class="py-2 px-2 block">
                    {{ link.title }}
                  </a>
                {% endif %}
              </li>
            {%- endfor -%}
          </ul>
        </div>

        <!-- Right: Actions -->
        <div class="flex lg:!w-1/3 gap-6 items-center justify-end ">
          <!-- Top Row: Action Utilities -->

          <!-- Search -->
          <div class="relative ">
            <button
              id="search-toggle"
              class="flex items-center justify-center text-[var(--header_text)] hover:text-[var(--hover)] pr-2"
              aria-label="Toggle search"
              aria-expanded="false"
            >
              {{
                'icon-search1.svg'
                | inline_asset_content
                | replace: '<svg', '<svg role="img" aria-hidden="true" class="w-8 h-8 search-toggle-icon"'
              }}
            </button>

            <!-- Search Container -->
            <div
              id="search-container"
              class="fixed left-0 right-0 hidden opacity-0 shadow-lg py-8 color-{{ color_scheme }} search-container-fixed"
              aria-hidden="true"
            >
              <div
                class="searchbox-container w-full"
              >
                <form
                  action="{{ routes.search_url }}"
                  method="get"
                  class="flex items-center gap-4 w-full"
                  role="search"
                >
                  <div class="relative flex-1">
                    <input
                      type="search"
                      name="q"
                      placeholder="Search"
                      class="bb-search-input search-input w-full py-3 text-[26px] lg:text-4xl focus:outline-none bg-transparent placeholder-black"
                    >
                  </div>
                  <button
                    type="submit"
                    class="text-[24px] px-3 hover:border-1 rounded-md transition-colors duration-200 search-button-padding header-search-submit-btn"
                    style="background: var(--button); color: var(--button_label);"
                  >
                    SEARCH
                  </button>
                  <button
                    id="close-search"
                    class="hover:text-gray-700 transition-colors duration-200 search-close-color"
                    aria-label="Close search"
                  >
                    <svg class="size-10" fill="none" stroke="currentColor" viewBox="0 0 24 24" stroke-width="2.5">
                      <path stroke-linecap="round" stroke-linejoin="round" d="M6 18L18 6M6 6l12 12" />
                    </svg>
                  </button>
                </form>

                <div
                  class="block search-bottom-bar w-full "
                >
                  &nbsp
                </div>

                {% if settings.recent_search_enabled %}
                  <!-- Quick Links -->
                  <div
                    class="flex flex-col lg:flex-row items-center search-top-searches"
                  >
                    <span
                      class="inline-block lg:!block text-[14px] lg:text-[16px] uppercase mr-4  search-top-searches-label"
                      >Recent Searches</span
                    >
                    <div class="flex flex-wrap gap-6" id="recent-searches-container">
                      <!-- Default searches (fallback) -->
                      <a
                        href="{{ routes.search_url }}?q=new"
                        class="px-1 hover:bg-black hover:text-white transition-colors duration-200 rounded-md text-[16px] lg:text-[20px] font-medium search-chip no-inline-hover default-search-chip"
                        >New Arrivals</a
                      >
                      <a
                        href="{{ routes.search_url }}?q=sale"
                        class="px-1 hover:bg-black hover:text-white transition-colors duration-200 rounded-md text-[16px] lg:text-[20px] font-medium search-chip no-inline-hover default-search-chip"
                        >Sale</a
                      >
                      <a
                        href="{{ routes.search_url }}?q=bestsellers"
                        class="px-1 hover:bg-black hover:text-white transition-colors duration-200 rounded-md text-[16px] lg:text-[20px] font-medium search-chip no-inline-hover default-search-chip"
                        >Bestsellers</a
                      >
                    </div>
                  </div>
                {% endif %}
              </div>
            </div>

            <!-- Search Overlay -->
            <div
              id="search-overlay"
              class="fixed left-0 right-0 w-full bg-black opacity-0 pointer-events-none search-overlay-fixed"
            >
              &nbsp;
            </div>
          </div>

          <div class="bb-only-desktop">
            <localization-form class="small-hide medium-hide" data-prevent-hide>
              {%- form 'localization', id: 'HeaderCountryForm', class: 'localization-form' -%}
                <div>
                  <h2 class="visually-hidden" id="HeaderCountryLabel">{{ 'localization.country_label' | t }}</h2>
                  {%- render 'currency-dropdown', localPosition: 'HeaderCountry' -%}
                </div>
              {%- endform -%}
            </localization-form>
          </div>

          <!-- Login -->
          <a
            href="{{routes.account_login_url }}"
            class="hidden lg:!inline-flex items-center gap-2 rounded-xl  text-[16px] text-[var(--header_text)] login-link"
            aria-label="{{ 'customer.login_page.title' | t }}"
          >
            {{ 'customer.login_page.title' | t }}
          </a>

          <!-- Cart -->
          <a
            href="{{ routes.cart_url }}"
            class="focus-inset !flex items-center justify-center text-[var(--header_text)] cart-link"
            id="cart-icon-bubble"
            aria-label="{{ 'sections.cart.title' | t }}"
          >
            <span
              class="flex text-[16px] cart-margin-right"
            >
              {{- 'sections.cart.title' | t -}}
            </span>
            <span
              aria-label="{{ cart.item_count }} items in cart"
            >
              [{{ cart.item_count }}]
            </span>
          </a>

          <!-- Hamburger -->
          <button
            id="hamburger-menu"
            class="md:hidden text-[var(--header_text)] hover:text-gray-700 hamburger-text-color"
            aria-label="Menu"
            aria-expanded="false"
            aria-controls="mobile-menu"
          >
            <svg class="size-8" fill="none" stroke="currentColor" viewBox="0 0 24 24" stroke-width="2.5">
              <path stroke-linecap="round" stroke-linejoin="round" d="M3.75 6.75h16.5M3.75 12h16.5m-16.5 5.25h16.5" />
            </svg>
          </button>
        </div>
      </nav>
      <div
        class="hidden lg:!block bottom-bar bg-transparent w-full relative overflow-visible"
      >
        <span
          id="bottom-bar-indicator"
          class="absolute bottom-0 left-0 bottom-bar-indicator"
        ></span>
      </div>
    </div>
  </div>
  <div
    class="mobile-bottom-bar lg:hidden w-full bg-black"
  >
    &nbsp
  </div>
</header>

<!-- Sub Menu Overlay -->
<div
  id="mega-menu-overlay"
  class="fixed top-1/5 w-full bg-black opacity-0 pointer-events-none mega-menu-overlay-z"
>
  &nbsp;
</div>

<!-- Mobile Menu Overlay -->
<div
  id="menu-overlay"
  class="fixed inset-0 bg-black opacity-0 pointer-events-none transition-opacity duration-300 menu-overlay-z"
>
  &nbsp;
</div>

<!-- Mobile Menu -->
<div
  id="mobile-menu"
  class="lg:hidden w-[90vw] h-[100vh] fixed top-0 right-0 color-{{ color_scheme }} flex mobile-menu-transform"
>
  <!-- Mobile scrolling text removed - using single responsive instance -->

  <div
    class="flex flex-1 flex-col justify-between overflow-y-auto mobile-menu-padding"
  >
    <nav
      class="flex flex-col space-y-4 pt-10 w-full justify-between mobile-menu-section-padding"
    >
      <div class="upper-section">
        <div class="flex items-center justify-end">
          <button
            type="button"
            class="text-[14px] pb-2 leading-none tracking-tight uppercase mobile-menu-close-color"
            aria-label="{{ 'accessibility.close' | t }}"
          >
            {{ 'accessibility.close' | t }}
          </button>
        </div>
        {% if section.settings.menu.links != blank %}
          {% for link in section.settings.menu.links %}
            <div class="mobile-menu-item">
              <div class="horizontal-line w-full h-0.5 my-2 mobile-menu-divider">&nbsp;</div>
              <div class="!flex items-center justify-between">
                <a href="{{ link.url }}" class="block text-[24px] text-[var(--header_text)] font-medium py-2">
                  {{ link.title }}
                </a>
                {% if link.links.size > 0 %}
                  <button
                    type="button"
                    class="toggle-submenu focus:outline-none flex-1 flex justify-end mr-2"
                    aria-expanded="false"
                    aria-controls="mobile-submenu-{{ forloop.index }}"
                    aria-label="Toggle {{ link.title }} submenu"
                  >
                    {% if section.settings.dropdown_icon != blank %}
                      <img
                        src="{{ section.settings.dropdown_icon | image_url }}"
                        alt="Dropdown Icon"
                        width="100%"
                        height="auto"
                        class="w-8 h-8 object-contain transition-transform duration-300"
                        aria-hidden="true"
                      >
                    {% else %}
                      <svg
                        width="41"
                        height="20"
                        viewBox="0 0 41 20"
                        fill="none"
                        xmlns="http://www.w3.org/2000/svg"
                        class="w-5 h-5 object-contain transition-transform duration-300 group-hover:-rotate-90 mx-1 header-text-color"
                        stroke="currentColor"
                      >
                        <path d="M20.3119 19.7659C20.7254 19.7298 21.1168 19.5625 21.4298 19.2881L39.5626 3.50455C39.7667 3.3376 39.9354 3.131 40.0586 2.89707C40.1818 2.66313 40.2569 2.40663 40.2795 2.14286C40.3022 1.87909 40.2718 1.61342 40.1903 1.3617C40.1088 1.10998 39.9778 0.877357 39.805 0.677661C39.6323 0.477966 39.4215 0.315286 39.185 0.199328C38.9485 0.0833695 38.6912 0.0164912 38.4285 0.0026841C38.1658 -0.011123 37.9031 0.0284416 37.6559 0.118979C37.4087 0.209515 37.1821 0.349193 36.9897 0.529697L20.1434 15.1881L3.29712 0.529697C3.10468 0.349193 2.87811 0.209515 2.63091 0.118979C2.38372 0.0284416 2.12095 -0.011123 1.85825 0.0026841C1.59555 0.0164912 1.3383 0.0833695 1.10182 0.199328C0.865337 0.315286 0.654461 0.477966 0.481748 0.677661C0.309036 0.877357 0.17802 1.10998 0.0965041 1.3617C0.0149883 1.61342 -0.0153602 1.87909 0.00726535 2.14286C0.0298909 2.40663 0.105028 2.66313 0.228202 2.89707C0.351376 3.131 0.520068 3.3376 0.72423 3.50455L18.8569 19.2881C19.0552 19.4619 19.2862 19.5937 19.5362 19.6758C19.7861 19.7579 20.0499 19.7885 20.3119 19.7659Z" fill="currentColor"/>
                      </svg>
                    {% endif %}
                  </button>
                {% endif %}
              </div>
              {% if link.links.size > 0 %}
                <div
                  id="mobile-submenu-{{ forloop.index }}"
                  role="region"
                  aria-label="{{ link.title }} submenu"
                  class="ml-1 hidden space-y-2 submenu max-h-[0] overflow-y-auto overscroll-contain styled-scrollbar transition-all duration-300"
                >
                  <div class="pr-4">
                    {% for childlink in link.links %}
                      <a
                        href="{{ childlink.url }}"
                        class="block text-[14px] text-gray-700 mt-5 mb-2 tracking-tight"
                      >
                        {{ childlink.title }}
                      </a>
                      {% if childlink.links.size > 0 %}
                        <ul class="space-y-0">
                          {% for grandchildlink in childlink.links %}
                            <li>
                              <a
                                href="{{ grandchildlink.url }}"
                                class="block text-[14px] font-medium text-[var(--header_text)] tracking-normal"
                              >
                                {{ grandchildlink.title }}
                              </a>
                            </li>
                          {% endfor %}
                          <a
                            href="{{childlink.url}}"
                            class="text-[12px] text-gray-500 underline tracking-tight  leading-none "
                          >
                            {{ 'general.shop_all' | t }}
                            {{ childlink.title -}}
                          </a>
                        </ul>
                      {% endif %}
                    {% endfor %}

                    <!-- Mobile Mega Menu Images -->
                    {% for block in section.blocks %}
                      {% if block.type == 'mega_menu_images' and block.settings.menu_item_name == link.title %}
                        <div class="flex flex-col gap-4 mt-4">
                          {% if block.settings.image_1 != blank %}
                            <div class="flex flex-col">
                              <a href="{{ block.settings.button_link_1 }}">
                                <div class="relative block overflow-hidden">
                                  <img
                                    src="{{ block.settings.image_1 | image_url }}"
                                    alt="Shop now image 1"
                                    class="w-full h-full object-cover"
                                    loading="lazy"
                                    width="100%"
                                    height="auto"
                                  >
                                </div>
                              </a>
                              <a
                                href="{{ block.settings.button_link_1 }}"
                                class="block mt-4 transition-all duration-300"
                              >
                                <div class="flex items-center justify-between">
                                  <p
                                    class="text-[12px] uppercase font-medium"
                                    style="color: {{ block.settings.btn_text_color }};"
                                  >
                                    {{ block.settings.button_text_1 }}
                                  </p>
                                  <svg
                                    xmlns="http://www.w3.org/2000/svg"
                                    class="w-5 h-5 object-contain transition-transform duration-300 group-hover:-rotate-90 mx-1"
                                    fill="none"
                                    viewBox="0 0 9 9"
                                    stroke-width="1.5"
                                    stroke="currentColor"
                                    stroke-linecap="round"
                                    stroke-linejoin="round"
                                    aria-hidden="true"
                                  >
                                    <path d="M1.1875 7.7334H7.6599M7.6599 7.7334V1.261M7.6599 7.7334L1.1875 1.261"/>
                                  </svg>
                                </div>
                              </a>
                            </div>
                          {% endif %}

                          {% if block.settings.image_2 != blank %}
                            <div class="group/card cursor-pointer mt-4">
                              <a href="{{ block.settings.button_link_2 }}">
                                <div class="relative block overflow-hidden">
                                  <div class="aspect-[4/3] overflow-hidden bg-gray-100">
                                    <img
                                      src="{{ block.settings.image_2 | image_url }}"
                                      alt="Shop now image 2"
                                      class="w-full h-full object-cover group-hover/card:scale-110 transition-transform duration-700"
                                      loading="lazy"
                                      width="100%"
                                      height="auto"
                                    >
                                    <div class="absolute inset-0 bg-black/60 flex items-center justify-center translate-y-full group-hover/card:translate-y-0 transition-transform duration-300">
                                      <span class="text-white text-xl font-bold tracking-tight">
                                        {{- 'general.shop_now' | t -}}
                                      </span>
                                    </div>
                                  </div>
                                </div>
                              </a>
                              <a
                                href="{{ block.settings.button_link_2 }}"
                                class="block mt-4 transition-all duration-300"
                              >
                                <div class="flex items-center justify-between group-hover/card:font-bold">
                                  <p
                                    class="text-lg font-medium mega-menu-btn-text"
                                    style="color: {{ block.settings.btn_text_color }};"
                                  >
                                    {{ block.settings.button_text_2 }}
                                  </p>
                                  <svg
                                    xmlns="http://www.w3.org/2000/svg"
                                    class="w-5 h-5 object-contain transition-transform duration-300 group-hover:-rotate-90 mx-1"
                                    fill="none"
                                    viewBox="0 0 9 9"
                                    stroke-width="1.5"
                                    stroke="currentColor"
                                    stroke-linecap="round"
                                    stroke-linejoin="round"
                                    aria-hidden="true"
                                  >
                                    <path d="M1.1875 7.7334H7.6599M7.6599 7.7334V1.261M7.6599 7.7334L1.1875 1.261"/>
                                  </svg>
                                </div>
                              </a>
                            </div>
                          {% endif %}
                        </div>
                      {% endif %}
                    {% endfor %}
                  </div>
                </div>
              {% endif %}
            </div>
          {% endfor %}
        {% endif %}
      </div>
      <div class="horizontal-line w-full h-0.5 my-2 mobile-menu-divider">&nbsp;</div>
    </nav>

    <div class="flex flex-col w-full">
      <div class="flex flex-col gap-1 mb-4 font-semibold ">
        <!-- Wrap in localization-form custom element -->
        <localization-form class="header-country-selector">
          {%- form 'localization', id: 'HeaderCountryForm', class: 'localization-form' -%}
            <div class="country-selector relative inline-block">
              <!-- Trigger: Current country -->
              <button
                type="button"
                class="country-selector-button localization-form__select inline-flex items-center cursor-pointer px-1 gap-2 hover:bg-gray-100"
                aria-expanded="false"
                aria-controls="header-country-results"
                aria-describedby="HeaderCountryLabel"
              >
                <!-- Add flag icon -->
                {% render 'country-flag', country_iso: localization.country.iso_code %}
                <span class="header-text-color">
                  {{ localization.country.name | upcase }}
                </span>
                {% render 'icon-playback',
                  class: 'bi bi-caret-right-fill scrolling-separator',
                  width: '16px',
                  height: '16px',
                  fill: 'currentColor'
                %}
              </button>

              <!-- Dropdown with proper structure -->
              <div
                class="country-selector-dropdown disclosure__list-wrapper absolute bottom-16 w-100 border border-gray-200 rounded-md shadow-lg transition-all duration-300 z-[9999] color-{{ color_scheme }} country-selector-dropdown-bg"
                hidden
              >
                <ul
                  id="header-country-results"
                  role="list"
                  class="max-h-100 overflow-y-auto divide-y divide-gray-100 text-xl"
                >
                  {% for country in localization.available_countries %}
                    <li class="disclosure__item">
                      <a
                        href="#"
                        class="w-full flex items-center justify-between px-4 py-2 text-2xl hover:bg-gray-100 header-text-color link link--text disclosure__link"
                        {% if country.iso_code == localization.country.iso_code %}
                          aria-current="true"
                        {% endif %}
                        data-value="{{ country.iso_code }}"
                        id="{{ country.name }}"
                      >
                        <!-- Add flag icon -->
                        {% render 'country-flag', country_iso: country.iso_code %}
                        <span class="mx-2">{{ country.name }}</span>
                        <span class="font-medium">
                          {{ country.currency.iso_code }}
                          {{ country.currency.symbol }}
                        </span>
                      </a>
                    </li>
                  {% endfor %}
                </ul>
              </div>
            </div>

            <!-- REQUIRED: Hidden input for form submission -->
            <input type="hidden" name="country_code" value="{{ localization.country.iso_code }}">
          {%- endform -%}
        </localization-form>
        <!--
          <a
            href="{{ routes.account_login_url }}"
           style="width: min-content; background: rgb(var(--color-foreground)); color: rgb(var(--color-background));"
            style="width: min-content;  background: var(--header_text); color: var(--header_background);"
            aria-label="Login"
          >
            LOGIN
            <svg
              xmlns="http://www.w3.org/2000/svg"
              class="w-5 h-5 object-contain transition-transform duration-300 mx-1"
              fill="none"
              viewBox="0 0 9 9"
              stroke-width="1.5"
              stroke="currentColor"
              stroke-linecap="round"
              stroke-linejoin="round"
              aria-hidden="true"
            >
              <path d="M1.1875 7.7334H7.6599M7.6599 7.7334V1.261M7.6599 7.7334L1.1875 1.261"/>
            </svg>
          </a>
        -->
      </div>
      <div class="horizontal-line w-full h-0.5 mobile-menu-divider">&nbsp;</div>
      <div id="social-link-container" class="flex flex-wrap items-center justify-between gap-4 m-4">
        {% if settings.social_facebook_link != blank %}
          <a href="{{ settings.social_facebook_link }}" aria-label="Facebook" target="_blank" rel="noopener">
            {{
              'icon-facebook.svg'
              | inline_asset_content
              | replace: '<svg', '<svg role="img" aria-hidden="true" class="social-icon-height-30" style="fill: '
              | append: settings.social_icon_color
              | remove: '_'
            }}
          </a>
        {% endif %}

        {% if settings.social_instagram_link != blank %}
          <a href="{{ settings.social_instagram_link }}" aria-label="Instagram" target="_blank" rel="noopener">
            {{
              'icon-instagram.svg'
              | inline_asset_content
              | replace: '<svg', '<svg role="img" aria-hidden="true" class="social-icon-height-30" style="fill: '
              | append: settings.social_icon_color
              | remove: '_'
            }}
          </a>
        {% endif %}

        {% if settings.social_youtube_link != blank %}
          <a href="{{ settings.social_youtube_link }}" aria-label="YouTube" target="_blank" rel="noopener">
            {{
              'icon-youtube.svg'
              | inline_asset_content
              | replace: '<svg', '<svg role="img" aria-hidden="true" class="social-icon-height-25" style="fill: '
              | append: settings.social_icon_color
              | remove: '_'
            }}
          </a>
        {% endif %}
        {% if settings.social_twitter_link != blank %}
          <a href="{{ settings.social_twitter_link }}" aria-label="Twitter" target="_blank" rel="noopener">
            {{
              'icon-twitter.svg'
              | inline_asset_content
              | replace: '<svg', '<svg role="img" aria-hidden="true" class="social-icon-height-25" style="fill: '
              | append: settings.social_icon_color
              | remove: "'"
            }}
          </a>
        {% endif %}
        {% if settings.social_snapchat_link != blank %}
          <a href="{{ settings.social_snapchat_link }}" aria-label="Snapchat" target="_blank" rel="noopener">
            {{
              'icon-snapchat.svg'
              | inline_asset_content
              | replace: '<svg', '<svg role="img" aria-hidden="true" class="social-icon-height-25" style="fill: '
              | append: settings.social_icon_color
              | remove: "'"
            }}
          </a>
        {% endif %}
      </div>
    </div>
  </div>
</div>

<div class="header-offset" data-header-offset></div>
{% style %}
  :root {
    --header-bg-color: {{ section.settings.background_color }};
    --header-vertical-padding: {{ section.settings.vertical_padding }}px;
    --header-scrolling-direction: {{ section.settings.direction }};
    --header-scrolling-speed: {{ section.settings.speed }}s;
    --header-text-color: {{ section.settings.text_color }};
    --header-font-size: {{ section.settings.font_size }}px;
    --header-font-weight: {{ section.settings.font_weight }};
    --header-text-transform: {{ section.settings.text_transform }};
    --header-letter-spacing: {{ section.settings.letter_spacing }}px;
    --header-separator-spacing: {{ section.settings.separator_spacing }}px;
    --header-font-size-2: {{ section.settings.font_size | times: 0.8 | times: 1.5 }}px;
    --header-font-size-3: {{ section.settings.font_size | times: 1.5 }}px;
    --header-font-size-4: {{ section.settings.font_size | times: 0.6 | times: 1.5 }}px;
  }
{% endstyle %}

<script>
  document.addEventListener('DOMContentLoaded', function () {
    
    /* -- Mobile menu toggle - FIXED VERSION -- */
    const hamburgerMenu = document.getElementById('hamburger-menu');
    const mobileMenu = document.getElementById('mobile-menu');
    const overlay = document.getElementById('menu-overlay');
    const body = document.body;

    let isMobileMenuOpen = false;

    function openMobileMenu() {
      if (isMobileMenuOpen) return;
      
      isMobileMenuOpen = true;
      
      // Update hamburger state
      hamburgerMenu.setAttribute('aria-expanded', 'true');
      hamburgerMenu.setAttribute('aria-label', 'Close Menu');
      
      // Show elements
      mobileMenu.style.display = 'flex';
      overlay.style.display = 'block';
      
      // Prevent body scroll
      body.classList.add('mobile-menu-active');
      body.style.overflow = 'hidden';
      
      // Force reflow
      mobileMenu.offsetHeight;
      overlay.offsetHeight;
      
      // Animate in
      requestAnimationFrame(() => {
        mobileMenu.classList.add('active');
        overlay.classList.add('active');
        overlay.style.opacity = '0.5';
        overlay.style.pointerEvents = 'auto';
      });
    }

    function closeMobileMenu() {
      if (!isMobileMenuOpen) return;
      
      isMobileMenuOpen = false;
      
      // Update hamburger state
      hamburgerMenu.setAttribute('aria-expanded', 'false');
      hamburgerMenu.setAttribute('aria-label', 'Menu');
      
      // Animate out
      mobileMenu.classList.remove('active');
      overlay.classList.remove('active');
      overlay.style.opacity = '0';
      overlay.style.pointerEvents = 'none';
      
      // Re-enable body scroll
      body.classList.remove('mobile-menu-active');
      body.style.overflow = '';
      
      // Get the animation speed from CSS variable
      const animationSpeed = parseFloat(getComputedStyle(document.documentElement).getPropertyValue('--menu-drawer-speed')) * 1000 || 600;
      
      // Hide elements after transition
      setTimeout(() => {
        if (!isMobileMenuOpen) {
          mobileMenu.style.display = 'none';
          overlay.style.display = 'none';
        }
      }, animationSpeed);
    }

    function toggleMobileMenu(e) {
      e.preventDefault();
      e.stopPropagation();
      
      if (isMobileMenuOpen) {
        closeMobileMenu();
      } else {
        openMobileMenu();
      }
    }

    // Event listeners with better error handling
    if (hamburgerMenu) {
      // Make sure the button is focusable and has proper attributes
      hamburgerMenu.setAttribute('tabindex', '0');
      hamburgerMenu.setAttribute('role', 'button');
      hamburgerMenu.setAttribute('aria-expanded', 'false');
      hamburgerMenu.setAttribute('aria-controls', 'mobile-menu');
      
      // Add click listener
      hamburgerMenu.addEventListener('click', toggleMobileMenu, { passive: false });
      
      // Add touch handling for mobile
      let touchStartY = 0;
      
      hamburgerMenu.addEventListener('touchstart', function(e) {
        touchStartY = e.touches[0].clientY;
      }, { passive: true });
      
      hamburgerMenu.addEventListener('touchend', function(e) {
        const touchEndY = e.changedTouches[0].clientY;
        const touchDiff = Math.abs(touchEndY - touchStartY);
        
        // Only trigger if it's a tap, not a scroll
        if (touchDiff < 10) {
          e.preventDefault();
          toggleMobileMenu(e);
        }
      }, { passive: false });
    }

    // Close menu when overlay is clicked
    if (overlay) {
      overlay.addEventListener('click', closeMobileMenu);
      overlay.addEventListener('touchstart', closeMobileMenu, { passive: true });
    }

    // Close menu when clicking close button inside menu
    const closeButton = mobileMenu?.querySelector('.mobile-menu-close-color');
    if (closeButton) {
      closeButton.addEventListener('click', closeMobileMenu);
      closeButton.addEventListener('touchstart', closeMobileMenu, { passive: true });
    }

    // Close menu on escape key
    document.addEventListener('keydown', function(e) {
      if (e.key === 'Escape' && isMobileMenuOpen) {
        closeMobileMenu();
      }
    });

    // Mobile menu resize handler - will be managed by global resize manager

    // Initialize menu state
    if (mobileMenu) {
      mobileMenu.style.display = 'none';
      mobileMenu.classList.remove('active');
    }
    
    if (overlay) {
      overlay.style.display = 'none';
      overlay.classList.remove('active');
    }

    /* -- Submenu Toggle for Mobile -- */
    const submenuToggles = mobileMenu?.querySelectorAll('.toggle-submenu') || [];
    let activeSubmenu = null;
    let isAnimating = false;

    const closeSubmenu = (submenu, icon) => {
      return new Promise((resolve) => {
        submenu.classList.remove('show');
        icon.style.transform = 'rotate(0)';

        const handleTransitionEnd = () => {
          submenu.classList.add('hidden');
          submenu.removeEventListener('transitionend', handleTransitionEnd);
          resolve();
        };

        submenu.addEventListener('transitionend', handleTransitionEnd);
      });
    };

    const openSubmenu = (submenu, icon) => {
      return new Promise((resolve) => {
        submenu.classList.remove('hidden');
        submenu.offsetHeight;

        requestAnimationFrame(() => {
          submenu.classList.add('show');
          icon.style.transform = 'rotate(-90deg)';

          submenu.addEventListener(
            'transitionend',
            () => {
              resolve();
            },
            { once: true }
          );
        });
      });
    };

    submenuToggles.forEach((toggle) => {
      toggle.addEventListener('click', async function () {
        if (isAnimating) return;
        isAnimating = true;

        const submenu = this.closest('.mobile-menu-item').querySelector('.submenu');
        const icon = this.querySelector('img, svg');

        try {
          if (activeSubmenu === submenu) {
            await closeSubmenu(submenu, icon);
            activeSubmenu = null;
          } else {
            const closePromise = activeSubmenu
              ? closeSubmenu(
                  activeSubmenu,
                  activeSubmenu.closest('.mobile-menu-item').querySelector('.toggle-submenu img, .toggle-submenu svg')
                )
              : Promise.resolve();

            await closePromise;
            await openSubmenu(submenu, icon);
            activeSubmenu = submenu;
          }
        } finally {
          isAnimating = false;
        }
      });
    });

    /* -- Transparent Header Background on Hover -- */
    const headerElement = document.querySelector('[data-header-sticky]');
    const isHeaderTransparent = headerElement?.classList.contains('header-transparent');
    const isHomePage = window.location.pathname === '/' || window.location.pathname === '/index';

    if (isHeaderTransparent && isHomePage) {
      // Add background on menu hover
      document.querySelectorAll('.dropdown-group').forEach(group => {
        group.addEventListener('mouseenter', () => {
          headerElement.classList.add('has-interaction');
        });
        group.addEventListener('mouseleave', () => {
          headerElement.classList.remove('has-interaction');
        });
      });
    }

    /* -- Global function to check header height and toggle bottom bar -- */
    window.checkHeaderHeight = function() {
      const headerEl = document.querySelector('[data-header-sticky]');
      const bottomBarIndicator = document.getElementById('bottom-bar-indicator');
      
      if (headerEl && bottomBarIndicator) {
        const headerHeight = headerEl.offsetHeight;
        
        if (headerHeight > 56) {
          // Hide bottom bar animation
          window.bottomBarEnabled = false;
          bottomBarIndicator.style.opacity = '0';
          bottomBarIndicator.style.pointerEvents = 'none';
        } else {
          // Show bottom bar animation
          window.bottomBarEnabled = true;
          bottomBarIndicator.style.opacity = '1';
          bottomBarIndicator.style.pointerEvents = 'auto';
        }
      }
    };

    /* -- sub menu logic -- */
    document.querySelectorAll('.dropdown-group').forEach(group => {
      const trigger = group.querySelector('a');
      const menu    = group.querySelector('.mega-menu-dropdown');
      if (!menu) return;

      // Track currently open menu with namespaced global state
      if (typeof window.BlackBytt === 'undefined') {
        window.BlackBytt = {};
      }
      if (typeof window.BlackBytt.currentOpenMenu === 'undefined') {
        window.BlackBytt.currentOpenMenu = null;
      }

      let closeTimer = null;

      // when the max-height transition finishes and we're closed, actually hide & disable interactions
      menu.addEventListener('transitionend', function onEnd(e) {
        if (e.propertyName === 'max-height' && !menu.classList.contains('open')) {
          menu.style.display        = 'none';
          menu.style.pointerEvents  = 'none';
          window.BlackBytt.currentOpenMenu = null;
        }
      });

      function doOpen(m) {
        // make sure it's in the layout
        m.style.display        = 'block';
        m.style.pointerEvents  = 'auto';
        m.offsetHeight; // force reflow
        m.classList.add('open');
        window.BlackBytt.currentOpenMenu = m;
      }

      function openMenu() {
        clearTimeout(closeTimer);

        const old = window.BlackBytt.currentOpenMenu;
        if (old && old !== menu) {
          // close the old one first, then open ours
          old.classList.remove('open');
          old.addEventListener('transitionend', function handler(e) {
            if (e.propertyName === 'max-height' && !old.classList.contains('open')) {
              old.removeEventListener('transitionend', handler);
              doOpen(menu);
            }
          });
        } else if (old !== menu) {
          doOpen(menu);
        }
      }

      function closeMenu() {
        menu.classList.remove('open');
        // pointer-events will get turned off in the transitionend above
      }

      // when you leave trigger or submenu start a 150 ms timer to close
      trigger.addEventListener('mouseleave', () => {
        clearTimeout(closeTimer);
        closeTimer = setTimeout(closeMenu, 100);
      });
      menu.addEventListener('mouseleave', () => {
        clearTimeout(closeTimer);
        closeTimer = setTimeout(closeMenu, 100);
      });

      // as soon as you re-enter either area cancel that close
      trigger.addEventListener('mouseenter', openMenu);
      menu.addEventListener('mouseenter', openMenu);
    });

    /* -- bottom bar indicator logic -- */
    const bottomBarIndicator = document.getElementById('bottom-bar-indicator');
    const menuItems = document.querySelectorAll('.menu-items ul > li.dropdown-group');
    let indicatorTimeout = null;
    window.bottomBarEnabled = true;

    if (bottomBarIndicator) {
      bottomBarIndicator.style.width = '100%';
      bottomBarIndicator.style.transform = 'translateX(0)';
      bottomBarIndicator.style.opacity = '1';
      bottomBarIndicator.style.transition = 'opacity 0.3s ease, transform var(--duration-moderate) var(--ease-standard), width var(--duration-moderate) var(--ease-standard)';
      
      // Initial check
      window.checkHeaderHeight();
      
      // Monitor header height changes
      window.addEventListener('resize', window.checkHeaderHeight);
      window.addEventListener('scroll', window.checkHeaderHeight);
    }

    menuItems.forEach((item) => {
      const link = item.querySelector('a');

      item.addEventListener('mouseenter', () => {
        if (!window.bottomBarEnabled) return; // Don't animate if disabled
        if (indicatorTimeout) clearTimeout(indicatorTimeout);
        const rect = link.getBoundingClientRect();
        const containerRect = item.closest('.menu-items').getBoundingClientRect();
        const left = rect.left - containerRect.left;
        const width = rect.width;


        // Use requestAnimationFrame for smoother animation
        requestAnimationFrame(() => {
          bottomBarIndicator.style.transform = `translateX(${left}px) translateY(-5px)`;
          bottomBarIndicator.style.width = `${width}px`;
          
        });
      });

      item.addEventListener('mouseleave', (e) => {
        if (!window.bottomBarEnabled) return; // Don't animate if disabled
        const related = e.relatedTarget;
        if (!item.contains(related)) {
          indicatorTimeout = setTimeout(() => {
            requestAnimationFrame(() => {
              bottomBarIndicator.style.width = '100%';
              bottomBarIndicator.style.transform = 'translateX(0) translateY(0)';
            });
          }, 150);
        }
      });
    });

    // horizontal Scrolling Text Section
    const scrollingSection = document.getElementById('scrolling-text-{{ section.id }}');
    if (scrollingSection) {
      const scrollingContainer = scrollingSection.querySelector('.scrolling-text-container');

      // Improved mobile detection using matchMedia
      const mobileMediaQuery = window.matchMedia('(max-width: 768px)');
      let cachedIsMobile = mobileMediaQuery.matches;
      
      function isMobile() {
        // Use cached value to avoid constant recalculation
        return cachedIsMobile;
      }
      
      // Update cached value when media query changes
      mobileMediaQuery.addEventListener('change', (e) => {
        cachedIsMobile = e.matches;
        // Only trigger resize if device type actually changed
        if (currentDeviceType !== cachedIsMobile) {
          setInitialPosition(true);
        }
      });

      // Animation state management
      let isAnimationInitialized = false;
      let currentDeviceType = null;
      let currentDirection = null;

      // Set initial position based on direction and device type
      function setInitialPosition(forceReset = false) {
        const direction = scrollingContainer.getAttribute('data-direction');
        const mobile = isMobile();
        
        // Only reset if device type or direction actually changed
        if (!forceReset && currentDeviceType === mobile && currentDirection === direction && isAnimationInitialized) {
          return; // No need to reset
        }
        
        currentDeviceType = mobile;
        currentDirection = direction;
        
        if (mobile) {
          // Mobile vertical scrolling
          if (direction === 'right') {
            scrollingContainer.style.transform = 'translateY(-50%)';
          } else {
            scrollingContainer.style.transform = 'translateY(0%)';
          }
        } else {
          // Desktop horizontal scrolling
          if (direction === 'right') {
            scrollingContainer.style.transform = 'translateX(-50%)';
          } else {
            scrollingContainer.style.transform = 'translateX(0%)';
          }
        }

        // Only reset animation if necessary
        if (forceReset || !isAnimationInitialized) {
          scrollingContainer.style.animation = 'none';
          scrollingContainer.offsetHeight; // Trigger reflow
          
          if (mobile) {
            const animationName = direction === 'left' ? 'scroll-bottom-to-top' : 'scroll-top-to-bottom';
            scrollingContainer.style.animation = `${animationName} {{ section.settings.speed }}s linear infinite`;
          } else {
            scrollingContainer.style.animation = `scroll-${direction} {{ section.settings.speed }}s linear infinite`;
          }
          
          isAnimationInitialized = true;
        }
      }

      // Initialize on load
      setInitialPosition();

      // Handle window resize to switch between mobile and desktop
      function handleResize() {
        const mobile = isMobile();
        // Only reset if device type actually changed
        if (currentDeviceType !== mobile) {
          setInitialPosition(true);
        }
      }

      // Scrolling text resize handler - will be managed by global resize manager

      // Calculate optimal repeat count based on text length and device type
      function calculateOptimalRepeats() {
        const textLength = '{{ section.settings.scrolling_text }}'.length;
        const estimatedImageWidth = {{ section.settings.font_size }} * 1.5;
        const separatorSpacing = {{ section.settings.separator_spacing }} * 2;
        
        let totalLength;
        if (isMobile()) {
          // For mobile vertical, consider height rather than width
          totalLength = textLength + (estimatedImageWidth + separatorSpacing) / 15;
        } else {
          totalLength = textLength + (estimatedImageWidth + separatorSpacing) / 10;
        }

        const minRepeats = Math.max(8, Math.ceil(200 / totalLength));
        return Math.min(minRepeats, 20);
      }

      // Dynamic speed control
      function updateScrollSpeed(speed) {
        scrollingContainer.style.animationDuration = speed + 's';
      }

      // Dynamic direction control
      function updateScrollDirection(direction) {
        scrollingContainer.setAttribute('data-direction', direction);
        // Force reset since direction changed
        setInitialPosition(true);
      }

      // Pause/resume functionality
      function pauseScroll() {
        scrollingContainer.style.animationPlayState = 'paused';
      }

      function resumeScroll() {
        scrollingContainer.style.animationPlayState = 'running';
      }

      // Image loading optimization
      function optimizeImageLoading() {
        const separatorImages = scrollingContainer.querySelectorAll('.scrolling-separator');
        separatorImages.forEach(img => {
          if (!img.hasAttribute('loading')) {
            img.setAttribute('loading', 'lazy');
          }
          
          img.addEventListener('error', function() {
            this.style.display = 'none';
          });
        });
      }

      // Initialize image optimization
      optimizeImageLoading();

      // Add methods to global scope for external control (namespaced)
      if (typeof window.BlackBytt === 'undefined') {
        window.BlackBytt = {};
      }
      window.BlackBytt.ScrollingText = window.BlackBytt.ScrollingText || {};
      window.BlackBytt.ScrollingText['section-{{ section.id }}'] = {
        updateSpeed: updateScrollSpeed,
        updateDirection: updateScrollDirection,
        pause: pauseScroll,
        resume: resumeScroll,
        element: scrollingSection,
        calculateOptimalRepeats: calculateOptimalRepeats,
        resetPosition: setInitialPosition,
        optimizeImages: optimizeImageLoading,
        isMobile: isMobile
      };
    }

    /* -- Sticky Header -- */
    const header = document.querySelector('[data-header-sticky]');
    const headerOffset = document.querySelector('[data-header-offset]');

    if (header && headerOffset && !header.classList.contains('sticky-disabled')) {
      let lastScroll = 0;
      let initialHeaderTop = header.offsetTop;
      let isFixed = false;
      let stickyEnabled = !header.classList.contains('sticky-disabled');

      const setHeaderHeight = () => {
        const headerEl = document.querySelector('[data-header-sticky]');
        const announcementBar = document.getElementsByClassName("announcement-bar")[0];
      if (headerEl && announcementBar) {
        const height = headerEl.offsetHeight;
        const h2 = announcementBar.offsetHeight;
        const finalHeight = height + h2;
        document.documentElement.style.setProperty('--header-height', `${finalHeight}px`);
        const root = document.documentElement;
        const headerHeight = getComputedStyle(root).getPropertyValue('--header-height');

        initialHeaderTop = headerEl.offsetTop;
        
        // Check bottom bar visibility when header height changes
        if (typeof window.checkHeaderHeight === 'function') {
          window.checkHeaderHeight();
        }
      }
      };

      const handleScroll = () => {
        if (!stickyEnabled) return;

        const currentScroll = window.pageYOffset;

        if (currentScroll <= initialHeaderTop) {
          header.classList.remove('is-sticky', 'is-hidden');
          headerOffset.classList.remove('is-active');
          isFixed = false;
          return;
        }

        if (!isFixed && currentScroll > initialHeaderTop) {
          header.classList.add('is-sticky');
          headerOffset.classList.add('is-active');
          isFixed = true;
        }

        lastScroll = currentScroll;
      };

      setHeaderHeight();
      // Header sticky resize handler - will be managed by global resize manager
      window.addEventListener('scroll', () => requestAnimationFrame(handleScroll), { passive: true });
    }

    /* -- Country Selector for Mobile - Icon Rotation -- */
    // Note: Dropdown toggle is handled by localization-form.js
    // This script only handles icon rotation animation
    const countrySelector = document.querySelector('.country-selector');
    const countrySelectorBtn = document.querySelector('.country-selector-button');

    if (countrySelector && countrySelectorBtn) {
      // Observe aria-expanded changes to rotate icon
      const observer = new MutationObserver((mutations) => {
        mutations.forEach((mutation) => {
          if (mutation.type === 'attributes' && mutation.attributeName === 'aria-expanded') {
            const isExpanded = countrySelectorBtn.getAttribute('aria-expanded') === 'true';
            const icon = countrySelectorBtn.querySelector('img, svg');
            if (icon) {
              icon.style.transform = isExpanded ? 'rotate(-90deg)' : 'rotate(0)';
            }
          }
        });
      });

      observer.observe(countrySelectorBtn, {
        attributes: true,
        attributeFilter: ['aria-expanded']
      });
    }

    /* -- Search bar -- */
    const searchToggle = document.getElementById('search-toggle');
    const searchContainer = document.getElementById('search-container');
    const searchOverlay = document.getElementById('search-overlay');
    const closeSearch = document.getElementById('close-search');
    const searchInput = searchContainer?.querySelector('input[type="search"]');

    if (searchToggle && searchContainer && searchOverlay && closeSearch && searchInput) {
      let isSearchOpen = false;
      searchContainer.style.transition = 'opacity 0.5s ease, transform 0.5s ease';
      searchOverlay.style.transition = 'opacity 0.3s ease';
      searchContainer.style.transform = 'translate3d(0, calc(var(--header-height) - 1px), 0)';
      searchOverlay.classList.add('pointer-events-none');

      function toggleSearch(show) {
        if (show === isSearchOpen) return;

        isSearchOpen = show;
        searchToggle.setAttribute('aria-expanded', show);

        const headerEl2 = document.querySelector('[data-header-sticky]');
        const announcementBar = document.getElementsByClassName("announcement-bar")[0];
      if (headerEl2 && announcementBar) {
        const height = headerEl2.offsetHeight;
        const h2 = announcementBar.offsetHeight;
        const finalHeight = height + h2;
        searchContainer.style.top = `${finalHeight}px`;
      } 

        // Handle transparent header background
        if (isHeaderTransparent && isHomePage) {
          if (show) {
            headerElement.classList.add('has-interaction');
          } else {
            headerElement.classList.remove('has-interaction');
          }
        }

        if (show) {
          searchContainer.classList.remove('hidden');
          searchOverlay.style.opacity = '0';
          searchOverlay.classList.remove('pointer-events-none');

          requestAnimationFrame(() => {
            searchContainer.style.opacity = '1';
            searchContainer.style.transform = 'translate3d(0, 0, 0)';

            setTimeout(() => searchInput.focus(), 400);
          });
        } else {
          searchContainer.style.opacity = '0';
          searchContainer.style.transform = 'translateY(-20px)';

          searchOverlay.style.opacity = '0';
          searchOverlay.classList.add('pointer-events-none');

          searchContainer.addEventListener('transitionend', function handler(e) {
            if (e.propertyName === 'opacity' && !isSearchOpen) {
              searchContainer.classList.add('hidden');
              searchContainer.removeEventListener('transitionend', handler);
            }
          });
        }
      }

      searchToggle.addEventListener('click', () => toggleSearch(!isSearchOpen));
      closeSearch.addEventListener('click', () => toggleSearch(false));
      searchOverlay.addEventListener('click', () => toggleSearch(false));

      document.addEventListener('keydown', function (e) {
        if (e.key === 'Escape' && isSearchOpen) {
          toggleSearch(false);
        }
      });
    }
  });

  const button = document.querySelector('.bb-localization-form__select');
  const arrow = button.querySelector('.dropdown-arrow');

  button.addEventListener('click', () => {
    arrow.classList.toggle('rotate-180');
  });

  // Recent Searches Functionality
  class RecentSearches {
    constructor() {
      this.storageKey = 'shopify_recent_searches';
      this.maxSearches = 3;
      this.init();
    }

    init() {
      this.trackSearchSubmissions();
      this.displayRecentSearches();
    }

    // Track when user submits a search
    trackSearchSubmissions() {
      const searchForms = document.querySelectorAll('form[action*="search"]');
      searchForms.forEach(form => {
        form.addEventListener('submit', (e) => {
          const searchInput = form.querySelector('input[name="q"]');
          if (searchInput && searchInput.value.trim()) {
            this.addSearch(searchInput.value.trim());
          }
        });
      });

      // Also track search from URL parameters
      const urlParams = new URLSearchParams(window.location.search);
      const searchQuery = urlParams.get('q');
      if (searchQuery && window.location.pathname.includes('/search')) {
        this.addSearch(searchQuery.trim());
      }
    }

    // Add a search to recent searches
    addSearch(searchTerm) {
      if (!searchTerm || searchTerm.length < 2) return;

      let recentSearches = this.getRecentSearches();
      
      // Remove if already exists (to move to top)
      recentSearches = recentSearches.filter(term => term.toLowerCase() !== searchTerm.toLowerCase());
      
      // Add to beginning
      recentSearches.unshift(searchTerm);
      
      // Keep only max number of searches
      recentSearches = recentSearches.slice(0, this.maxSearches);
      
      // Save to localStorage
      localStorage.setItem(this.storageKey, JSON.stringify(recentSearches));
      
      // Update display
      this.displayRecentSearches();
    }

    // Get recent searches from localStorage
    getRecentSearches() {
      try {
        const stored = localStorage.getItem(this.storageKey);
        return stored ? JSON.parse(stored) : [];
      } catch (e) {
        return [];
      }
    }

    // Display recent searches in the header
    displayRecentSearches() {
      const container = document.getElementById('recent-searches-container');
      if (!container) return;

      const recentSearches = this.getRecentSearches();
      
      // Always remove existing recent search chips first to prevent duplicates
      const existingRecentChips = container.querySelectorAll('.recent-search-chip');
      existingRecentChips.forEach(chip => chip.remove());
      
      if (recentSearches.length > 0) {
        // Hide default searches
        const defaultChips = container.querySelectorAll('.default-search-chip');
        defaultChips.forEach(chip => chip.style.display = 'none');
        
        // Create recent search chips
        recentSearches.forEach(searchTerm => {
          const chip = document.createElement('a');
          chip.href = `{{ routes.search_url }}?q=${encodeURIComponent(searchTerm)}`;
          chip.className = 'px-1 transition-colors duration-200 rounded-md text-[16px] lg:text-[20px] font-medium search-chip no-inline-hover recent-search-chip';
          chip.textContent = searchTerm;
          chip.title = `Search for "${searchTerm}"`;
          container.appendChild(chip);
        });
      } else {
        // Show default searches if no recent searches
        const defaultChips = container.querySelectorAll('.default-search-chip');
        defaultChips.forEach(chip => chip.style.display = 'inline-block');
      }
    }

    // Clear recent searches (optional utility method)
    clearRecentSearches() {
      localStorage.removeItem(this.storageKey);
      this.displayRecentSearches();
    }

    // Debug method to check current searches
    debugSearches() {
      // Current recent searches
    }
  }

  // Initialize recent searches when DOM is ready (only once)
  if (!window.recentSearchesInstance) {
    document.addEventListener('DOMContentLoaded', () => {
      window.recentSearchesInstance = new RecentSearches();
    });
  }

  /* ========================================================================
     CONSOLIDATED RESIZE EVENT MANAGER
     Prevents event listener stacking by managing all resize events in one place
     ======================================================================== */
  
  (function initGlobalResizeManager() {
    let resizeTimer;
    let lastWidth = window.innerWidth;
    
    // All resize handlers in one place
    const resizeHandlers = {
      // Mobile menu handler
      mobileMenu: () => {
        if (window.innerWidth > 1024 && isMobileMenuOpen) {
          closeMobileMenu();
        }
      },
      
      // Scrolling text handler
      scrollingText: () => {
        const scrollingSection = document.getElementById('scrolling-text-{{ section.id }}');
        if (scrollingSection && typeof handleResize !== 'undefined') {
          const mobile = window.innerWidth <= 768;
          const currentDeviceType = scrollingSection.dataset.deviceType;
          
          // Only call handleResize if device type changed
          if (currentDeviceType !== String(mobile)) {
            scrollingSection.dataset.deviceType = mobile;
            handleResize();
          }
        }
      },
      
      // Header sticky handler
      headerSticky: () => {
        if (typeof setHeaderHeight !== 'undefined') {
          setHeaderHeight();
        }
      }
    };
    
    // Consolidated resize handler with debouncing
    function handleGlobalResize() {
      clearTimeout(resizeTimer);
      resizeTimer = setTimeout(() => {
        const currentWidth = window.innerWidth;
        
        // Only process if width actually changed (not just height)
        if (currentWidth !== lastWidth) {
          lastWidth = currentWidth;
          
          // Execute all handlers
          Object.values(resizeHandlers).forEach(handler => {
            try {
              handler();
            } catch (error) {
              // Resize handler error
            }
          });
        }
      }, 150);
    }
    
    // Single resize listener
    window.addEventListener('resize', handleGlobalResize, { passive: true });
    
    // Cleanup on page unload
    window.addEventListener('beforeunload', () => {
      window.removeEventListener('resize', handleGlobalResize);
    });
  })();
</script>

{% schema %}
{
  "name": "Header",
  "settings": [
    {
      "type": "color_scheme",
      "id": "color_scheme",
      "label": "Color scheme",
      "default": "background-1"
    },
    {
      "type": "image_picker",
      "id": "logo",
      "label": "Logo"
    },
    {
      "type": "color",
      "id": "btn_text_color",
      "label": "Button Text Color",
      "default": "#222222"
    },
    {
      "type": "link_list",
      "id": "menu",
      "label": "Main Menu",
      "default": "main-menu"
    },
    {
      "type": "image_picker",
      "id": "dropdown_icon",
      "label": "Dropdown Icon"
    },
    {
      "type": "header",
      "content": "Menu Hover Effects"
    },
    {
      "type": "checkbox",
      "id": "enable_menu_hover_color",
      "label": "Enable menu item hover color change",
      "default": false,
      "info": "When enabled, menu items will change color on hover"
    },
    {
      "type": "color",
      "id": "menu_hover_color",
      "label": "Menu hover color",
      "default": "#000000",
      "info": "Color of menu items when hovered"
    },
    {
      "type": "checkbox",
      "id": "enable_sticky",
      "label": "Enable sticky header",
      "default": true
    },
    {
      "type": "checkbox",
      "id": "enable_transparent",
      "label": "Enable transparent header",
      "default": false,
      "info": "Makes header background transparent. Works best with hero images."
    },
    {
      "type": "header",
      "content": "Text Content"
    },
    {
      "type": "textarea",
      "id": "scrolling_text",
      "label": "Scrolling Text",
      "default": " SHOWCASE PROMOTIONS OR SPECIAL OFFERS",
      "info": "Enter any length of text that you want to scroll"
    },
    {
      "type": "range",
      "id": "repeat_count",
      "label": "Text Repetitions",
      "min": 2,
      "max": 20,
      "step": 1,
      "default": 10,
      "info": "How many times to repeat the text for seamless scrolling"
    },
    {
      "type": "header",
      "content": "Animation Settings"
    },
    {
      "type": "select",
      "id": "direction",
      "label": "Scroll Direction",
      "options": [
        {
          "value": "left",
          "label": "Right to Left"
        },
        {
          "value": "right",
          "label": "Left to Right"
        }
      ],
      "default": "right"
    },
    {
      "type": "range",
      "id": "speed",
      "label": "Scroll Speed (seconds)",
      "min": 5,
      "max": 60,
      "step": 1,
      "default": 60,
      "info": "Lower numbers = faster scrolling"
    },
    {
      "type": "checkbox",
      "id": "pause_on_hover",
      "label": "Pause on Hover",
      "default": true
    },
    {
      "type": "range",
      "id": "menu_drawer_animation_speed",
      "min": 0.1,
      "max": 2.0,
      "step": 0.1,
      "unit": "s",
      "label": "Mobile Menu Drawer Animation Speed",
      "default": 0.6,
      "info": "Speed of the mobile menu drawer open/close animation (in seconds)."
    },
    {
      "type": "header",
      "content": "Scrolling text Styling"
    },
    {
      "type": "image_picker",
      "id": "separator_image",
      "label": "Separator Image"
    },
    {
      "type": "range",
      "id": "font_size",
      "label": "Font Size (px)",
      "min": 12,
      "max": 48,
      "step": 1,
      "default": 24
    },
    {
      "type": "select",
      "id": "font_weight",
      "label": "Font Weight",
      "options": [
        {
          "value": "300",
          "label": "Light"
        },
        {
          "value": "400",
          "label": "Normal"
        },
        {
          "value": "500",
          "label": "Medium"
        },
        {
          "value": "600",
          "label": "Semi Bold"
        },
        {
          "value": "700",
          "label": "Bold"
        }
      ],
      "default": "500"
    },
    {
      "type": "select",
      "id": "text_transform",
      "label": "Text Transform",
      "options": [
        {
          "value": "none",
          "label": "None"
        },
        {
          "value": "uppercase",
          "label": "UPPERCASE"
        },
        {
          "value": "lowercase",
          "label": "lowercase"
        },
        {
          "value": "capitalize",
          "label": "Capitalize"
        }
      ],
      "default": "uppercase"
    },
    {
      "type": "range",
      "id": "letter_spacing",
      "label": "Letter Spacing (px)",
      "min": 0,
      "max": 5,
      "step": 0.1,
      "default": 0.6
    },
    {
      "type": "color",
      "id": "text_color",
      "label": "Text Color",
      "default": "#000000"
    },
    {
      "type": "color",
      "id": "background_color",
      "label": "Background Color",
      "default": "#ffffff"
    },
    {
      "type": "range",
      "id": "vertical_padding",
      "label": "Vertical Padding (px)",
      "min": 0,
      "max": 50,
      "step": 1,
      "default": 2
    },
    {
      "type": "range",
      "id": "separator_spacing",
      "label": "Separator Spacing (px)",
      "min": 10,
      "max": 50,
      "step": 1,
      "default": 20,
      "info": "Space around the separator character"
    }
  ],
  "blocks": [
    {
      "type": "mega_menu_images",
      "name": "Mega Menu Images",
      "settings": [
        {
          "type": "text",
          "id": "menu_item_name",
          "label": "Menu Item Name",
          "info": "Enter the exact name of the menu item"
        },
        {
          "type": "image_picker",
          "id": "image_1",
          "label": "First Image"
        },
        {
          "type": "url",
          "id": "button_link_1",
          "label": "First Button Link"
        },
        {
          "type": "text",
          "id": "button_text_1",
          "label": "First Button Text",
          "default": "Shop Now"
        },
        {
          "type": "image_picker",
          "id": "image_2",
          "label": "Second Image"
        },
        {
          "type": "url",
          "id": "button_link_2",
          "label": "Second Button Link"
        },
        {
          "type": "text",
          "id": "button_text_2",
          "label": "Second Button Text",
          "default": "Learn More"
        },

        {
          "type": "color",
          "id": "btn_text_hover_color",
          "label": "Button Text Hover Color",
          "default": "#000000"
        }
      ]
    }
  ]
}
{% endschema %}
