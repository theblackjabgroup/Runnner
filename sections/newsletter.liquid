{{ 'component-newsletter.css' | asset_url | stylesheet_tag }}

<div class="email-signup-section {% if section.settings.color_scheme != blank %}color-{{ section.settings.color_scheme }}{% endif %}" style="background-color: {{ section.settings.background_color }}; color: {{ section.settings.text_color }};">
  <form id="email-signup-form" class="email-signup-container" novalidate>
    <!-- Hidden accessibility heading -->
    <div class="visually-hidden" id="newsletter-heading">Newsletter signup</div>
    <input type="hidden" name="form_type" value="customer" />
    <input type="hidden" name="utf8" value="✓" />
    <input type="hidden" name="contact[tags]" value="newsletter" />
    
    <div class="message-container" style="display: none;" role="status" aria-live="polite"></div>
    
    <div class="form-fields-container">
      {% for block in section.blocks %}
        {% case block.type %}
          {% when 'email_input' %}
            <div class="input-wrapper">
              <label for="newsletter-email" class="visually-hidden">{{ block.settings.email_placeholder }}</label>
              <input 
                type="email" 
                id="newsletter-email"
                name="contact[email]" 
                class="email-input" 
                placeholder="{{ block.settings.email_placeholder }}" 
                aria-required="true"
                aria-describedby="newsletter-error"
                required 
                {{ block.shopify_attributes }}
              >
              <div id="newsletter-error" class="visually-hidden" aria-live="assertive"></div>
            </div>
          {% when 'signup_button' %}
            <button 
              type="submit" 
              class="signup-button" 
              style="background-color: {{ section.settings.button_color }}; color: {{ section.settings.button_text_color }};" 
              {{ block.shopify_attributes }}
              aria-label="{{ block.settings.button_text }}"
            >
              <span class="arrow-icon" aria-hidden="true">→</span>
              <span>{{ block.settings.button_text }}</span>
            </button>
        {% endcase %}
      {% endfor %}
    </div>
  </form>
</div>

<style>
  /* Accessibility styles */
  .visually-hidden {
    position: absolute !important;
    width: 1px !important;
    height: 1px !important;
    padding: 0 !important;
    margin: -1px !important;
    overflow: hidden !important;
    clip: rect(0, 0, 0, 0) !important;
    white-space: nowrap !important;
    border: 0 !important;
  }
  
  /* Focus styles for keyboard navigation */
  .email-input:focus,
  .signup-button:focus {
    outline: 2px solid #007bff;
    outline-offset: 2px;
  }
  
  /* Error styling */
  .email-input.error {
    border-color: #ff0000;
    border-width: 2px;
  }
  
  #newsletter-error:not(.visually-hidden) {
    color: #ff0000;
    font-size: 0.85em;
    margin-top: 0.25em;
  }
  
  /* Loading state for button */
  .signup-button.loading {
    opacity: 0.7;
    cursor: wait;
  }
  
  /* Ensure messages are visible */
  .message-container.error-message {
    color: #ff0000;
    border: 1px solid #ff0000;
    background-color: rgba(255, 0, 0, 0.1);
    padding: 0.5em;
  }
  
  .message-container.success-message {
    color: #28a745;
    border: 1px solid #28a745;
    background-color: rgba(40, 167, 69, 0.1);
    padding: 0.5em;
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const emailSignupForm = document.getElementById('email-signup-form');
    const emailInput = document.querySelector('.email-input');
    const signupButton = document.querySelector('.signup-button');
    const messageContainer = document.querySelector('.message-container');
    const formFieldsContainer = document.querySelector('.form-fields-container');
    const newsletterError = document.getElementById('newsletter-error');
    
    function validateEmail(email) {
      const re = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
      return re.test(email);
    }
    
    function showMessage(message, isError = false) {
      messageContainer.textContent = message;
      messageContainer.classList.remove('success-message', 'error-message');
      messageContainer.classList.add(isError ? 'error-message' : 'success-message');
      messageContainer.style.display = 'block';
      
      // Make sure screen readers announce the message
      setTimeout(() => {
        messageContainer.focus();
      }, 100);
    }
    
    function showInputError(message) {
      emailInput.classList.add('error');
      newsletterError.textContent = message;
      newsletterError.classList.remove('visually-hidden');
    }
    
    function clearInputError() {
      emailInput.classList.remove('error');
      newsletterError.textContent = '';
      newsletterError.classList.add('visually-hidden');
    }
    
    // Add keyboard support for input validation
    emailInput.addEventListener('keydown', function(e) {
      if (e.key === 'Enter') {
        const email = emailInput.value.trim();
        
        if (!email) {
          e.preventDefault();
          showInputError('Please enter your email address');
          return;
        }
        
        if (!validateEmail(email)) {
          e.preventDefault();
          showInputError('Please enter a valid email address');
          return;
        }
      }
    });
    
    // Clear error when user starts typing again
    emailInput.addEventListener('input', function() {
      clearInputError();
    });
    
    // Focus management for keyboard navigation
    messageContainer.setAttribute('tabindex', '-1');
    
    emailSignupForm.addEventListener('submit', function(e) {
      e.preventDefault();
      
      const email = emailInput.value.trim();
      
      if (!email) {
        showInputError('Please enter your email address');
        emailInput.focus(); // Set focus to input for keyboard users
        return;
      }
      
      if (!validateEmail(email)) {
        showInputError('Please enter a valid email address');
        emailInput.focus(); // Set focus to input for keyboard users
        return;
      }
      
      // Clear any previous errors
      clearInputError();
      
      // Disable button during submission
      signupButton.disabled = true;
      signupButton.classList.add('loading');
      signupButton.setAttribute('aria-busy', 'true');
      
      const formData = new FormData(emailSignupForm);
      
      // Use fetch API to submit the form without page navigation
      fetch('/contact#contact_form', {
        method: 'POST',
        body: formData,
        headers: {
          'X-Requested-With': 'XMLHttpRequest'
        }
      })
      .then(response => {
        // Handle successful submission
        emailInput.value = '';
        
        // Hide the form fields and show success message
        formFieldsContainer.style.display = 'none';
        showMessage('{{ section.settings.success_message | default: "Thank you for subscribing!" }}');
        
        // Optional: Show form again after some time
        if ({{ section.settings.show_form_again_after_success | default: true }}) {
          setTimeout(() => {
            formFieldsContainer.style.display = 'flex';
            messageContainer.style.display = 'none';
            emailInput.focus(); // Return focus to input for keyboard users
          }, {{ section.settings.form_reappear_time | default: 5000 }});
        }
      })
      .catch(error => {
        console.error('Error:', error);
        showMessage('There was an error submitting your email. Please try again.', true);
      })
      .finally(() => {
        signupButton.disabled = false;
        signupButton.classList.remove('loading');
        signupButton.setAttribute('aria-busy', 'false');
      });
    });
    
    // Add keyboard trap within form when focused for better accessibility
    document.addEventListener('keydown', function(e) {
      // If Tab key is pressed and focus is within form
      if (e.key === 'Tab' && emailSignupForm.contains(document.activeElement)) {
        const focusableElements = emailSignupForm.querySelectorAll('input:not([type="hidden"]), button');
        const firstElement = focusableElements[0];
        const lastElement = focusableElements[focusableElements.length - 1];
        
        // If shift + tab on first element, move to last element
        if (e.shiftKey && document.activeElement === firstElement) {
          e.preventDefault();
          lastElement.focus();
        } 
        // If tab on last element, move to first element
        else if (!e.shiftKey && document.activeElement === lastElement) {
          e.preventDefault();
          firstElement.focus();
        }
      }
    });
  });
</script>

{% schema %}
{
  "name": "Email Signup",
  "settings": [
    {
      "type": "color_scheme",
      "id": "color_scheme",
      "default": "scheme-1",
      "label": "Color Scheme"
    }
  ],
  "blocks": [
    {
      "name": "Email Input",
      "type": "email_input",
      "limit": 1,
      "settings": [
        {
          "type": "text",
          "id": "email_placeholder",
          "label": "Email Placeholder",
          "default": "EMAIL"
        }
      ]
    },
    {
      "name": "Signup Button",
      "type": "signup_button",
      "limit": 1,
      "settings": [
        {
          "type": "text",
          "id": "button_text",
          "label": "Button Text",
          "default": "SIGN ME UP"
        }
      ]
    }
  ],
  "presets": [
    {
      "name": "Email Signup",
      "blocks": [
        {
          "type": "email_input"
        },
        {
          "type": "signup_button"
        }
      ]
    }
  ]
}
{% endschema %}
