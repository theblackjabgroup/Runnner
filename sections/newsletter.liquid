<div class="color-{{ section.settings.color_scheme }} px-8" style="padding: {{ section.settings.padding }}px 0; margin-bottom: {{ section.settings.margin_bottom }}px;" id="newsletter-section">
  <div class="flex flex-col md:flex-row items-center justify-between gap-6 md:gap-12" id="mainContainer">
    
    <!-- Text content with fixed width to prevent affecting layout -->
  <div class="text-center md:text-left ml-8 md:w-1/2 flex-shrink-0">
  <h2 class="custom-white-text !text-[20px] md:!text-[50px] font-extrabold uppercase tracking-wider block md:block flex md:inline-block justify-start md:justify-normal m-0 break-words leading-tight -ml-[60px] md:ml-0">
    {{ section.settings.heading }}
  </h2>
  <p class="custom-white-text text-[15px] md:text-[35px] mt-1 break-words overflow-wrap-normal max-w-full -ml-[60px] md:ml-0 flex md:block justify-start md:justify-normal whitespace-nowrap md:whitespace-normal">
    {{ section.settings.subheading }}
  </p>
</div>


    <!-- Form Container with fixed width -->
    <div id="formContainer" class="w-full md:w-1/2 md:pr-8">
      <div id="successMessageContainer" class="hidden w-[95%] mx-auto">
        <div class="rounded-lg p-8 text-center">
          <svg class="h-16 w-16 mx-auto text-green-500 mb-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
          </svg>
          <h3 class="text-4xl font-bold text-white mb-4">Thank You!</h3>
          <p class="text-2xl text-gray-300">You've been successfully subscribed to our notifications.</p>
        </div>
      </div>

      {%- form 'customer', id: 'custom-email-signup-form', class: 'flex flex-col gap-6 w-[95%] mx-auto' -%}
        <input type="hidden" name="contact[tags]" value="{{ section.settings.customer_tag }}" />
        
        <div class="form-fields-container relative">
          <input
            type="email"
            id="custom-email-input"
            name="contact[email]"
            placeholder="EMAIL"
            class="w-full px-4 text-[30px] md:text-[50px] text-left text-white bg-black border border-white placeholder-gray-400 focus:outline-none rounded-lg leading-none py-0"
            {% if form.errors contains 'email' %} class="error-state"{% endif %}
            value="{{ form.email }}"
          />
        </div>
        
        <div class="flex justify-end w-full">
          <button
  type="submit"
  id="custom-submitButton"
  class="custom-submit-button w-full text-[30px] md:text-[50px] font-bold px-6 flex items-center justify-between hover:bg-red-700 transition-colors rounded-lg"
>
           <img
                src="{{ "arrow-down.png" |  asset_url }}"
                alt="Dropdown Icon"
                class="w-12 h-10 object-contain -rotate-45"
                width="100%"
                height="auto"
                aria-hidden="true"
             style="transform: rotate(-45deg);"
              >
            <span id="custom-buttonText">{{ section.settings.button_text }}</span>
            <span id="custom-loadingSpinner" class="hidden">
              <svg class="animate-spin h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
              </svg>
            </span>
          </button>
        </div>
      {%- endform -%}
    </div>
  </div>
</div>

<!-- Scroll-triggered popup newsletter -->
<div id="popup-newsletter" class="fixed bottom-0 left-0 right-0 bg-black text-white border-t border-gray-800 z-50" style="transform: translateY(100%); transition: transform 0.5s ease;">
  <div class="container  w-full max-w-[1400px]  mx-auto px-4 py-4">
    <div class="flex flex-col md:flex-row items-center justify-between gap-4">
      <!-- Text content -->
      <div class="md:text-left md:w-1/2 md:-ml-[42%]">
        <h2 class="text-2xl md:text-3xl font-extrabold uppercase tracking-wider">{{ section.settings.heading_text }}</h2>
        <p class="text-lg md:text-xl mt-1">{{ section.settings.subheading_text }}</p>
      </div>
      
      <!-- Form container -->
      <div class="w-full md:w-2/3 ml-auto">
        {%- form 'customer', id: 'popup-email-form', class: 'flex flex-col sm:flex-row gap-4 justify-end md:ml-[850px]' -%}
          <input type="hidden" name="contact[tags]" value="{{ section.settings.customer_tag }}" />
          
          <div class="flex-grow">
            <input
              type="email"
              id="popup-email-input"
              name="contact[email]"
              placeholder="EMAIL"
              class="w-full md:w-[400px] px-4 py-3 text-white bg-black border border-white placeholder-gray-400 focus:outline-none rounded-lg text-left"
              {% if form.errors contains 'email' %} class="error-state"{% endif %}
              value="{{ form.email }}"
            />
          </div>
          
          <div class="md:w-[200px]">
            <button
              type="submit"
              id="popup-submit-button"
             class="w-full md:w-auto bg-red-600 text-white font-bold px-6 py-3 flex items-center justify-center hover:bg-red-700 transition-colors rounded-lg">
              <span class="mr-2">â†’</span>
              <span id="popup-button-text">{{ section.settings.button_text }}</span>
              <span id="popup-loading-spinner" class="hidden ml-2">
               <svg class="animate-spin h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                   <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                  <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                </svg>
              </span>
            </button>
          </div>
        {%- endform -%}
        
        <!-- Close button -->
        <button id="close-popup" class="absolute top-2 right-2 text-white hover:text-gray-300">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
          </svg>
        </button>
      </div>
    </div>
  </div>
</div>

<style>
  /* Red border style for empty submission */
  #custom-email-input.error-state,
  #popup-email-input.error-state {
    border-color: #dc2626 !important;
    border-width: 2px !important;
  }

  .custom-white-text {
 color: var(--text);
}
  
  #custom-email-input:focus,
  #popup-email-input:focus {
    outline: none !important;
    box-shadow: none !important;
  }
  
  /* Make sure text container doesn't grow beyond allocated space */
  @media (min-width: 768px) {
    #mainContainer {
      align-items: flex-start;
    }
  }
  
  /* Popup display when active */
  #popup-newsletter.show-popup {
    transform: translateY(0) !important;
  }

  /* Input and button height responsiveness */
  #custom-email-input, #custom-submitButton {
    height: 50px;
    line-height: 50px;
  }
  
  .custom-submit-button {
  background-color: var(--button);
  color: var(--button_label);
}
  
  @media (min-width: 768px) {
    #custom-email-input, #custom-submitButton {
      height: 70px;
      line-height: 70px;
    }
  }
</style>

<script>
document.addEventListener('DOMContentLoaded', function() {
  // Original form functionality - Using unique IDs to avoid conflicts
  const customEmailSignupForm = document.getElementById('custom-email-signup-form');
  
  if (customEmailSignupForm) {
    const customEmailInput = document.getElementById('custom-email-input');
    const customSubmitButton = document.getElementById('custom-submitButton');
    const customButtonText = document.getElementById('custom-buttonText');
    const customLoadingSpinner = document.getElementById('custom-loadingSpinner');
    
    // Flag to track if submission is in progress
    let isSubmitting = false;
    
    // Check if the input is empty on page load and add the empty class if it is
    if (customEmailInput && !customEmailInput.value.trim()) {
      customEmailInput.classList.add('empty');
    }
    
    // Monitor input changes to add/remove error state class
    if (customEmailInput) {
      customEmailInput.addEventListener('input', function() {
        if (this.value.trim()) {
          // Remove error state when user starts typing
          this.classList.remove('error-state');
          this.classList.remove('empty');
        }
      });
    }
    
    // Show loading state when form is submitted
    if (customEmailSignupForm) {
      customEmailSignupForm.addEventListener('submit', function(e) {
        // Prevent multiple submissions
        if (isSubmitting) {
          e.preventDefault();
          return;
        }
        
        const email = customEmailInput.value.trim();
        
        // Show red border if empty and add error-state class
        if (!email) {
          e.preventDefault();
          customEmailInput.classList.add('empty');
          customEmailInput.classList.add('error-state');
          customEmailInput.focus();
          return;
        }
        
        // Validate email (simple client-side validation)
        if (!/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email)) {
          e.preventDefault();
          customEmailInput.classList.add('error-state');
          customEmailInput.focus();
          return;
        }
        
        // Set submitting state
        isSubmitting = true;
        
        // Show loading state
        customButtonText.textContent = "SUBMITTING...";
        customLoadingSpinner.classList.remove('hidden');
        customSubmitButton.disabled = true;
      });
    }
  }
  
  // Popup Newsletter Functionality
  const popupNewsletter = document.getElementById('popup-newsletter');
  const newsletterSection = document.getElementById('newsletter-section');
  const closePopupBtn = document.getElementById('close-popup');
  const popupEmailForm = document.getElementById('popup-email-form');
  const popupEmailInput = document.getElementById('popup-email-input');
  const popupSubmitButton = document.getElementById('popup-submit-button');
  const popupButtonText = document.getElementById('popup-button-text');
  const popupLoadingSpinner = document.getElementById('popup-loading-spinner');
  
  // Track if user has closed the popup manually in this session
  let userClosedPopup = false;
  // Track if form is being submitted
  let isPopupSubmitting = false;
  
  // Handle scroll to show/hide popup based on newsletter position
  function handleScroll() {
    if (userClosedPopup || !popupNewsletter || !newsletterSection) return;
    
    // Get current scroll position
    const scrollPosition = window.scrollY || document.documentElement.scrollTop;
    
    // Get newsletter position relative to the document
    const newsletterRect = newsletterSection.getBoundingClientRect();
    const newsletterTop = newsletterRect.top + scrollPosition;
    
    // Show popup when above newsletter, hide when at or below
    if (scrollPosition < newsletterTop) {
      popupNewsletter.classList.add('show-popup');
    } else {
      popupNewsletter.classList.remove('show-popup');
    }
  }
  
  // Close button handler
  if (closePopupBtn) {
    closePopupBtn.addEventListener('click', function() {
      if (popupNewsletter) {
        popupNewsletter.classList.remove('show-popup');
        userClosedPopup = true;
      }
    });
  }
  
  // Function to show popup success message
  window.showPopupSuccessMessage = function(popupContainer) {
    // Create success message
    popupContainer.innerHTML = `
      <div class="container mx-auto px-4 py-6">
        <div class="flex justify-center items-center">
          <div class="text-center">
            <svg class="h-12 w-12 mx-auto text-green-500 mb-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
            </svg>
            <h3 class="text-2xl font-bold text-white mb-2">Thank You!</h3>
            <p class="text-lg text-gray-300">You've been successfully subscribed to our notifications.</p>
          </div>
        </div>
      </div>
    `;
    
    // Make sure popup is visible
    popupContainer.classList.add('show-popup');
    
    // Hide popup after 5 seconds
    setTimeout(() => {
      popupContainer.classList.remove('show-popup');
    }, 5000);
  };
  
  // Popup form submission handler
  if (popupEmailForm && popupEmailInput) {
    popupEmailInput.addEventListener('input', function() {
      if (this.value.trim()) {
        this.classList.remove('error-state');
      }
    });
    
    popupEmailForm.addEventListener('submit', function(e) {
      // Prevent multiple submissions
      if (isPopupSubmitting) {
        e.preventDefault();
        return;
      }
      
      const email = popupEmailInput.value.trim();
      
      // Show error if empty
      if (!email) {
        e.preventDefault();
        popupEmailInput.classList.add('error-state');
        popupEmailInput.focus();
        return;
      }
      
      // Validate email format
      if (!/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email)) {
        e.preventDefault();
        popupEmailInput.classList.add('error-state');
        popupEmailInput.focus();
        return;
      }
      
      // Set submitting state
      isPopupSubmitting = true;
      
      // Show loading state
      popupButtonText.textContent = "SUBMITTING...";
      popupLoadingSpinner.classList.remove('hidden');
      popupSubmitButton.disabled = true;
    });
  }
  
  // Add scroll event listener with throttling for performance
  let scrollTimeout;
  window.addEventListener('scroll', function() {
    if (!scrollTimeout) {
      scrollTimeout = setTimeout(function() {
        handleScroll();
        scrollTimeout = null;
      }, 100);
    }
  });
  
  // Check on window resize
  window.addEventListener('resize', handleScroll);
  
  // Initial check on page load
  setTimeout(handleScroll, 500);
});
</script>


{% schema %}
{
  "name": "Email Signup",
  "settings": [
    {
      "type": "text",
      "id": "heading",
      "label": "Heading",
      "default": "Bandit Grand Prix"
    },
    {
      "type": "color_scheme",
      "id": "color_scheme",
      "default": "scheme-1",
      "label": "Color Scheme"
    },
    {
      "type": "text",
      "id": "subheading",
      "label": "Subheading",
      "default": "Registration opens on Thursday, 5/8."
    },
    {
      "type": "text",
      "id": "button_text",
      "label": "Button Text",
      "default": "GET NOTIFIED"
    },
    {
      "type": "text",
      "id": "customer_tag",
      "label": "Customer Tag",
      "default": "newsletter,grand-prix",
      "info": "Tags to add to customer (comma separated)"
    },
    {
      "type": "range",
      "id": "padding",
      "label": "top/botom Padding",
      "min": 0,
      "max": 100,
      "step": 4,
      "unit": "px",
      "default": 32
    },
    {
      "type": "range",
      "id": "margin_bottom",
      "label": "Bottom Margin",
      "min": 0,
      "max": 100,
      "step": 4,
      "unit": "px",
      "default": 0
    },
    {
      "type": "header",
      "content": "Newsletter Pop up"
    },
    {
      "type": "text",
      "id": "heading_text",
      "label": "Heading Text",
      "default": "Bandit Grand Prix"
    },
    {
      "type": "text",
      "id": "subheading_text",
      "label": "Subheading Text",
      "default": "Registration opens on Thursday, 5/8."
    }
  ],
  "presets": [
    {
      "name": "Email Signup",
      "category": "Promotions"
    }
  ]
}
{% endschema %}
