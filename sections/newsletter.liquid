<div class="bg-black text-white px-8" style="padding: {{ section.settings.padding }}px 0; margin-bottom: {{ section.settings.margin_bottom }}px;">
  <div class="flex flex-col md:flex-row items-center justify-between gap-6 md:gap-12" id="mainContainer">
    
    <!-- Text content with fixed width to prevent affecting layout -->
<div class="text-center md:text-left text-white ml-8 md:w-1/2 flex-shrink-0">
  <h2 style="all: unset; font-size: 50px; font-weight: 800; text-transform: uppercase; letter-spacing: 0.05em; color: white; display: block; margin: 0; white-space: normal; word-break: break-word; line-height: 1.1; margin-left: 20px;">
    {{ section.settings.heading }}
  </h2>
  <p style="font-size: 35px; margin-top: 4px; color: white; word-break: break-word; overflow-wrap: break-word; max-width: 100%; margin-left: 20px;">
    {{ section.settings.subheading }}
  </p>
</div>

    <!-- Form Container with fixed width -->
<div id="formContainer" class="w-full md:w-1/2 md:pr-8">
  <form id="email-signup-form" class="flex flex-col gap-6 w-[95%] mx-auto">
    <div class="form-fields-container relative">
      <input
        type="email"
        id="email-input"
        placeholder="EMAIL"
        class="w-full px-4 text-[50px] text-left text-white bg-black border border-white placeholder-gray-400 focus:outline-none rounded-lg leading-none py-0"
        style="height: 80px; line-height: 70px; padding-top: 0; padding-bottom: 0;"
      />
    </div>
    
    <div class="flex justify-end w-full">
      <button
        type="submit"
        id="submitButton"
        class="w-full bg-red-600 text-white text-[50px] font-bold px-6 flex items-center justify-between hover:bg-red-700 transition-colors rounded-lg"
        style="height: 80px; line-height: 70px; padding-top: 0; padding-bottom: 0;"
      >
        <span class="text-[50px]">â†’</span>
        <span id="buttonText">{{ section.settings.button_text }}</span>
        <span id="loadingSpinner" class="hidden">
          <svg class="animate-spin h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
            <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
            <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
          </svg>
        </span>
      </button>
    </div>
  </form>
</div>
  </div>

</div>

<style>
  /* Red border style for empty submission */
  #email-input.error-state {
    border-color: #dc2626 !important;
    border-width: 2px !important;
  }
  /* Remove default focus styling */
  #email-input:focus {
    outline: none !important;
    box-shadow: none !important;
  }
  
  /* Make sure text container doesn't grow beyond allocated space */
  @media (min-width: 768px) {
    #mainContainer {
      align-items: flex-start;
    }
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const emailSignupForm = document.getElementById('email-signup-form');
    
    if (emailSignupForm) {
      const emailInput = document.getElementById('email-input');
      const submitButton = document.getElementById('submitButton');
      const buttonText = document.getElementById('buttonText');
      const loadingSpinner = document.getElementById('loadingSpinner');
      const formContainer = document.getElementById('formContainer');
      const mainContainer = document.getElementById('mainContainer');
      
      // Flag to track if submission is in progress
      let isSubmitting = false;
      
      // Check if the input is empty on page load and add the empty class if it is
      if (!emailInput.value.trim()) {
        emailInput.classList.add('empty');
      }
      
      // Monitor input changes to add/remove error state class
      emailInput.addEventListener('input', function() {
        if (this.value.trim()) {
          // Remove error state when user starts typing
          this.classList.remove('error-state');
          this.classList.remove('empty');
        }
      });
      
      function validateEmail(email) {
        const re = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        return re.test(email);
      }
      
      function showSuccessMessage() {
        // For success message, create a nice success display
        // Remove form and create success message
        if (formContainer) {
          formContainer.style.display = 'none';
        }
        
        // Create success message container
        const successMessageElement = document.createElement('div');
        successMessageElement.className = 'w-full';
        
        // Create inner container
        const innerContainer = document.createElement('div');
        innerContainer.className = 'rounded-lg p-8 text-center';
        
        // Create checkmark icon
        const svgElement = document.createElementNS('http://www.w3.org/2000/svg', 'svg');
        svgElement.setAttribute('class', 'h-16 w-16 mx-auto text-green-500 mb-4');
        svgElement.setAttribute('fill', 'none');
        svgElement.setAttribute('viewBox', '0 0 24 24');
        svgElement.setAttribute('stroke', 'currentColor');
        
        const pathElement = document.createElementNS('http://www.w3.org/2000/svg', 'path');
        pathElement.setAttribute('stroke-linecap', 'round');
        pathElement.setAttribute('stroke-linejoin', 'round');
        pathElement.setAttribute('stroke-width', '2');
        pathElement.setAttribute('d', 'M5 13l4 4L19 7');
        
        svgElement.appendChild(pathElement);
        
        // Create thank you heading
        const heading = document.createElement('h3');
        heading.className = 'text-4xl font-bold text-white mb-4';
        heading.textContent = 'Thank You!';
        
        // Create success message text
        const paragraph = document.createElement('p');
        paragraph.className = 'text-2xl text-gray-300';
        paragraph.textContent = 'You\'ve been successfully subscribed to our notifications.';
        
        // Append all elements
        innerContainer.appendChild(svgElement);
        innerContainer.appendChild(heading);
        innerContainer.appendChild(paragraph);
        successMessageElement.appendChild(innerContainer);
        
        // Add to main container
        mainContainer.appendChild(successMessageElement);
      }
      
      // Function to simulate API call (replace with actual API call)
      function submitEmail(email) {
        return new Promise((resolve) => {
          // Simulate API delay (2 seconds)
          setTimeout(() => {
            resolve({ success: true });
          }, 2000);
        });
      }
      
      // Form submission handler
      emailSignupForm.addEventListener('submit', async function(e) {
        e.preventDefault();
        
        // Prevent multiple submissions
        if (isSubmitting) return;
        
        const email = emailInput.value.trim();
        
        // Show red border if empty and add error-state class
        if (!email) {
          emailInput.classList.add('empty');
          emailInput.classList.add('error-state');
          emailInput.focus();
          return;
        }
        
        if (!validateEmail(email)) {
          emailInput.classList.add('error-state');
          emailInput.focus();
          return;
        }
        
        // Set submitting state
        isSubmitting = true;
        
        // Show loading state
        buttonText.textContent = "SUBMITTING...";
        loadingSpinner.classList.remove('hidden');
        submitButton.disabled = true;
        
        try {
          // Process form submission within the current page
          const result = await submitEmail(email);
          
          if (result.success) {
            // Show success message
            showSuccessMessage();
          } else {
            // Reset submitting state for errors
            isSubmitting = false;
            buttonText.textContent = "GET NOTIFIED";
            loadingSpinner.classList.add('hidden');
            submitButton.disabled = false;
            
            // Add error state
            emailInput.classList.add('error-state');
          }
        } catch (error) {
          // Reset submitting state
          isSubmitting = false;
          buttonText.textContent = "GET NOTIFIED";
          loadingSpinner.classList.add('hidden');
          submitButton.disabled = false;
          
          // Add error state
          emailInput.classList.add('error-state');
        }
      });
    }
  });
</script>

{% schema %}
{
  "name": "Email Signup",
  "settings": [
    {
      "type": "text",
      "id": "heading",
      "label": "Heading",
      "default": "Bandit Grand Prix"
    },
    {
      "type": "text",
      "id": "subheading",
      "label": "Subheading",
      "default": "Registration opens on Thursday, 5/8."
    },
    {
      "type": "text",
      "id": "button_text",
      "label": "Button Text",
      "default": "GET NOTIFIED"
    },
    {
      "type": "range",
      "id": "padding",
      "label": "top/botom Padding",
      "min": 0,
      "max": 100,
      "step": 4,
      "unit": "px",
      "default": 32
    },
    {
      "type": "range",
      "id": "margin_bottom",
      "label": "Bottom Margin",
      "min": 0,
      "max": 100,
      "step": 4,
      "unit": "px",
      "default": 0
    }
  ],
  "presets": [
    {
      "name": "Email Signup",
      "category": "Promotions"
    }
  ]
}
{% endschema %}
