{{ 'newsletter.css' | asset_url | stylesheet_tag }}
{{ 'email-signup-banner.css' | asset_url | stylesheet_tag }}

<div class="color-{{ section.settings.color_scheme }} px-8" style="padding: {{ section.settings.padding }}px 0; margin-bottom: {{ section.settings.margin_bottom }}px;" id="newsletter-section">
  <div class="flex flex-col md:flex-row items-center justify-between gap-6 md:gap-12" id="mainContainer">
    <!-- Text content with fixed width to prevent affecting layout -->
  <div class="bb-newsletter-box md:text-left ml-8 md:w-1/2 flex-shrink-0">
  <h2 class="bb-newsletter-heading custom-white-text !text-[20px] md:!text-[50px] font-extrabold uppercase tracking-wider block md:block flex md:inline-block justify-start md:justify-normal m-0 break-words leading-tight md:ml-0">
    {{ section.settings.heading }}
  </h2>
  <p class="bb-newsletter-subheading custom-white-text text-[15px] md:text-[35px] mt-1 break-words overflow-wrap-normal max-w-full md:ml-0 flex md:block justify-start md:justify-normal whitespace-nowrap md:whitespace-normal">
    {{ section.settings.subheading }}
  </p>
</div>

    <!-- Form Container with fixed width -->
    <div id="formContainer" class="w-full md:w-1/2 md:pr-8">
      <div id="successMessageContainer" class="hidden w-[95%] mx-auto">
        <div class="rounded-lg p-8 text-center">
          <svg class="h-16 w-16 mx-auto text-green-500 mb-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
          </svg>
          <h3 class="text-4xl font-bold text-white mb-4">Thank You!</h3>
          <p class="text-2xl text-gray-300">You've been successfully subscribed to our notifications.</p>
        </div>
      </div>

      {%- form 'customer', class: 'bb-newsletter-form flex flex-col gap-6 w-[95%] mx-auto' -%}
        <input type="hidden" name="contact[tags]" value="{{ section.settings.customer_tag }}" />
        <input type="hidden" name="contact[accepts_marketing]" value="true" />
      
        <div class="form-fields-container relative"> 
          <input
            type="email"
            id="custom-email-input"
            name="contact[email]"
            placeholder="EMAIL"
            class="bb-custom-newsletter-input w-full px-4 text-[30px] md:text-[50px] text-left bg-white border border-white placeholder-gray-400 focus:outline-none rounded-lg leading-none py-0"
            {% if form.errors contains 'email' %} class="error-state"{% endif %}
            value="{{ form.email }}"
            required
          >
        </div>

        <div class="flex justify-end w-full">
          <button
          type="submit"
          id="custom-submitButton"
          class="
            pass-newsletter w-full px-6 py-4 font-light flex items-center justify-between cursor-pointer h-16 ml-2 text-4xl leading-[50px] pt-2 md:h-16 md:mb-0 md:pt-0 md:pb-0
            transition-colors button-with-arrow focus:outline-none focus:ring-1
          "
          style="font-size: var(--t-b-1-size); font-weight: var(--t-b-1-weight); line-height: var(--t-b-1-line-height); font-style: var(--font-body-style);
                font-family: var(--font-body-family);"
          aria-label="Subscribe to our email list"
        >
        <span id="buttonText-password">Subscribe</span>
        {% render 'icon-playback', width: '16px', height: '16px',viewBox: '4.5 1.5 8.5 13'%}
          <span id="popup-loading-spinner" class="hidden">
            <svg class="animate-spin h-5 w-5" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
              <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
              <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
            </svg>
          </span>
        </button>
        </div>
      {%- endform -%}
    </div>
  </div>
</div>

<!-- Scroll-triggered popup newsletter -->
<div
  id="popup-newsletter"
  class="bb-popup-newsletter fixed bottom-0 left-0 right-0 border-t border-gray-800 z-50 color-{{ section.settings.color_scheme }}"
  style="transform: translateY(100%); transition: transform 0.5s ease;"
>
  <div class="bb-container  w-full max-w-[1400px]  mx-auto px-4 py-4">
    <div class="bb-popup-container flex flex-col md:flex-row items-center justify-between gap-4">
      <!-- Text content -->
      <div class="md:text-left md:w-1/2 md:-ml-[42%]">
        <h2 class="bb-heading-text text-base md:text-[33px] font-extrabold uppercase tracking-wider custom-white-text">
          {{ section.settings.heading_text }}
        </h2>

        <p class="bb-popup-para text-lg md:text-xl mt-1 custom-white-text">{{ section.settings.subheading_text }}</p>
      </div>

      <!-- Form container -->
      <div class="w-full md:w-2/3 ml-auto">
        {%- form 'customer',
          id: 'popup-email-form',
          class: 'flex flex-col sm:flex-row gap-4 justify-end md:ml-[850px]'
        -%}
          <input type="hidden" name="contact[tags]" value="{{ section.settings.customer_tag }}">
          <input type="hidden" name="contact[accepts_marketing]" value="true">

          <div>
            <input
              type="email"
              id="popup-email-input"
              name="contact[email]"
              placeholder="EMAIL"
              class="popup-email-input px-4 py-3  bg-white border border-black placeholder-gray-400 focus:outline-none rounded-lg text-left {% if form.errors contains 'email' %} error-state{% endif %}"
              value="{{ form.email }}"
            >
          </div>

          <div class="md:w-[200px]">
            <button
            type="submit"
            id="popup-submit-button"
            class="
            popup-submit-button pass-newsletter w-full px-6 py-4 font-light flex items-center justify-between cursor-pointer h-16 ml-2 text-4xl leading-[50px] pt-2 md:h-16 md:mb-0 md:pt-0 md:pb-0
              transition-colors button-with-arrow focus:outline-none focus:ring-1
            "
            style="font-size: var(--t-b-1-size); font-weight: var(--t-b-1-weight); line-height: var(--t-b-1-line-height); font-style: var(--font-body-style);
                  font-family: var(--font-body-family);"
            aria-label="Subscribe to our email list"
          >
          <span id="popup-button-text">{{ section.settings.button_text }}</span>
          {% render 'icon-playback', width: '16px', height: '16px',viewBox: '4.5 1.5 8.5 13'%}
            <span id="popup-loading-spinner" class="hidden">
              <svg class="animate-spin h-5 w-5" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
              </svg>
            </span>
          </button>
          </div>
        {%- endform -%}

        <!-- Close button -->
        <button id="close-popup" class="absolute top-2 right-2 hover:text-gray-300">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
          </svg>
        </button>
      </div>
    </div>
  </div>
</div>

<style>
  /* Red border style for empty submission */
  #custom-email-input.error-state,
  #popup-email-input.error-state {
    border-color: #dc2626 !important;
    border-width: 2px !important;
  }

  .custom-white-text {
    color: var(--text);
  }

  /* Updated arrow rotation behavior to work when hovering the button */
  .rotate-arrow {
    transition: transform 0.3s ease;
    transform: rotate(-10deg); /* Default: Downward */
    transform-origin: center;
  }

  /* Move the hover effect to the parent button instead of the arrow */
  .button-with-arrow:hover .rotate-arrow {
    transform: rotate(-90deg); /* On hover: Upward */
  }

  #custom-email-input:focus,
  #popup-email-input:focus {
    outline: none !important;
    box-shadow: none !important;
  }

  /* Make sure text container doesn't grow beyond allocated space */
  @media (min-width: 768px) {
    #mainContainer {
      align-items: flex-start;
    }
  }

  /* Popup display when active */
  #popup-newsletter.show-popup {
    transform: translateY(0) !important;
  }

  .custom-submit-button {
    background-color: var(--button);
    color: var(--button_label);
  }
  .popup-submit-button {
    width: 324px;
    margin-left: 0;
  }
  .popup-email-input {
    width: 324px;
    height: 48px;
    margin-left: 0;
    color: var(--button_label);
  }
  .heading-text {
    font-weight: 500;
  }

  @media screen and (max-width: 480px) {
    .popup-email-input {
      width: 340px;
    }

    .popup-submit-button {
      width: 340px;
    }
    .heading-text {
      font-size: 30px;
      font-weight: 450;
    }
  }
  .custom-btn-bg {
    background-color: var(--button);
  }

  .custom-btn-bg-hover:hover {
    background-color: #b91c1c; /* Tailwind red-700 */
  }

  .custom-btn-text {
    color: var(--button_label);
  }
</style>

<script>
  /*
  if (customEmailSignupForm) {
    const customEmailInput = document.getElementById('custom-email-input');
    const customSubmitButton = document.getElementById('custom-submitButton');
    const customButtonText = document.getElementById('buttonText-password');
    const customLoadingSpinner = document.getElementById('popup-loading-spinner');
    
    // Flag to track if submission is in progress
    let isSubmitting = false;
    
    // Error message element creation function
    const createErrorMessage = (message) => {
      // Remove any existing error messages first
      const existingError = customEmailInput.parentNode.querySelector('.error-message');
      if (existingError) existingError.remove();
      
      const errorElement = document.createElement('div');
      errorElement.className = 'error-message text-red-500 text-lg font-bold mt-2 absolute -bottom-8 left-0';
      errorElement.textContent = message;
      customEmailInput.parentNode.appendChild(errorElement);
      
      // Auto remove after 5 seconds
      setTimeout(() => {
        if (errorElement.parentNode) {
          errorElement.remove();
        }
      }, 5000);
    };
    
    // Check if the input is empty on page load and add the empty class if it is
    if (customEmailInput && !customEmailInput.value.trim()) {
      customEmailInput.classList.add('empty');
    }
    
    // Monitor input changes to add/remove error state class
    if (customEmailInput) {
      customEmailInput.addEventListener('input', function() {
        if (this.value.trim()) {
          // Remove error state when user starts typing
          this.classList.remove('error-state');
          this.classList.remove('empty');
          
          // Remove any error messages
          const existingError = this.parentNode.querySelector('.error-message');
          if (existingError) existingError.remove();
        }
      });
    }
    
    // Handle form submission
    if (customEmailSignupForm) {
      // Override the form submit button click
      customSubmitButton.addEventListener('click', function(e) {
        e.preventDefault(); // Prevent button default action
        
        // Prevent multiple submissions
        if (isSubmitting) {
          return;
        }
        
        const email = customEmailInput.value.trim();
        
        // Show red border if empty and add error-state class
        if (!email) {
          customEmailInput.classList.add('empty');
          customEmailInput.classList.add('error-state');
          customEmailInput.focus();
          return;
        }
        
        // If validation passes, we can continue with form submission
        isSubmitting = true;
        
        // Show loading state
        customButtonText.textContent = "SUBMITTING...";
        customLoadingSpinner.classList.remove('hidden');
        customSubmitButton.disabled = true;
        
        // Show success message immediately
        customEmailSignupForm.classList.add('hidden');
        if (successMessageContainer) {
          successMessageContainer.classList.remove('hidden');
        }
        
        // Submit the form via AJAX to prevent page refresh
        fetch(customEmailSignupForm.action, {
          method: 'POST',
          body: new FormData(customEmailSignupForm),
          headers: {
            'Accept': 'application/json'
          }
        }).then(response => {
          // Form submitted successfully
        }).catch(error => {
        });
        
        // Reset form state after a delay (but keep success message visible)
        setTimeout(() => {
          isSubmitting = false;
          customButtonText.textContent = customSubmitButton.getAttribute('data-original-text') || "GET NOTIFIED";
          customLoadingSpinner.classList.add('hidden');
          customSubmitButton.disabled = false;
        }, 1000);
      });
      
      // Also handle the native form submission as a fallback
      customEmailSignupForm.addEventListener('submit', function(e) {
        e.preventDefault(); // Always prevent traditional form submission
        
        // Trigger the button click handler if not already submitting
        if (!isSubmitting) {
          customSubmitButton.click();
        }
      });
    }
    
    // Store original button text for later reset
    if (customButtonText) {
      customSubmitButton.setAttribute('data-original-text', customButtonText.textContent);
    }
  }
  */
  document.addEventListener('DOMContentLoaded', function () {
    // Original form functionality - Using unique IDs to avoid conflicts
    //const customEmailSignupForm = document.getElementById('custom-email-signup-form');
    const formContainer = document.getElementById('formContainer');
    const successMessageContainer = document.getElementById('successMessageContainer');

    // Popup Newsletter Functionality
    const popupNewsletter = document.getElementById('popup-newsletter');
    const newsletterSection = document.getElementById('newsletter-section');
    const closePopupBtn = document.getElementById('close-popup');
    const popupEmailForm = document.getElementById('popup-email-form');
    const popupEmailInput = document.getElementById('popup-email-input');
    const popupSubmitButton = document.getElementById('popup-submit-button');
    const popupButtonText = document.getElementById('popup-button-text');
    const popupLoadingSpinner = document.getElementById('popup-loading-spinner');

    // Track if user has closed the popup manually in this session
    let userClosedPopup = false;
    // Track if form is being submitted
    let isPopupSubmitting = false;

    // Create popup error message function
    const createPopupErrorMessage = (message) => {
      // Remove any existing error messages first
      const existingError = popupEmailInput.parentNode.querySelector('.popup-error-message');
      if (existingError) existingError.remove();

      const errorElement = document.createElement('div');
      errorElement.className = 'popup-error-message text-red-500 text-lg font-bold mt-2';
      errorElement.textContent = message;
      popupEmailInput.parentNode.appendChild(errorElement);

      // Auto remove after 5 seconds
      setTimeout(() => {
        if (errorElement.parentNode) {
          errorElement.remove();
        }
      }, 5000);
    };

    // Handle scroll to show/hide popup based on newsletter position
    function handleScroll() {
      if (userClosedPopup || !popupNewsletter || !newsletterSection) return;

      // Get current scroll position
      const scrollPosition = window.scrollY || document.documentElement.scrollTop;

      // Get newsletter position relative to the document
      const newsletterRect = newsletterSection.getBoundingClientRect();
      const newsletterTop = newsletterRect.top + scrollPosition;

      // Show popup when above newsletter, hide when at or below
      if (scrollPosition < newsletterTop) {
        popupNewsletter.classList.add('show-popup');
      } else {
        popupNewsletter.classList.remove('show-popup');
      }
    }

    // Close button handler
    if (closePopupBtn) {
      closePopupBtn.addEventListener('click', function () {
        if (popupNewsletter) {
          popupNewsletter.classList.remove('show-popup');
          userClosedPopup = true;
        }
      });
    }

    // Function to show popup success message
    window.showPopupSuccessMessage = function (popupContainer) {
      // Store original content to restore later if needed
      if (!popupContainer.hasAttribute('data-original-content')) {
        popupContainer.setAttribute('data-original-content', popupContainer.innerHTML);
      }

      // Create success message
      popupContainer.innerHTML = `
      <div class="container mx-auto px-4 py-6">
        <div class="flex justify-center items-center">
          <div class="text-center">
            <svg class="h-12 w-12 mx-auto text-green-500 mb-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
            </svg>
            <h3 class="text-2xl font-bold text-white mb-2">Thank You!</h3>
            <p class="text-lg text-gray-300">You've been successfully subscribed to our notifications.</p>
          </div>
        </div>
      </div>
    `;

      // Add close button to success message
      const closeBtn = document.createElement('button');
      closeBtn.innerHTML = `
      <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
      </svg>
    `;
      closeBtn.className = 'absolute top-2 right-2 text-white hover:text-gray-300';
      closeBtn.addEventListener('click', function () {
        popupContainer.classList.remove('show-popup');
        userClosedPopup = true;
      });

      popupContainer.querySelector('.container').appendChild(closeBtn);

      // Make sure popup is visible
      popupContainer.classList.add('show-popup');

      // DO NOT hide popup automatically - let it stay visible until manual refresh
    };

    // Popup form submission handler
    if (popupEmailForm && popupEmailInput) {
      popupEmailInput.addEventListener('input', function () {
        if (this.value.trim()) {
          this.classList.remove('error-state');

          // Remove any error messages
          const existingError = this.parentNode.querySelector('.popup-error-message');
          if (existingError) existingError.remove();
        }
      });

      // Handle popup submit button click
      popupSubmitButton.addEventListener('click', function (e) {
        e.preventDefault(); // Prevent button default action

        // Prevent multiple submissions
        if (isPopupSubmitting) {
          return;
        }

        const email = popupEmailInput.value.trim();

        // Show error if empty
        if (!email) {
          popupEmailInput.classList.add('error-state');
          popupEmailInput.focus();
          createPopupErrorMessage('Please enter your email address');
          return;
        }

        // Validate email format
        if (!/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email)) {
          popupEmailInput.classList.add('error-state');
          popupEmailInput.focus();
          createPopupErrorMessage('Please enter a valid email address');
          return;
        }

        // Set submitting state
        isPopupSubmitting = true;

        // Show loading state
        popupButtonText.textContent = 'SUBMITTING...';
        popupLoadingSpinner.classList.remove('hidden');
        popupSubmitButton.disabled = true;

        // Show success message immediately
        window.showPopupSuccessMessage(popupNewsletter);

        // Submit the form via AJAX to prevent page refresh
        fetch(popupEmailForm.action, {
          method: 'POST',
          body: new FormData(popupEmailForm),
          headers: {
            Accept: 'application/json',
          },
        })
          .then((response) => {
            // Form submitted successfully
          })
          .catch((error) => {});

        // Reset form state after a delay (but keep success message visible)
        setTimeout(() => {
          isPopupSubmitting = false;
          popupButtonText.textContent = popupSubmitButton.getAttribute('data-original-text') || 'SUBSCRIBE';
          popupLoadingSpinner.classList.add('hidden');
          popupSubmitButton.disabled = false;
        }, 1000);
      });

      // Also handle the native form submission as a fallback
      popupEmailForm.addEventListener('submit', function (e) {
        e.preventDefault(); // Always prevent traditional form submission

        // Trigger the button click handler if not already submitting
        if (!isPopupSubmitting) {
          popupSubmitButton.click();
        }
      });

      // Store original button text for later reset
      if (popupButtonText) {
        popupSubmitButton.setAttribute('data-original-text', popupButtonText.textContent);
      }
    }

    // Add scroll event listener with throttling for performance
    let scrollTimeout;
    window.addEventListener('scroll', function () {
      if (!scrollTimeout) {
        scrollTimeout = setTimeout(function () {
          handleScroll();
          scrollTimeout = null;
        }, 100);
      }
    });

    // Check on window resize
    window.addEventListener('resize', handleScroll);

    // Initial check on page load
    setTimeout(handleScroll, 500);
  });
</script>

{% schema %}
{
  "name": "Newsletter",
  "disabled_on": {
    "groups": ["header", "footer"]
  },
  "settings": [
    {
      "type": "text",
      "id": "heading",
      "label": "Heading",
      "default": "Aurelia Newsletter"
    },
    {
      "type": "color_scheme",
      "id": "color_scheme",
      "default": "scheme-1",
      "label": "Color Scheme"
    },
    {
      "type": "text",
      "id": "subheading",
      "label": "Subheading",
      "default": "Subscribe for offers and all"
    },
    {
      "type": "text",
      "id": "button_text",
      "label": "Button Text",
      "default": "GET NOTIFIED"
    },
    {
      "type": "text",
      "id": "customer_tag",
      "label": "Customer Tag",
      "default": "newsletter,grand-prix",
      "info": "Tags to add to customer (comma separated)"
    },
    {
      "type": "range",
      "id": "padding",
      "label": "top/botom Padding",
      "min": 0,
      "max": 100,
      "step": 4,
      "unit": "px",
      "default": 32
    },
    {
      "type": "range",
      "id": "margin_bottom",
      "label": "Bottom Margin",
      "min": 0,
      "max": 100,
      "step": 4,
      "unit": "px",
      "default": 0
    },
    {
      "type": "header",
      "content": "Newsletter Pop up"
    },
    {
      "type": "text",
      "id": "heading_text",
      "label": "Heading Text",
      "default": "Aurelia Newsletter"
    },
    {
      "type": "text",
      "id": "subheading_text",
      "label": "Subheading Text",
      "default": "Subscribe for offers and all"
    }
  ],
  "presets": [
    {
      "name": "Newsletter"
    }
  ]
}
{% endschema %}
