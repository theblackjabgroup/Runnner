{%- style -%}
    /* Mute/Unmute Button Styles */
    .video-mute-button {
      position: absolute;
      z-index: 20;
      background-color: rgba(0, 0, 0, 0.5);
      color: white;
      border: none;
      border-radius: 50%;
      width: 40px;
      height: 40px;
      display: flex;
      align-items: center;
      justify-content: center;
      cursor: pointer;
      transition: background-color 0.3s, opacity 0.3s;
      top: 20px;
      right: 20px;
      opacity: 0.7;
    }
    .video-mute-button:hover {
      background-color: rgba(0,0,0,0.8);
      opacity: 1;
      cursor: pointer;
    }
    @media (max-width: 749px) {
      .video-mute-button {
        top: 20px;
        bottom: auto;
        right: 20px;
        width: 35px;
        height: 35px;
      }
    }
    .video-mute-button svg {
      width: 20px;
      height: 20px;
    }
    @media (max-width: 749px) {
      .video-mute-button svg {
        width: 16px;
        height: 16px;
      }
    }

    @media screen and (max-width: 750px){
      .image-with-text-button-text, .image-with-text-button-text-hover{
        font-size: 16px !important;
      }
      .image-with-text-heading{
        font-size: var(--tm-h-2-size) !important;
        line-height: var(--tm-h-2-line-height) !important;
      }
      .image-with-text-text-content{
        font-size: 20px !important;
        line-height: 2rem !important;
      }
    }
    @media screen and (min-width: 750px) {
      .image-with-text-section-{{ section.id }}-padding {
        padding-top: {{ section.settings.padding_top }}px;
        padding-bottom: {{ section.settings.padding_bottom }}px;
      }
    }
    @keyframes letterAppear {
      0% {
        transform: translateX(10000%);
        opacity: 0;
      }
      100% {
        transform: translateX(0);
        opacity: 1;
      }
    }

    /* Animation styling for word-level control */
    .image-with-text-image-with-text-letter-animation-container {
      display: inline-block;
      width: 100%;
      /* max-width: 550px; */
      overflow: visible;
      position: relative;
    }

    /* Style for each word container */
    .animated-word {
      display: inline-block;
      white-space: nowrap; /* Ensure words don't break */
      margin-right: 0.2em; /* Optional: slight spacing between words */
    }

    /* Style for individual letters */
    .animated-letter {
      display: inline-block;
      opacity: 0;
      transform: translateX(500%);
      position: relative;
    }

    /* Style for spaces between words */
    .animated-space {
      display: inline-block;
      opacity: 0;
      transform: translateX(500%);
      position: relative;
      /* Adjust this if needed for proper spacing */
    }

    /* Ensure headings don't break words at boundaries */
    .image-with-text-heading {
      word-break: keep-all; /* Prevent breaking words */
      overflow-wrap: break-word;
      line-height: 1.2; /* Allow wrapping between words */
    }

    .image-with-text-text-content{
    font-size: 24px;
  }

    .animated-letter {
      display: inline-block;
      opacity: 0;
      transform: translateX(500%);
      position: relative;
    }

    /* Animation ready states for all blocks */
    .image-with-text-image-with-text-letter-animation {
      opacity: 0;
    }

    .image-with-text-image-with-text-letter-animation.animation-ready {
      opacity: 1;
    }

    .button-animation {
      opacity: 0;
    }

    .button-animation.animation-ready {
      opacity: 1;
    }

    .date-animation {
      opacity: 0;
    }

    .date-animation.animation-ready {
      opacity: 1;
    }

    .text-animation {
      opacity: 0;
    }

    .text-animation.animation-ready {
      opacity: 1;
    }

    /* Non-animated states */
    .no-animation .image-with-text-image-with-text-letter-animation,
    .no-animation .button-animation,
    .no-animation .date-animation,
    .no-animation .text-animation {
      opacity: 1 !important;
    }

  .image-with-text-custom-button-css {
    position: relative;
    display: inline-block;
    padding: 0px var(--space-xs);
    border: {{ settings.buttons_border_thickness }}px solid var(--button_label);
    color: var(--button_label);
    background-color: var(--button);
    border-radius: {{ settings.buttons_radius }}px;
    overflow: hidden;
    transition: background-color var(--duration-medium), color var(--duration-medium);
  }

  .image-with-text-custom-button-css:hover,
  .image-with-text-custom-button-css:focus {
    background-color: var(--hovered_button_label);
    color: var(--hovered_button_text_color);
    border-color: var(--hovered_button_text_color);
    outline: none;
    text-decoration: none;
  }

  .image-with-text-button-text-container {
    position: relative;
    width: 100%;
    overflow: hidden;
  }

  .image-with-text-button-text {
    display: flex;
    align-items: center;
    line-height: 1;
    text-transform: uppercase;
    letter-spacing: 0.05em;
    transition: transform 0.7s ease;
  }

  .image-with-text-custom-button-css:hover .image-with-text-button-text,
  .image-with-text-custom-button-css:focus .image-with-text-button-text {
    transform: translateX(-100%);
  }

  .image-with-text-button-text-hover {
    position: absolute;
    top: 0;
    left: 0;
    display: flex;
    align-items: center;
    font-size: 24px;
    line-height: 1;
    text-transform: uppercase;
    letter-spacing: 0.05em;
    transform: translateX(100%);
    transition: transform 0.7s ease;
  }

  .image-with-text-custom-button-css:hover .image-with-text-button-text-hover,
  .image-with-text-custom-button-css:focus .image-with-text-button-text-hover {
    transform: translateX(0);
  }

  .image-with-text-custom-button-css:not(:hover):not(:focus) .image-with-text-button-text,
  .image-with-text-custom-button-css:not(:hover):not(:focus) .image-with-text-button-text-hover {
    transition: none;
  }

  .image-with-text-button-arrow {
    margin-left: 20px;
  }
    /* For videos: use 16:9 aspect ratio with padding compensation */
    .image-with-text-media-section-{{ section.id }}[data-video="true"] {
      width: 100vw;
      min-height: 450px;
      height: calc(100vw * 9 / 16 + {{ settings.sections_spacing | times: 2 }}px - 12px);
    }

    /* For images: use the old section height settings */
    .image-with-text-media-section-{{ section.id }}[data-video="false"] {
      width: 100vw;
      height: {{ section.settings.img_height_mobile }}px;
    }

    @media (min-width: 750px) {
      .image-with-text-media-section-{{ section.id }}[data-video="false"] {
        height: {{ section.settings.img_height }}px;
      }
    }

    .image-with-text-heading-size-very-small {
      font-size: 24px;
      line-height: 0.9;
    }

    .image-with-text-heading-size-small {
      font-size: 36px;
      line-height: 0.9;
    }

    .image-with-text-heading-size-medium {
      font-size: 50px;
      line-height: 0.9;
    }

    .image-with-text-heading-size-large {
      font-size: 72px;
      line-height: 0.9;
    }

    /* @media (min-width: 750px) {
      .image-with-text-heading-size-very-small {
        font-size: 30px;
        line-height: 3rem;
      }

      .image-with-text-heading-size-small {
        font-size: 50px;
        line-height: 5rem;
      }

      .image-with-text-heading-size-medium {
        font-size: 60px;
        line-height: 6rem;
      }

      .image-with-text-heading-size-large {
        font-size: 70px;
        line-height: 7rem;
      }
    } */

    .image-with-text-text-content-wrapper-{{ section.id }} {
      position: absolute;
      left: 0;
      width: 100%;
      height: calc(100% - calc({{ settings.sections_spacing }}px * 2));
      margin-top: {{ settings.sections_spacing }}px;
      min-height: 0;
      display: flex;
      pointer-events: none;
      justify-content: {{ section.settings.horizontal_position }};
      /* Use a Liquid case statement for vertical alignment */
      {% case section.settings.vertical_content_position %}
        {% when 'top' %}align-items: flex-start;
        {% when 'center' %}align-items: center;
        {% when 'bottom' %}align-items: flex-end;
        {% when 'space-between' %}align-items: space-between;
        {% else %}align-items: center;
      {% endcase %}
      z-index: 3;
    }

    .image-with-text-text-content-container-{{ section.id }} {
      width: 100%;
      max-width: {{ section.settings.content_width }}px;
      padding: {{ section.settings.content_padding }}px {{ section.settings.content_padding | plus: settings.side_space }}px;
      display: flex;
      flex-direction: column;
      height: auto;
      min-height: 0;
      pointer-events: auto;
    }

    .content-wrapper-flex {
      display: flex;
      flex-direction: column;
      width: 100%;
      height: auto;
      min-height: 0;
      /* Vertical alignment logic */
      justify-content:
        {% case section.settings.vertical_content_position %}
          {% when 'top' %}flex-start;
          {% when 'center' %}center;
          {% when 'bottom' %}flex-end;
          {% when 'space-between' %}space-between;
          {% else %}center;
        {% endcase %}
    }

    /* .image-with-text-iframe{
      position: relative;
      width: 100%;
      height: 100%;
      overflow: hidden;
    }

    .image-with-text-iframe iframe {
      display: block;
      width: 100%;
      height: 100%;
    }

    .image-with-text-iframe .image-with-text-iframe-overlay {
      position: absolute;
      inset: 0;
      background: black;
      opacity: 1;
      z-index: 999;
      animation-name: fadeOverlay;
      animation-duration: 1s;
      animation-delay: 1s;
      animation-timing-function: ease-out;
      animation-fill-mode: forwards;
    }

    @keyframes fade-overlay {
      from { opacity: 1; }
      to   { opacity: 0; }
    } */

    .image-with-text-button-container{
      background-color: transparent;
    }

    @media (max-width: 749px) {
      .image-with-text-text-content-container-{{ section.id }} {
        max-width: {{ section.settings.content_width_mobile }}px;
        padding: {{ section.settings.content_padding_mobile | plus: 10 }}px;
      }

      .image-with-text-button-arrow {
        margin-left: 0px;
      }
    }

    .image-with-text-button-container {
      margin-top: 20px;
      margin-bottom: 20px;
    }

    @media (max-width: 749px) {
      .image-with-text-button-container {
        margin-top: 10px;
        margin-bottom: 10px;
      }
    }

    @media (prefers-reduced-motion: reduce) {
      .animated-letter {
        animation: none !important;
        opacity: 1 !important;
        transform: none !important;
      }

      .button-animation {
        animation: none !important;
        opacity: 1 !important;
        transform: none !important;
      }

      .image-with-text-button-text,
      .image-with-text-button-text-hover {
        transition: none !important;
      }
    }

    /* New styles for dual headings */
    .dual-heading-container {
      width: 100%;
    }

    .dual-heading-top {
      margin-bottom: 20px;
    }

    .dual-heading-bottom {
      margin-top: 20px;
    }

    .content-wrapper-flex {
      display: flex;
      flex-direction: column;
      height: 100%;
      width: 100%;
    }

    .content-flex-top {
      justify-content: flex-start;
    }

    .content-flex-bottom {
      justify-content: flex-end;
    }

    .content-flex-center {
      justify-content: center;
    }

    .content-flex-space-between {
      justify-content: space-between;
    }

    .image-with-text-media-overlay-{{ section.id }} {
      position: absolute;
      top: 0;
      left: 0;
      inset: 0;
      background-color: black;
      height: 100%;
      width: 100%;
      opacity: {% if section.settings.enable_overlay_animation %}1{% else %}0{% endif %};
      z-index: 2;
      /* pointer-events: none; */
      transition: opacity {{ section.settings.overlay_duration | default: 1 }}s ease-out;
      display: {% if section.settings.enable_overlay_animation %}block{% else %}none{% endif %} !important;
    }

    .image-with-text-media-container-{{ section.id }} {
      position: relative;
      width: 100%;
      height: 100%;
      min-height: 100%;
    }
  .image-with-text-iframe {
    width: 100%;
    height: 100%;
    min-height: 100%;
    display: block;
    position: relative;
    z-index: 1;
    overflow: hidden;
    background: #000;
  }

  .image-with-text-iframe iframe {
    position: absolute;
    top: 50%;
    left: 50%;
    width: 100vw;
    height: 100vh;
    transform: translate(-50%, -50%);
    border: none;
    outline: none;
    min-width: 100%;
    min-height: 100%;
  }

  /* Ensure video fills container completely for Vimeo */
  .image-with-text-iframe iframe[src*="vimeo"] {
    width: 100% !important;
    height: 100% !important;
    min-width: 100% !important;
    min-height: 100% !important;
    transform: translate(-50%, -50%) scale(1);
    transform-origin: center center;
  }

  /* For YouTube videos */
  .image-with-text-iframe iframe[src*="youtube"] {
    width: 100% !important;
    height: 100% !important;
    min-width: 100% !important;
    min-height: 100% !important;
    transform: translate(-50%, -50%);
  }

  .image-with-text-media-section-{{ section.id }}{
    padding: {{ settings.sections_spacing }}px {{ settings.side_space}}px;
  }

  .remove_button_svg .primary-slide-button-arrow{
    display: none !important;
  }

  @media (max-width: 749px) {

    .image-with-text-iframe iframe[src*="vimeo"] {
      width: 200% !important;
      height: 200% !important;
      min-width: 200% !important;
      min-height: 200% !important;
      transform: translate(-50%, -50%) scale(1);
      transform-origin: center center;
    }

    .image-with-text-iframe iframe[src*="youtube"] {
      width: 200% !important;
      height: 200% !important;
      min-width: 200% !important;
      min-height: 200% !important;
      transform: translate(-50%, -50%);
    }
  }
{%- endstyle -%}

{% if section.settings.enabled %}
  {% assign section_classes = '' %}
  {% if section.settings.color_scheme %}
    {% assign section_classes = section_classes | append: ' color-' | append: section.settings.color_scheme %}
    {% unless section.settings.color_scheme == '1' %}
      {% assign section_classes = section_classes | append: ' invert-arrow' %}
    {% endunless %}
  {% endif %}
  <section
    id="ImageWithText-{{ section.id }}"
    class="image-with-text-media-section-{{ section.id }} relative w-full overflow-hidden image-with-text-section-{{ section.id }}-padding{{ section_classes }}"
    data-video="{% if section.settings.use_video %}true{% else %}false{% endif %}"
    role="region"
    aria-label="Image with text section"
  >
    <div class="image-with-text-media-container-{{ section.id }}">
      {% if section.settings.use_video %}
        {% if section.settings.video_source == 'external' and section.settings.video_url != blank %}
          <div class="image-with-text-iframe" style="position:relative;">
            {% if section.settings.video_url.type == 'youtube' %}
              <iframe
                id="youtube-player-{{ section.id }}"
                class="w-full h-full object-cover"
                src="https://www.youtube.com/embed/{{ section.settings.video_url.id }}?autoplay=1&controls=0&mute=1&loop=1&playlist={{ section.settings.video_url.id }}&playsinline=1&rel=0&enablejsapi=1"
                frameborder="0"
                allow="autoplay; encrypted-media"
                allowfullscreen
                title="Background video"
                aria-label="Background video"
              ></iframe>
            {% elsif section.settings.video_url.type == 'vimeo' %}
              <iframe
                id="vimeo-player-{{ section.id }}"
                class="w-full h-full object-cover"
                src="https://player.vimeo.com/video/{{ section.settings.video_url.id }}?controls=false&loop=true&muted=true&playsinline=true&background=1"
                frameborder="0"
                allow="autoplay; fullscreen; picture-in-picture"
                allowfullscreen
                allowtransparency="true"
                title="Background video"
                aria-label="Background video"
                loading="lazy"
                data-ready="true"
                data-gtm-yt-inspected-9="true"
              ></iframe>
            {% endif %}
            <button
              class="video-mute-button"
              id="video-mute-button-{{ section.id }}"
              aria-label="Toggle sound"
              style="z-index: 10;"
              title="Unmute"
            >
              <svg
                class="mute-icon"
                xmlns="http://www.w3.org/2000/svg"
                viewBox="0 0 24 24"
                fill="none"
                stroke="currentColor"
                stroke-width="2"
                stroke-linecap="round"
                stroke-linejoin="round"
              >
                <polygon points="11 5 6 9 2 9 2 15 6 15 11 19 11 5" />
                <line x1="23" y1="9" x2="17" y2="15" />
                <line x1="17" y1="9" x2="23" y2="15" />
              </svg>
              <svg
                class="unmute-icon"
                style="display: none;"
                xmlns="http://www.w3.org/2000/svg"
                viewBox="0 0 24 24"
                fill="none"
                stroke="currentColor"
                stroke-width="2"
                stroke-linecap="round"
                stroke-linejoin="round"
              >
                <polygon points="11 5 6 9 2 9 2 15 6 15 11 19 11 5" />
                <path d="M19.07 4.93a10 10 0 0 1 0 14.14M15.54 8.46a5 5 0 0 1 0 7.07" />
              </svg>
            </button>
          </div>
        {% elsif section.settings.video_source == 'shopify' and section.settings.shopify_video != blank %}
          <div class="image-with-text-iframe" style="position:relative;">
            {{
              section.settings.shopify_video
              | video_tag:
                autoplay: true,
                loop: true,
                muted: true,
                playsinline: true,
                controls: false,
                class: 'w-full h-full object-cover',
                id: 'shopify-video-'
              | append: section.id
            }}
            <button
              class="video-mute-button"
              id="video-mute-button-{{ section.id }}"
              aria-label="Toggle sound"
              style="z-index: 10;"
              title="Unmute"
            >
              <svg
                class="mute-icon"
                xmlns="http://www.w3.org/2000/svg"
                viewBox="0 0 24 24"
                fill="none"
                stroke="currentColor"
                stroke-width="2"
                stroke-linecap="round"
                stroke-linejoin="round"
              >
                <polygon points="11 5 6 9 2 9 2 15 6 15 11 19 11 5" />
                <line x1="23" y1="9" x2="17" y2="15" />
                <line x1="17" y1="9" x2="23" y2="15" />
              </svg>
              <svg
                class="unmute-icon"
                style="display: none;"
                xmlns="http://www.w3.org/2000/svg"
                viewBox="0 0 24 24"
                fill="none"
                stroke="currentColor"
                stroke-width="2"
                stroke-linecap="round"
                stroke-linejoin="round"
              >
                <polygon points="11 5 6 9 2 9 2 15 6 15 11 19 11 5" />
                <path d="M19.07 4.93a10 10 0 0 1 0 14.14M15.54 8.46a5 5 0 0 1 0 7.07" />
              </svg>
            </button>
          </div>
        {% endif %}
      {% elsif section.settings.image != blank %}
        <div
          class="image-with-text-iframe"
          role="img"
          aria-label="{{ section.settings.image.alt | escape | default: 'Background image' }}"
        >
          <img
            srcset="
              {% if section.settings.image.width >= 375 %}{{ section.settings.image | image_url: width: 375 }} 375w,{% endif %}
              {% if section.settings.image.width >= 550 %}{{ section.settings.image | image_url: width: 550 }} 550w,{% endif %}
              {% if section.settings.image.width >= 750 %}{{ section.settings.image | image_url: width: 750 }} 750w,{% endif %}
              {% if section.settings.image.width >= 1100 %}{{ section.settings.image | image_url: width: 1100 }} 1100w,{% endif %}
              {% if section.settings.image.width >= 1500 %}{{ section.settings.image | image_url: width: 1500 }} 1500w,{% endif %}
              {% if section.settings.image.width >= 2200 %}{{ section.settings.image | image_url: width: 2200 }} 2200w,{% endif %}
              {{ section.settings.image | image_url }} {{ section.settings.image.width }}w
            "
            sizes="100vw"
            height="auto"
            width="auto"
            src="{{ section.settings.image | image_url: width: 1500 }}"
            alt="{{ section.settings.image.alt | escape | default: 'Background image' }}"
            class="w-full h-full object-cover"
            loading="lazy"
            style="width: 100%; height: 100%; min-height: 100%; display: block; position: relative; z-index: 1;"
          >
        </div>
      {% else %}
        <div
          class="flex bg-gray-400 items-center justify-center w-full h-full"
          role="img"
          aria-label="Placeholder image"
        >
          {{ 'lifestyle-2' | placeholder_svg_tag: 'w-auto h-auto opacity-30' }}
        </div>
      {% endif %}
      {% if section.settings.enable_overlay_animation %}
        <div class="image-with-text-media-overlay-{{ section.id }}"></div>
      {% endif %}
    </div>
    <div class="absolute inset-0 image-with-text-text-content-wrapper-{{ section.id }}" style="z-index:3;">
      <div
        class="
          image-with-text-text-content-container-{{ section.id }}
          {% if section.settings.text_alignment == 'center' %}text-center{% elsif section.settings.text_alignment == 'right' %}text-right{% else %}text-left{% endif %}
        "
      >
        <div class="content-wrapper-flex content-flex-{{ section.settings.vertical_content_position }}">
          {% for block in section.blocks %}
            {% case block.type %}
              {% when 'heading' %}
                <h2
                  id="Heading-{{ section.id }}-{{ forloop.index }}"
                  class="image-with-text-heading mb-4 {{ heading_class }} {% if section.settings.enable_text_animation %}image-with-text-letter-animation{% endif %}"
                  style="color:{{ block.settings.text_color }}; font-weight: var(--t-h-2-weight); margin-bottom: 20px; font-style: var(--font-heading-style); font-family: var(--font-heading-family); font-size: var(--t-h-2-size); line-height: var(--t-h-2-line-height);"
                >
                  {{ block.settings.heading | replace: '||', '<br>' }}
                </h2>
              {% when 'date' %}
                <div
                  id="TextContent-{{ section.id }}-{{ forloop.index }}"
                  class="image-with-text-date mb-3 {% if section.settings.enable_text_animation %}date-animation{% endif %}"
                  style="color: {{ block.settings.text_color }}; font-weight: {{ block.settings.font_weight }}; font-style: var(--font-subheading-style); font-family: var(--font-subheading-family);"
                >
                  {{ block.settings.date }}
                </div>
              {% when 'text' %}
                <div
                  id="TextContent-{{ section.id }}-{{ forloop.index }}"
                  class="image-with-text-text-content mb-6 {% if section.settings.enable_text_animation %}text-animation{% endif %}"
                  style="color: {{ block.settings.text_color }}; font-weight: {{ block.settings.font_weight }}; font-style: var(--font-body-style); font-family: var(--font-body-family);"
                >
                  {% if section.settings.enable_text_animation %}
                    {{ block.settings.text | replace: '<p>', '<p class="image-with-text-letter-animation">' }}
                  {% else %}
                    {{ block.settings.text }}
                  {% endif %}
                </div>
              {% when 'dual_headings' %}
                <div class="dual-heading-container">
                  {% if block.settings.top_heading != blank %}
                    {% assign top_heading_class = '' %}
                    {% if block.settings.top_heading_size == 'small' %}
                      {% assign top_heading_class = 'image-with-text-heading-size-small' %}
                    {% elsif block.settings.top_heading_size == 'medium' %}
                      {% assign top_heading_class = 'image-with-text-heading-size-medium' %}
                    {% elsif block.settings.top_heading_size == 'large' %}
                      {% assign top_heading_class = 'image-with-text-heading-size-large' %}
                    {% endif %}

                    <div class="dual-heading-top {% if block.settings.top_alignment == 'center' %}text-center{% elsif block.settings.top_alignment == 'right' %}text-right{% else %}text-left{% endif %}">
                      <h2
                        id="TopHeading-{{ section.id }}-{{ forloop.index }}"
                        class="image-with-text-heading {{ top_heading_class }} {% if section.settings.enable_text_animation %}image-with-text-letter-animation{% endif %}"
                        style="color:{{ block.settings.top_text_color }}; font-weight: {{ block.settings.top_font_weight }}; font-style: var(--font-subheading-style); font-family: var(--font-subheading-family);"
                      >
                        {{ block.settings.top_heading }}
                      </h2>
                    </div>
                  {% endif %}

                  {% if block.settings.bottom_heading != blank %}
                    {% assign bottom_heading_class = '' %}
                    {% if block.settings.bottom_heading_size == 'small' %}
                      {% assign bottom_heading_class = 'image-with-text-heading-size-small' %}
                    {% elsif block.settings.bottom_heading_size == 'medium' %}
                      {% assign bottom_heading_class = 'image-with-text-heading-size-medium' %}
                    {% elsif block.settings.bottom_heading_size == 'large' %}
                      {% assign bottom_heading_class = 'image-with-text-heading-size-large' %}
                    {% endif %}

                    <div class="dual-heading-bottom {% if block.settings.bottom_alignment == 'center' %}text-center{% elsif block.settings.bottom_alignment == 'right' %}text-right{% else %}text-left{% endif %}">
                      <h2
                        id="BottomHeading-{{ section.id }}-{{ forloop.index }}"
                        class="image-with-text-heading {{ bottom_heading_class }} {% if section.settings.enable_text_animation %}image-with-text-letter-animation{% endif %}"
                        style="color:{{ block.settings.bottom_text_color }}; font-weight: {{ block.settings.bottom_font_weight }}; font-style: var(--font-subheading-style); font-family: var(--font-subheading-family);"
                      >
                        {{ block.settings.bottom_heading }}
                      </h2>
                    </div>
                  {% endif %}
                </div>
              {% when 'button' %}
                <div class="image-with-text-button-container color-{{ section.settings.color_scheme }} {% if section.settings.text_alignment == 'center' %}text-center{% elsif section.settings.text_alignment == 'right' %}text-right{% else %}text-left{% endif %} {% if section.settings.enable_button_animation %}button-animation{% endif %}">
                  {% if block.settings.show_button_arrow == false %}
                    {% render 'primary-button',
                      button_text: block.settings.button_label,
                      button_url: block.settings.button_link,
                      button_font_size: 'var(--t-b-1-size)',
                      font_weight: 'var(--t-b-1-weight)',
                      button_line_height: 'var(--t-b-1-line-height)',
                      mobile_font_size: 'var(--tm-b-2-size)',
                      mobile_font_weight: 'var(--t-b-2-weight)',
                      mobile_line_height: 'var(--tm-b-2-line-height)',
                      primary_class: 'remove_button_svg'
                    %}
                  {% else %}
                    {% render 'primary-button',
                      button_text: block.settings.button_label,
                      button_url: block.settings.button_link,
                      button_font_size: 'var(--t-b-1-size)',
                      font_weight: 'var(--t-b-1-weight)',
                      button_line_height: 'var(--t-b-1-line-height)',
                      mobile_font_size: 'var(--tm-b-2-size)',
                      mobile_font_weight: 'var(--t-b-2-weight)',
                      mobile_line_height: 'var(--tm-b-2-line-height)'
                    %}
                  {% endif %}
                </div>
            {% endcase %}
          {% endfor %}
        </div>
      </div>
    </div>
  </section>
{% endif %}

<script>

window.addEventListener('load', function() {
    {% if section.settings.enable_overlay_animation %}
    const overlay = document.querySelector('.image-with-text-media-overlay-{{ section.id }}');
    if (!overlay) return;
    setTimeout(() => {
      overlay.style.opacity = '0';
      overlay.addEventListener('transitionend', () => overlay.remove());
    }, {{ section.settings.overlay_duration | times: 1000 | default: 1000 }});
    {% endif %}
  });

document.addEventListener('DOMContentLoaded', function() {
const buttonAnimationDelay = {{ section.settings.button_animation_delay }};

const styleElement = document.createElement('style');
styleElement.textContent = `
@keyframes letterAppear {
  0% {
    transform: translateX(10000%);
    opacity: 0;
  }
  100% {
    transform: translateX(0);
    opacity: 1;
  }
}

@keyframes buttonAppear {
  0% {
    transform: translateY(100px);
    opacity: 0;
  }
  100% {
    transform: translateY(0);
    opacity: 1;
  }
}

.button-animation.animated {
  animation: buttonAppear 0.8s forwards;
  animation-delay: ${buttonAnimationDelay}s; 
}
`;
document.head.appendChild(styleElement);

const prefersReducedMotion = window.matchMedia('(prefers-reduced-motion: reduce)').matches;

// Set initial states based on animation settings
const sectionElement = document.querySelector('.image-with-text-media-section-{{ section.id }}');
if (sectionElement) {
  if (prefersReducedMotion || (!{{ section.settings.enable_text_animation }} && !{{ section.settings.enable_button_animation }})) {
    sectionElement.classList.add('no-animation');
  } else {
    // For elements that should be animated, ensure they start hidden
    {% if section.settings.enable_text_animation %}
    sectionElement.querySelectorAll('.image-with-text-image-with-text-letter-animation, .date-animation, .text-animation').forEach(element => {
      element.style.opacity = '0';
    });
    {% else %}
    sectionElement.querySelectorAll('.image-with-text-image-with-text-letter-animation, .date-animation, .text-animation').forEach(element => {
      element.style.opacity = '1';
    });
    {% endif %}

    {% if section.settings.enable_button_animation %}
    sectionElement.querySelectorAll('.button-animation').forEach(button => {
      button.style.opacity = '0';
    });
    {% else %}
    sectionElement.querySelectorAll('.button-animation').forEach(button => {
      button.style.opacity = '1';
    });
    {% endif %}
  }
}

if (prefersReducedMotion) {
  // For reduced motion, make everything visible immediately
  document.querySelectorAll('.image-with-text-image-with-text-letter-animation, .date-animation, .text-animation, .button-animation').forEach(element => {
    element.style.opacity = '1';
  });
} else {
  const observer = new IntersectionObserver((entries, observer) => {
    entries.forEach(entry => {
      if (entry.isIntersecting) {
        {% if section.settings.enable_text_animation %}
        // Handle heading animations
        const headingElements = entry.target.querySelectorAll('.image-with-text-image-with-text-letter-animation');
        
        headingElements.forEach(element => {
          const text = element.textContent.trim();
          element.textContent = '';
          element.classList.add('image-with-text-letter-animation-container', 'animation-ready');
          element.setAttribute('aria-label', text);
          element.style.opacity = '1'; // Make container visible
          
          // Split the text into words first
          const words = text.split(' ');
          
          let letterIndex = 0;
          words.forEach((word, wordIndex) => {
            // Create a word container span
            const wordSpan = document.createElement('span');
            wordSpan.classList.add('animated-word');
            wordSpan.style.display = 'inline-block';
            wordSpan.style.whiteSpace = 'nowrap'; // Prevent word breaking
            
            for (let i = 0; i < word.length; i++) {
              const letterSpan = document.createElement('span');
              letterSpan.classList.add('animated-letter');
              letterSpan.textContent = word[i];
              letterSpan.setAttribute('aria-hidden', 'true');
              
              letterSpan.style.animation = `letterAppear 1s forwards`;
              letterSpan.style.animationDelay = `${letterIndex * 0.07}s`;
              letterIndex++;
              
              wordSpan.appendChild(letterSpan);
            }
            
            element.appendChild(wordSpan);
            
            // Add space between words (except for the last word)
            if (wordIndex < words.length - 1) {
              const spaceSpan = document.createElement('span');
              spaceSpan.classList.add('animated-space');
              spaceSpan.innerHTML = '&nbsp;';
              spaceSpan.style.animation = `letterAppear 1s forwards`;
              spaceSpan.style.animationDelay = `${letterIndex * 0.07}s`;
              letterIndex++;
              element.appendChild(spaceSpan);
            }
          });
        });

        // Handle text content animations - similar approach for paragraph text
        const textContentElements = entry.target.querySelectorAll('.image-with-text-text-content p.image-with-text-image-with-text-letter-animation');
        
        textContentElements.forEach(element => {
          const text = element.textContent.trim();
          element.textContent = '';
          element.classList.add('image-with-text-letter-animation-container', 'animation-ready');
          element.setAttribute('aria-label', text);
          element.style.opacity = '1'; // Make container visible
          
          // Split the text into words first
          const words = text.split(' ');
          
          let letterIndex = 0;
          words.forEach((word, wordIndex) => {
            // Create a word container span
            const wordSpan = document.createElement('span');
            wordSpan.classList.add('animated-word');
            wordSpan.style.display = 'inline-block';
            wordSpan.style.whiteSpace = 'nowrap'; // Prevent word breaking
            
            for (let i = 0; i < word.length; i++) {
              const letterSpan = document.createElement('span');
              letterSpan.classList.add('animated-letter');
              letterSpan.textContent = word[i];
              letterSpan.setAttribute('aria-hidden', 'true');
              
              letterSpan.style.animation = `letterAppear 1s forwards`;
              letterSpan.style.animationDelay = `${letterIndex * 0.07}s`;
              letterIndex++;
              
              wordSpan.appendChild(letterSpan);
            }
            
            element.appendChild(wordSpan);
            
            // Add space between words (except for the last word)
            if (wordIndex < words.length - 1) {
              const spaceSpan = document.createElement('span');
              spaceSpan.classList.add('animated-space');
              spaceSpan.innerHTML = '&nbsp;';
              spaceSpan.style.animation = `letterAppear 1s forwards`;
              spaceSpan.style.animationDelay = `${letterIndex * 0.07}s`;
              letterIndex++;
              element.appendChild(spaceSpan);
            }
          });
        });

        // Handle date animations
        const dateElements = entry.target.querySelectorAll('.date-animation');
        dateElements.forEach((element, index) => {
          element.classList.add('animation-ready');
          element.style.opacity = '1';
          element.style.animation = 'buttonAppear 0.8s forwards';
          element.style.animationDelay = `${index * 0.2}s`;
        });

        // Handle text block animations
        const textElements = entry.target.querySelectorAll('.text-animation');
        textElements.forEach((element, index) => {
          element.classList.add('animation-ready');
          element.style.opacity = '1';
          element.style.animation = 'buttonAppear 0.8s forwards';
          element.style.animationDelay = `${index * 0.3}s`;
        });
        {% else %}
        // If text animation is disabled, make text visible immediately
        const textElements = entry.target.querySelectorAll('.image-with-text-image-with-text-letter-animation, .date-animation, .text-animation');
        textElements.forEach(element => {
          element.style.opacity = '1';
        });
        {% endif %}

        {% if section.settings.enable_button_animation %}
        const buttons = entry.target.querySelectorAll('.button-animation');
        buttons.forEach(button => {
          button.classList.add('animation-ready');
          setTimeout(() => {
            button.classList.add('animated');
          }, 100);
        });
        {% else %}
        const buttons = entry.target.querySelectorAll('.button-animation');
        buttons.forEach(button => {
          button.style.opacity = '1';
        });
        {% endif %}

        observer.unobserve(entry.target);
      }
    });
  }, {
    root: null, 
    rootMargin: '0px', 
    threshold: 0.1 
  });

  document.querySelectorAll('.image-with-text-media-section-{{ section.id }}').forEach(section => {
    observer.observe(section);
  });
}

const buttons = document.querySelectorAll('.image-with-text-custom-button-css');
buttons.forEach(button => {
button.addEventListener('keydown', function(event) {
  if (event.key === 'Enter' || event.key === ' ') {
    event.preventDefault();
    this.click();
  }
});
});
});

// Mute/Unmute Button Functionality (robust, supports multiple sections and avoids global conflicts)
document.addEventListener('DOMContentLoaded', function() {
  var sectionId = '{{ section.id }}';
  var muteBtn = document.getElementById('video-mute-button-' + sectionId);
  if (!muteBtn) return;
  var ytFrame = document.getElementById('youtube-player-' + sectionId);
  var vimeoFrame = document.getElementById('vimeo-player-' + sectionId);
  var shopifyVideo = document.getElementById('shopify-video-' + sectionId);
  var isMuted = true;
  function toggleIcon(muted) {
    var muteIcon = muteBtn.querySelector('.mute-icon');
    var unmuteIcon = muteBtn.querySelector('.unmute-icon');
    if (muted) {
      muteIcon.style.display = 'block';
      unmuteIcon.style.display = 'none';
      muteBtn.setAttribute('title', 'Unmute');
      muteBtn.setAttribute('aria-label', 'Unmute');
    } else {
      muteIcon.style.display = 'none';
      unmuteIcon.style.display = 'block';
      muteBtn.setAttribute('title', 'Mute');
      muteBtn.setAttribute('aria-label', 'Mute');
    }
  }
  // YouTube
  if (ytFrame) {
    if (!window._ytApiLoading) {
      var tag = document.createElement('script');
      tag.src = 'https://www.youtube.com/iframe_api';
      document.head.appendChild(tag);
      window._ytApiLoading = true;
    }
    window._ytMuteReady = window._ytMuteReady || [];
    window._ytMuteReady.push(function() {
      var ytPlayer = new YT.Player('youtube-player-' + sectionId, {
        events: {
          'onReady': function(event) {
            muteBtn.addEventListener('click', function() {
              if (isMuted) {
                ytPlayer.unMute();
                isMuted = false;
              } else {
                ytPlayer.mute();
                isMuted = true;
              }
              toggleIcon(isMuted);
            });
          }
        }
      });
    });
    if (!window.onYouTubeIframeAPIReady) {
      window.onYouTubeIframeAPIReady = function() {
        window._ytMuteReady.forEach(function(cb){cb();});
      };
    }
  }
  // Vimeo
  if (vimeoFrame) {
    if (!window._vimeoApiLoading) {
      var vimeoScript = document.createElement('script');
      vimeoScript.src = 'https://player.vimeo.com/api/player.js';
      document.head.appendChild(vimeoScript);
      window._vimeoApiLoading = true;
    }
    function vimeoReady() {
      var vimeoPlayer = new Vimeo.Player(vimeoFrame);
      muteBtn.addEventListener('click', function() {
        if (isMuted) {
          vimeoPlayer.setVolume(1);
          isMuted = false;
        } else {
          vimeoPlayer.setVolume(0);
          isMuted = true;
        }
        toggleIcon(isMuted);
      });
    }
    if (window.Vimeo && window.Vimeo.Player) {
      vimeoReady();
    } else {
      var checkVimeo = setInterval(function() {
        if (window.Vimeo && window.Vimeo.Player) {
          clearInterval(checkVimeo);
          vimeoReady();
        }
      }, 100);
    }
  }
  // Shopify video
  if (shopifyVideo) {
    muteBtn.addEventListener('click', function() {
      if (isMuted) {
        shopifyVideo.muted = false;
        isMuted = false;
      } else {
        shopifyVideo.muted = true;
        isMuted = true;
      }
      toggleIcon(isMuted);
    });
  }
  // Hide button if no video
  if (!ytFrame && !vimeoFrame && !shopifyVideo) {
    muteBtn.style.display = 'none';
  }
});
</script>

{% schema %}
{
  "name": "Image with Text",
  "disabled_on": {
    "groups": ["header", "footer"]
  },
  "settings": [
    {
      "type": "checkbox",
      "id": "enabled",
      "label": "Enable section",
      "default": true
    },
    {
      "type": "color_scheme",
      "id": "color_scheme",
      "label": "t:sections.all.colors.label",
      "default": "scheme-1"
    },
    {
      "type": "header",
      "content": "Media Settings"
    },
    {
      "type": "image_picker",
      "id": "image",
      "label": "Image"
    },
    {
      "type": "checkbox",
      "id": "use_video",
      "label": "Use video instead of image",
      "default": false
    },
    {
      "type": "select",
      "id": "video_source",
      "label": "Video source",
      "options": [
        {
          "value": "external",
          "label": "YouTube/Vimeo"
        },
        {
          "value": "shopify",
          "label": "Shopify video"
        }
      ],
      "default": "external"
    },
    {
      "type": "video_url",
      "id": "video_url",
      "label": "YouTube/Vimeo URL",
      "accept": ["youtube", "vimeo"],
      "info": "YouTube or Vimeo URL"
    },
    {
      "type": "video",
      "id": "shopify_video",
      "label": "Shopify video",
      "info": "Upload video directly to Shopify"
    },
    {
      "type": "header",
      "content": "Animation Settings"
    },
    {
      "type": "checkbox",
      "id": "enable_text_animation",
      "label": "Enable text animation",
      "default": false,
      "info": "Animate text with letter-by-letter appearance effect"
    },
    {
      "type": "checkbox",
      "id": "enable_button_animation",
      "label": "Enable button animation",
      "default": false,
      "info": "Animate button with slide-up effect"
    },
    {
      "type": "range",
      "id": "button_animation_delay",
      "min": 0.5,
      "max": 10.0,
      "step": 0.1,
      "unit": "s",
      "label": "Button animation delay",
      "default": 1.5,
      "info": "Time to wait before showing the button animation"
    },
    {
      "type": "checkbox",
      "id": "enable_overlay_animation",
      "label": "Enable overlay fade animation",
      "default": false,
      "info": "Show black overlay that fades out on page load"
    },
    {
      "type": "range",
      "id": "overlay_duration",
      "min": 0.5,
      "max": 10,
      "step": 0.1,
      "unit": "s",
      "label": "Overlay fade duration",
      "default": 2.5,
      "info": "How long the black overlay stays before fading out (in seconds)"
    },
    {
      "type": "header",
      "content": "Content Positioning"
    },
    {
      "type": "select",
      "id": "horizontal_position",
      "label": "Horizontal position",
      "options": [
        {
          "value": "flex-start",
          "label": "Left"
        },
        {
          "value": "center",
          "label": "Center"
        },
        {
          "value": "flex-end",
          "label": "Right"
        }
      ],
      "default": "center"
    },
    {
      "type": "select",
      "id": "text_alignment",
      "label": "Text alignment",
      "options": [
        {
          "value": "left",
          "label": "Left"
        },
        {
          "value": "center",
          "label": "Center"
        },
        {
          "value": "right",
          "label": "Right"
        }
      ],
      "default": "center"
    },
    {
      "type": "select",
      "id": "vertical_content_position",
      "label": "Content vertical layout",
      "options": [
        {
          "value": "top",
          "label": "Top"
        },
        {
          "value": "center",
          "label": "Center"
        },
        {
          "value": "bottom",
          "label": "Bottom"
        },
        {
          "value": "space-between",
          "label": "Space between"
        }
      ],
      "default": "center",
      "info": "Controls how the content blocks are vertically arranged"
    },
    {
      "type": "range",
      "id": "content_width",
      "min": 200,
      "max": 1000,
      "step": 10,
      "unit": "px",
      "label": "Content width (desktop)",
      "default": 800
    },
    {
      "type": "range",
      "id": "content_width_mobile",
      "min": 50,
      "max": 500,
      "step": 10,
      "unit": "px",
      "label": "Content width (mobile)",
      "default": 300
    },
    {
      "type": "range",
      "id": "content_padding",
      "min": 0,
      "max": 60,
      "step": 5,
      "unit": "px",
      "label": "Content padding",
      "default": 20
    },
    {
      "type": "range",
      "id": "content_padding_mobile",
      "min": 0,
      "max": 60,
      "step": 5,
      "unit": "px",
      "label": "Content padding (mobile)",
      "default": 5
    },
    {
      "type": "header",
      "content": "Section Size"
    },
    {
      "type": "range",
      "id": "img_height",
      "min": 300,
      "max": 1100,
      "step": 10,
      "unit": "px",
      "label": "Section height (desktop)",
      "default": 700
    },
    {
      "type": "range",
      "id": "img_height_mobile",
      "min": 300,
      "max": 800,
      "step": 10,
      "unit": "px",
      "label": "Section height (mobile)",
      "default": 500
    }
  ],
  "blocks": [
    {
      "type": "date",
      "name": "Date",
      "settings": [
        {
          "type": "text",
          "id": "date",
          "label": "Date"
        },
        {
          "type": "select",
          "id": "font_weight",
          "label": "Font weight",
          "options": [
            {
              "value": "400",
              "label": "Regular (400)"
            },
            {
              "value": "500",
              "label": "Medium (500)"
            },
            {
              "value": "900",
              "label": "Black (900)"
            }
          ],
          "default": "500"
        },
        {
          "type": "color",
          "id": "text_color",
          "label": "Text Color",
          "default": "#FFFFFF"
        }
      ]
    },
    {
      "type": "heading",
      "name": "Heading",
      "settings": [
        {
          "type": "text",
          "id": "heading",
          "label": "Heading",
          "info": "Separate heading line using ||",
          "default": "HEADING"
        },
        {
          "type": "color",
          "id": "text_color",
          "label": "Text Color",
          "default": "#FFFFFF"
        }
      ]
    },
    {
      "type": "text",
      "name": "Text",
      "settings": [
        {
          "type": "richtext",
          "id": "text",
          "label": "Text",
          "default": "<p>Add your description or promotional text here to accompany your featured image or video.</p>"
        },
        {
          "type": "select",
          "id": "font_weight",
          "label": "Font weight",
          "options": [
            {
              "value": "400",
              "label": "Regular (400)"
            },
            {
              "value": "500",
              "label": "Medium (500)"
            },
            {
              "value": "900",
              "label": "Black (900)"
            }
          ],
          "default": "500"
        },
        {
          "type": "color",
          "id": "text_color",
          "label": "Text Color",
          "default": "#FFFFFF"
        }
      ]
    },
    {
      "type": "button",
      "name": "Button",
      "settings": [
        {
          "type": "text",
          "id": "button_label",
          "label": "Button label",
          "default": "EXPLORE NOW"
        },
        {
          "type": "checkbox",
          "id": "show_button_arrow",
          "label": "Show arrow in button",
          "default": true
        },
        {
          "type": "url",
          "id": "button_link",
          "label": "Button link"
        }
      ]
    },
    {
      "type": "dual_headings",
      "name": "Dual Headings",
      "settings": [
        {
          "type": "text",
          "id": "top_heading",
          "label": "Top heading",
          "default": "TOP HEADING"
        },
        {
          "type": "select",
          "id": "top_heading_size",
          "label": "Top heading size",
          "options": [
            {
              "value": "small",
              "label": "Small"
            },
            {
              "value": "medium",
              "label": "Medium"
            },
            {
              "value": "large",
              "label": "Large"
            }
          ],
          "default": "medium"
        },
        {
          "type": "select",
          "id": "top_font_weight",
          "label": "Top heading font weight",
          "options": [
            {
              "value": "400",
              "label": "Regular (400)"
            },
            {
              "value": "500",
              "label": "Medium (500)"
            },
            {
              "value": "900",
              "label": "Black (900)"
            }
          ],
          "default": "500"
        },
        {
          "type": "select",
          "id": "top_alignment",
          "label": "Top heading alignment",
          "options": [
            {
              "value": "left",
              "label": "Left"
            },
            {
              "value": "center",
              "label": "Center"
            },
            {
              "value": "right",
              "label": "Right"
            }
          ],
          "default": "center"
        },
        {
          "type": "color",
          "id": "top_text_color",
          "label": "Top heading color",
          "default": "#FFFFFF"
        },
        {
          "type": "text",
          "id": "bottom_heading",
          "label": "Bottom heading",
          "default": "BOTTOM HEADING"
        },
        {
          "type": "select",
          "id": "bottom_heading_size",
          "label": "Bottom heading size",
          "options": [
            {
              "value": "small",
              "label": "Small"
            },
            {
              "value": "medium",
              "label": "Medium"
            },
            {
              "value": "large",
              "label": "Large"
            }
          ],
          "default": "medium"
        },
        {
          "type": "select",
          "id": "bottom_font_weight",
          "label": "Bottom heading font weight",
          "options": [
            {
              "value": "400",
              "label": "Regular (400)"
            },
            {
              "value": "500",
              "label": "Medium (500)"
            },
            {
              "value": "900",
              "label": "Black (900)"
            }
          ],
          "default": "500"
        },
        {
          "type": "select",
          "id": "bottom_alignment",
          "label": "Bottom heading alignment",
          "options": [
            {
              "value": "left",
              "label": "Left"
            },
            {
              "value": "center",
              "label": "Center"
            },
            {
              "value": "right",
              "label": "Right"
            }
          ],
          "default": "center"
        },
        {
          "type": "color",
          "id": "bottom_text_color",
          "label": "Bottom heading color",
          "default": "#FFFFFF"
        }
      ]
    }
  ],
  "presets": [
    {
      "name": "Image with Text",
      "blocks": [
        {
          "type": "heading"
        },
        {
          "type": "button"
        }
      ],
      "settings": {
        "horizontal_position": "center",
        "vertical_content_position": "center",
        "text_alignment": "center",
        "enable_text_animation": false,
        "enable_button_animation": false,
        "button_animation_delay": 1.5,
        "enable_overlay_animation": false
      }
    }
  ]
}
{% endschema %}
