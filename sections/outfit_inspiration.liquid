<div class="outfit-inspiration-section color-{{ section.settings.color_scheme }} bg-color:var(--background) p-8  px-0 flex justify-center items-center md:py-16">
  <div class="outfit-navigation-arrows desktop-arrows ">
    <button
      class="outfit-navigation z-1 bg-color:var(--background) transition-opacity duration-300"
      id="outfit-slider-prev-{{ section.id }}"
      aria-label="Previous"
      type="button"
    >
      <svg
        class="w-[22px] h-[22px]"
        fill="none"
        stroke="{{ section.settings.border_color | default: '#000' }}"
        stroke-width="1"
        viewBox="0 0 24 24"
      >
        <path stroke-linecap="round" stroke-linejoin="round" d="M15 19l-7-7 7-7"/>
      </svg>
    </button>
  </div>

  <div class="relative bg-color:var(--background)">
    <div class="flex flex-col color-{{ section.settings.color_scheme }} lg:flex-row gap-4 justify-center ">
      <div class="outfit-contianer flex flex-col">
        <h2 class="outfit-section-title">
          {{ section.settings.title }}
        </h2>

        <div class="outfit-wrapper flex relative ">
          <!-- Main Product -->
          <div class="  max-w-[409px] mx-10 lg:mx-0 flex flex-col items-center">
            <div
              class="main-product-card"
            >
              <div
                class="flex items-center justify-center w-full"
              >
                <img
                  src="{{ product.featured_image | img_url: '409x512', crop: 'center' }}"
                  alt="{{ product.title }}"
                  class="outfit-main-img"
                  height="512"
                  width="409"
                >
              </div>
              <div class="main-product-details">
                <h4 class="main-product-title">
                  {{ product.title }}
                </h4>
                {% if product.compare_at_price > product.price %}
                  <span class="line-through outfit-price" style="color: var(--text);">
                    {{ product.compare_at_price | money }}
                  </span>
                  <span class="outfit-price" style="color: var(--sale_badge);">
                    {{ product.price | money }}
                  </span>
                {% else %}
                  <span class="outfit-price" style="color: var(--text);">
                    {{ product.price | money }}
                  </span>
                {% endif %}
              </div>
            </div>
          </div>
          <!-- Paired Products Slider -->
          <div class="outfit-paired relative overflow-hidden">
            <div class="flex flex-col justify-center overflow-hidden h-full">
              <div
                class="transition-transform duration-300 ease-in-out w-full h-full"
                id="outfit-slider-track-{{ section.id }}"
              >
                {% for block in section.blocks %}
                  {% assign product_count = 0 %}
                  {% for i in (1..3) %}
                    {% assign product_key = 'product_' | append: i %}
                    {% if block.settings[product_key] != blank %}
                      {% assign product_count = product_count | plus: 1 %}
                    {% endif %}
                  {% endfor %}

                  <div
                    class="paired-product-slide flex flex-col h-full {% if product_count < 3 %}justify-center{% else %}justify-start{% endif %} gap-4"
                    data-slide-index="{{ forloop.index0 }}"
                    data-products="{{ product_count }}"
                    data-section-id="{{ section.id }}"
                  >
                    {% for i in (1..3) %}
                      {% assign product_key = 'product_' | append: i %}
                      {% if block.settings[product_key] != blank %}
                        {% assign paired_product = all_products[block.settings[product_key]] %}

                        <!-- Product Card -->
                        <div
                          class="paired-product-card flex items-center gap-6 transition-all duration-500 ease-in-out relative"
                          data-product-id="{{ paired_product.id }}"
                          data-product-url="{{ paired_product.url }}"
                          data-section-id="{{ section.id }}"
                        >
                          <div class=" paired-product-img w-[140px] h-[150px] flex items-center justify-center overflow-hidden flex-shrink-0">
                            {% if paired_product.featured_image %}
                              <img
                                src="{{ paired_product.featured_image | img_url: '140x150', crop: 'center' }}"
                                alt="{{ paired_product.title }}"
                                class="paired-product-img"
                                height="150"
                                width="140"
                              >
                            {% else %}
                              <div class="w-full h-full bg-gray-300"></div>
                            {% endif %}
                          </div>
                          <div class="flex-1 min-w-0 flex flex-col justify-between h-full">
                            <div class="outfit-paired-title">
                              <h4 class="paired-product-title">
                                {{ paired_product.title }}
                              </h4>
                              {% if paired_product.compare_at_price > paired_product.price %}
                                <span class="line-through paired-product-price" style="color: var(--text);">
                                  {{ paired_product.compare_at_price | money }}
                                </span>
                                <span class="paired-product-price" style="color: var(--sale_badge);">
                                  {{ paired_product.price | money }}
                                </span>
                              {% else %}
                                <span class="paired-product-price" style="color: var(--text);">
                                  {{ paired_product.price | money }}
                                </span>
                              {% endif %}
                            </div>
                            <div class="flex items-center justify-between gap-2 mt-auto">
                              <div>
                                {% if paired_product.available == false %}
                                  <span
                                    class="outfit-sold-out"
                                  >
                                    SOLD OUT
                                  </span>
                                {% endif %}
                              </div>
                              <button
                                class="outfit-expand-product-btn-{{ section.id }} flex-shrink-0 p-0 transition-transform duration-300 hover:scale-110"
                                aria-label="View Product"
                                data-product-id="{{ paired_product.id }}"
                                data-section-id="{{ section.id }}"
                              >
                                <svg
                                  xmlns="http://www.w3.org/2000/svg"
                                  width="16"
                                  height="16"
                                  fill="currentColor"
                                  class="bi bi-caret-right-fill outfit-expand-product-btn-svg "
                                  viewBox="0 0 16 16"
                                >
                                  <path d="m12.14 8.753-5.482 4.796c-.646.566-1.658.106-1.658-.753V3.204a1 1 0 0 1 1.659-.753l5.48 4.796a1 1 0 0 1 0 1.506z"/>
                                </svg>
                              </button>
                            </div>
                          </div>
                        </div>

                        <div
                          class="expanded-product-card transition-all duration-500 ease-in-out overflow-hidden opacity-0 pointer-events-none"
                          data-product-id="{{ paired_product.id }}"
                          data-section-id="{{ section.id }}"
                        >
                          <div class="expanded-content h-full">
                            <div class="gap-4">
                              <div class="h-1/2">
                                <div class=" flex items-center justify-center overflow-hidden mb-6">
                                  {% if paired_product.featured_image %}
                                    <img
                                      src="{{ paired_product.featured_image | img_url: '200x250', crop: 'center' }}"
                                      alt="{{ paired_product.title }}"
                                      height="250"
                                      width="200"
                                      class="exapnded-product-img"
                                      style="aspect-ratio: 1/1; object-fit: cover;"
                                    >
                                  {% else %}
                                    <div class=" bg-gray-300"></div>
                                  {% endif %}
                                </div>
                              </div>

                              <div class="flex-1 flex flex-col">
                                <div class="outfit-expanded-title flex justify-between items-center">
                                  <h4>
                                    {{ paired_product.title }}
                                  </h4>
                                  <button
                                    class="outfit-arrow outfit-close-expanded-btn-{{ section.id }} transition-transform duration-300 hover:scale-110 ml-4"
                                    aria-label="Close"
                                    data-product-id="{{ paired_product.id }}"
                                    data-section-id="{{ section.id }}"
                                  >
                                    <svg
                                      xmlns="http://www.w3.org/2000/svg"
                                      width="16"
                                      height="16"
                                      fill="currentColor"
                                      class="bi bi-caret-right-fill"
                                      viewBox="0 0 16 16"
                                      style="transform: rotate(90deg);"
                                    >
                                      <path d="m12.14 8.753-5.482 4.796c-.646.566-1.658.106-1.658-.753V3.204a1 1 0 0 1 1.659-.753l5.48 4.796a1 1 0 0 1 0 1.506z"/>
                                    </svg>
                                  </button>
                                </div>

                                <div class="outfit-expanded-price">
                                  {% if paired_product.compare_at_price > paired_product.price %}
                                    <span class="line-through outfit-expanded-price" style="color: var(--text);">
                                      {{ paired_product.compare_at_price | money }}
                                    </span>
                                    <span class="outfit-expanded-price" style="color: var(--sale_badge);">
                                      {{ paired_product.price | money }}
                                    </span>
                                  {% else %}
                                    <span class="outfit-expanded-price" style="color: var(--text);">
                                      {{ paired_product.price | money }}
                                    </span>
                                  {% endif %}
                                </div>

                                <div class=" outfit-size flex justify-between items-center">
                                  {% assign size_option = null %}
                                  {% for option in paired_product.options_with_values %}
                                    {% if option.name == 'Size' or option.name == 'size' %}
                                      {% assign size_option = option %}
                                    {% endif %}
                                  {% endfor %}
                                  {% if size_option %}
                                    <div class="flex gap-2">
                                      {% for value in size_option.values %}
                                        {% assign variant_for_size = null %}
                                        {% for variant in paired_product.variants %}
                                          {% if variant.options contains value %}
                                            {% assign variant_for_size = variant %}
                                            {% break %}
                                          {% endif %}
                                        {% endfor %}
                                        <button
                                          class="
                                            outfit-size-option-{{ section.id }} flex items-center justify-center transition-colors duration-300
                                            {% if variant_for_size.available %}
                                             bg-white hover:bg-black hover:text-white
                                             {% else %}
                                              bg-gray-200 text-gray-400 cursor-not-allowed
                                              {% endif %}
                                               {% if forloop.first %}
                                                 selected
                                              {% endif %}
                                          "
                                          {% unless variant_for_size.available %}
                                            disabled
                                          {% endunless %}
                                          data-variant-id="{{ variant_for_size.id }}"
                                          data-available="{{ variant_for_size.available }}"
                                          data-product-id="{{ paired_product.id }}"
                                          data-option-value="{{ value | escape }}"
                                          data-section-id="{{ section.id }}"
                                          type="button"
                                        >
                                          {{ value }}
                                        </button>
                                      {% endfor %}
                                    </div>
                                  {% else %}
                                    <div></div>
                                  {% endif %}

                                  {% assign color_option = null %}
                                  {% for option in paired_product.options_with_values %}
                                    {% if option.name == 'Color'
                                      or option.name == 'Colour'
                                      or option.name == 'color'
                                      or option.name == 'colour'
                                    %}
                                      {% assign color_option = option %}
                                    {% endif %}
                                  {% endfor %}
                                  {% if color_option %}
                                    <div class="flex gap-2">
                                      {% for value in color_option.values %}
                                        {% assign variant_for_color = null %}
                                        {% for variant in paired_product.variants %}
                                          {% if variant.options contains value %}
                                            {% assign variant_for_color = variant %}
                                            {% break %}
                                          {% endif %}
                                        {% endfor %}
                                        <button
                                          class="outfit-color-swatch-{{ section.id }} rounded-full {% if forloop.first %}selected{% endif %}"
                                          title="{{ value }}"
                                          style="background-color:{{ variant_for_color.metafields.custom.color | default: value | downcase }}; width: 20px; height: 20px;"
                                          data-variant-id="{{ variant_for_color.id }}"
                                          data-available="{{ variant_for_color.available }}"
                                          data-product-id="{{ paired_product.id }}"
                                          data-option-value="{{ value | escape }}"
                                          data-section-id="{{ section.id }}"
                                          type="button"
                                        ></button>
                                      {% endfor %}
                                    </div>
                                  {% else %}
                                    <div></div>
                                  {% endif %}
                                </div>

                                <div class="mt-auto">
                                  <form method="post" action="/cart/add" class="w-full outfit-form-{{ section.id }}">
                                    <input
                                      type="hidden"
                                      name="id"
                                      value="{{ paired_product.first_available_variant.id }}"
                                    >
                                    <input type="hidden" name="quantity" value="1">
                                    <div
                                      class="outfit-add-to-cart-btn-{{ section.id }} w-full mb-3"
                                      data-product-id="{{ paired_product.id }}"
                                      data-section-id="{{ section.id }}"
                                    >
                                      {% if paired_product.available %}
                                        {% render 'primary-button',
                                          button_text: 'ADD TO CART',
                                          button_font_size: '20px',
                                          font_weight: 'var(--font-heading-weight)',
                                          button_line_height: '1.2',
                                          mobile_font_size: '18px',
                                          mobile_font_weight: 'var(--font-heading-weight)',
                                          mobile_line_height: '1.2',
                                          primary_class: 'outfit-primary-btn',
                                          button_type: 'submit',
                                          button_height: '50px'
                                        %}
                                      {% else %}
                                        {% render 'primary-button',
                                          button_text: 'SOLD OUT',
                                          button_font_size: '20px',
                                          font_weight: 'var(--font-heading-weight)',
                                          button_line_height: '1.2',
                                          mobile_font_size: '18px',
                                          mobile_font_weight: 'var(--font-heading-weight)',
                                          mobile_line_height: '1.2',
                                          primary_class: 'outfit-primary-btn',
                                          button_type: 'button',
                                          button_height: '50px',
                                          data_attributes: 'disabled'
                                        %}
                                      {% endif %}
                                    </div>
                                  </form>
                                  {% if section.settings.show_full_details_link %}
                                    <div class="outfit-inspiration-details block text-center">
                                      <a
                                        href="{{ paired_product.url }}"
                                      >
                                        {{ section.settings.redirect_link }}
                                      </a>
                                    </div>
                                  {% endif %}
                                </div>
                              </div>
                            </div>
                          </div>
                        </div>
                      {% endif %}
                    {% endfor %}
                  </div>
                {% endfor %}
              </div>
            </div>
          </div>
        </div>
      </div>

      <div class="outfit-navigation-arrows mobile-arrows">
        <button
          class="outfit-navigation-mobile flex items-center justify-center bg-color:var(--background) transition-opacity duration-300"
          id="outfit-slider-prev-mobile-{{ section.id }}"
          aria-label="Previous"
          type="button"
        >
          <svg
            class="w-[22px] h-[22px]"
            fill="none"
            stroke="{{ section.settings.border_color | default: '#000' }}"
            stroke-width="1"
            viewBox="0 0 24 24"
          >
            <path stroke-linecap="round" stroke-linejoin="round" d="M15 19l-7-7 7-7"/>
          </svg>
        </button>
        <button
          class="outfit-navigation-mobile flex items-center justify-center bg-color:var(--background) transition-opacity duration-300"
          id="outfit-slider-next-mobile-{{ section.id }}"
          aria-label="Next"
          type="button"
        >
          <svg
            class="w-[22px] h-[22px]"
            fill="none"
            stroke="{{ section.settings.border_color | default: '#000' }}"
            stroke-width="1"
            viewBox="0 0 24 24"
          >
            <path stroke-linecap="round" stroke-linejoin="round" d="M9 5l7 7-7 7"/>
          </svg>
        </button>
      </div>
    </div>
  </div>

  <div class="outfit-navigation-arrows desktop-arrows ">
    <button
      class="outfit-navigation flex items-center justify-center z-1 bg-color:var(--background)  transition-opacity duration-300"
      id="outfit-slider-next-{{ section.id }}"
      aria-label="Next"
      type="button"
      style="display: flex;"
    >
      <svg
        class="w-[22px] h-[22px]"
        fill="none"
        stroke="{{ section.settings.border_color | default: '#000' }}"
        stroke-width="1"
        viewBox="0 0 24 24"
      >
        <path stroke-linecap="round" stroke-linejoin="round" d="M9 5l7 7-7 7"/>
      </svg>
    </button>
  </div>
</div>
<style>
    .expanded-content{
    padding: 14px 14px 9px 14px;
  }
    .main-product-title,
  .paired-product-title,
  .outfit-expanded-title {
    display: -webkit-box;
    -webkit-line-clamp: 1;
    -webkit-box-orient: vertical;
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: normal;
  }
    .main-product-details{
      padding: 0 14px 8px 14px;
    }
    .main-product-card{
     border: 1px solid;
    }
    .paired-product-card{
    height: 180px;
    color: var(--text);
    padding: 14px;
    border: 1px solid;
  }
  .outfit-expanded-title{
    color: var(--text);
    font-size: 20px;
    width: 330px;
  }
    .outfit-paired{
     width: 390px;
     min-width: 390px;
     height: 580px;
    }
    .paired-product-title{
     color: var(--text);
     font-size: 14px;
    }
    .outfit-size{
      padding-bottom: 36px;
    }
    .main-product-title, .outfit-price{
      font-size: var(--t-b-3-size);
      font-weight: var(--t-b-3-weight);
      line-height: var(--t-b-3-line-height);
      color: var(--text);
    }
     .outfit-price{
     font-size: 16px;
     font-weight: 500;
  }
    .outfit-expanded-price{
      padding-bottom: 24px;
    }
    .outfit-wrapper{
      gap: 20px;
    }
    .outfit-section-title {
      font-size: var(--t-h-2-size);
      text-align: {{ section.settings.title_align | default: 'center' }};
      color: var(--header_text, var(--color-foreground));
      margin-bottom: 45px;
    }
    .outfit-sold-out {
      font-size: 13px;
      font-weight: 500;
      padding: 2px 4px;
      border-radius: 4px;
      color: var(--text);
      background-color: var(--background);
      border: 1px solid var(--border);
    }
    }

  .outfit-add-to-cart-btn-{{ section.id }} {
    display: flex !important;
    justify-content: center !important;
    align-items: center !important;
    width: 100% !important;
  }

  .outfit-primary-btn {
    width: 100% !important;
    max-width: 100% !important;
    margin: 0 auto !important;
    display: block !important;
  }

  .outfit-primary-btn:disabled {
    cursor: not-allowed !important;
  }

  .outfit-primary-btn:disabled .primary-slide-button-text {
    transform: none !important;
  }

  .outfit-primary-btn:disabled .primary-slide-button-text-hover {
    transform: none !important;
  }

  .outfit-primary-btn:disabled:hover .primary-slide-button-text,
  .outfit-primary-btn:disabled:focus .primary-slide-button-text {
    transform: none !important;
  }

  .outfit-primary-btn:disabled:hover .primary-slide-button-text-hover,
  .outfit-primary-btn:disabled:focus .primary-slide-button-text-hover {
    transform: none !important;
  }

  /* Disable all animations during loading state */
  .outfit-primary-btn.loading {
    pointer-events: none !important;
  }

  .outfit-primary-btn.loading .primary-slide-button-text {
    transform: none !important;
    transition: none !important;
  }

  .outfit-primary-btn.loading .primary-slide-button-text-hover {
    transform: none !important;
    transition: none !important;
  }

  .outfit-primary-btn.loading .primary-slide-button-arrow svg {
    transform: none !important;
    transition: none !important;
  }

  .outfit-primary-btn.loading:hover .primary-slide-button-text,
  .outfit-primary-btn.loading:focus .primary-slide-button-text {
    transform: none !important;
  }

  .outfit-primary-btn.loading:hover .primary-slide-button-text-hover,
  .outfit-primary-btn.loading:focus .primary-slide-button-text-hover {
    transform: none !important;
  }

  .outfit-primary-btn.loading:hover .primary-slide-button-arrow svg,
  .outfit-primary-btn.loading:focus .primary-slide-button-arrow svg {
    transform: none !important;
  }

  @media screen and (max-width: 750px) {
    .outfit-primary-btn {
      width: 100% !important;
      max-width: 100% !important;
    }
  }

  .outfit-expand-product-btn-{{ section.id }} {
    height: 15px;
    width: 15px;
    cursor: pointer;
    }
    .exapnded-product-img {
      height: 316px !important;
      width: 360px !important;
    }
    .outfit-navigation {
      width: 78px !important;
      height: 75px !important;
      cursor: pointer;
      position: static !important;
      display: flex;
    }
    .outfit-arrow {
      height: 15px;
      width: 15px;
      cursor: pointer;
      position: absolute;
      top: 63%;
      right: 14px;
    }
   .outfit-size-option-{{ section.id }}.selected {
      background-color: var(--hovered_button_label);
      color: var(--hovered_button_text_color);
    }
    .outfit-size-option-{{ section.id }} {
      transition: background 0.2s, color 0.2s;
      height: 28px;
      width: 28px;
      border-radius: 4px;
      font-size: 16px;
      font-weight: 500;
      background-color: var(--button);
      color: var(--button_label);
      border: 1px solid var(--border);
      position: relative;
    }
    .outfit-size-option-{{ section.id }}:disabled {
      cursor: not-allowed;
      border: 1px solid var(--border);
      background-color: var(--disabled_text);
      position: relative;
    }

    .outfit-size-option-{{ section.id }}:disabled::after {
      content: '';
      position: absolute;
      top: 50%;
      left: -1px;
      right: -1px;
      height: 1px;
      background-color: var(--text);
      transform: translateY(-50%) rotate(-45deg);
      pointer-events: none;
      z-index: 1;
    }
    .outfit-color-swatch-{{ section.id }} {
      transition: all 0.2s ease;
      cursor: pointer;
      border: 1px solid;
    }
    .outfit-color-swatch-{{ section.id }}.selected {
      border: 1px solid {{ section.settings.border_color | default: '#000' }} !important;
      box-shadow: 0 0 0 2px var(--background), 0 0 0 3px {{ section.settings.border_color | default: '#000' }} !important;
    }
    .outfit-color-swatch-{{ section.id }}:hover {
      transform: scale(1.1);
    }
    .main-product-card, .paired-product-card {
      border-radius: {{ section.settings.buttons_radius | default: 4 }}px ;
    }

    .paired-product-img {
      width: 140px !important;
      height: 150px !important;
      aspect-ratio: 1/1;
      object-fit: cover;
    }

    .paired-product-card.hidden-for-expand {
      display: none !important;
    }

    .expanded-product-card {
      border-radius: {{ section.settings.buttons_radius | default: 8 }}px;
      border: 1px solid;
      position: absolute;
      left: 0;
      right: 0;
      margin-left: auto;
      margin-right: auto;
      transform-origin: top center;
      transform: scaleY(0);
      opacity: 0;
      pointer-events: none;
      overflow: hidden;
      transition: transform 0.75s cubic-bezier(0.4, 0, 0.2, 1), opacity 0.65s cubic-bezier(0.4, 0, 0.2, 1);
      width: 100%;
      max-width: 440px;
      height: 560px !important;
      z-index: 2;
      color: var(--text);
    }

    .expanded-product-card.active {
      opacity: 1 !important;
      pointer-events: auto;
      transform: scaleY(1);
      margin: 0 !important;
      top: 0;
      left: 0;
      right: 0;
    }
    .outfit-main-img {
      height: 505px;
      width: 420px;
      padding: 14px 14px 9px 14px;
      aspect-ratio: 1/1;
      object-fit: cover;
    }

    .paired-product-slide {
      min-height: 100%;
    }

    .paired-product-slide[data-products='1'] {
      justify-content: center !important;
    }

    .paired-product-slide[data-products='2'] {
      justify-content: center !important;
    }

    .mobile-arrows {
      display: none;
      justify-content: center;
      gap: 16px;
    }

    .outfit-navigation-mobile {
      width: 50px !important;
      height: 50px !important;
      cursor: pointer;
    }

    .desktop-arrows {
      background: none;
      height: auto;
      position: static !important;
      margin: 18px;
    }

    .outfit-inspiration-details {
        font-size: 11px;
            padding: 6px;
            text-decoration: underline;
      }
       .paired-product-price{
      font-size: 14px;
    }

    @media (max-width: 767px) {
      .outfit-expand-product-btn-svg{
      height: 10px;
      width: 10px;
    }
      .main-product-card, .paired-product-card {
      border: 0.04rem solid !important;
    }
    .main-product-details {
      padding: 0px 8px 4px 8px !important;
      display: flex;
      flex-direction: column;
    }

  .paired-product-title{
    display: -webkit-box;
    -webkit-line-clamp: 3;
    -webkit-box-orient: vertical;
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: normal;
  }
       .main-product-title{
      font-size: 1rem !important;
      line-height: 1.2em !important;
      width: 170px;
      padding: 1px 0;
    }
    .outfit-price{
       font-size: 1rem !important;
       padding: 0;
    }
      .paired-product-price{
      display: none;
    }
       .outfit-wrapper{
      gap: 20px;
    }
      .outfit-section-title {
        font-size: 36px !important;
      }
      .outfit-sold-out {
      display: none;
      }
      .desktop-arrows {
        display: none !important;
      }

      .mobile-arrows {
        display: flex !important;
      }
      .paired-product-title,
      .outfit-expanded-title {
        font-size: 1rem !important;
        max-height: 4.5em;
      }
      .main-product-card h4,
      .paired-product-title,
      .outfit-expanded-title {
        word-break: break-word;
      }
      .outfit-expand-product-btn-{{ section.id }},
      .outfit-arrow {
        height: 10px !important;
        width: 10px !important;
      }
      .outfit-expand-product-btn-{{ section.id }}{
          position: absolute;
          bottom: 5px;
          right: 6px;
    }
      .outfit-inspiration-section {
        padding: 10px 0 !important;
      }
      .max-w-5xl {
        max-width: 100vw !important;
        padding: 0 !important;
      }
      .flex-row.lg\:flex-row {
        flex-direction: row !important;
        align-items: center !important;
        gap: 12px !important;
      }
      .main-product-card {
        width: 184px !important;
        min-width: 0 !important;
      }
      .outfit-main-img {
        height: 212px !important;
        width: 180px !important;
        padding: 8px !important;
      }
      .max-w-\[409px\] {
        max-width: 172px !important;
        margin-left: 8px !important;
        margin-right: 0 !important;
      }
      .paired-product-card,
      .expanded-product-card {
        max-width: 165px !important;
      }
      .paired-product-card {
        height: 75px !important;
        width: 160px !important;
        padding: 6px !important;
        gap: 4px !important;
      }
      .paired-product-img {
        width: 60px !important;
        height: 60px !important;
      }
      .expanded-product-card {
        max-width: 172px !important;
        height: 250px !important;
        left: 0;
        right: 0;
        margin-left: auto;
        margin-right: auto;
        transform-origin: top center;
        transform: scaleY(0);
        opacity: 0;
        pointer-events: none;
        overflow: hidden;
        transition: transform 0.75s cubic-bezier(0.4, 0, 0.2, 1), opacity 0.65s cubic-bezier(0.4, 0, 0.2, 1);
      }

      .w-\[140px\],
      .h-\[150px\] {
        width: 60px !important;
        height: 60px !important;
      }
      .w-\[200px\] {
        width: 80px !important;
      }
      .h-\[250px\] {
        height: 90px !important;
      }
      .p-6 {
        padding: 8px !important;
      }
      .mb-4 {
        margin-bottom: 6px !important;
      }

     .outfit-paired {
        width: 165px !important;
        min-width: 0 !important;
        height: 250px !important;
      }
    }
    .line-through {
      text-decoration: line-through !important;
    }
    .outfit-navigation,
    .outfit-navigation-mobile,
    .main-product-card,
    .paired-product-card,
    .expanded-product-card,
    .outfit-add-to-cart-btn-{{ section.id }},
    .outfit-size-option-{{ section.id }},
    .outfit-color-swatch-{{ section.id }} {
      border-color: {{ section.settings.border_color | default: '#000' }} !important;
    }
</style>
<script>
  (function () {
    'use strict';

    // Create namespaced scope for this section
    const sectionId = '{{ section.id }}';
    const sectionScope = `outfit-section-${sectionId}`;

    document.addEventListener('DOMContentLoaded', function () {
      const track = document.getElementById(`outfit-slider-track-${sectionId}`);
      const prev = document.getElementById(`outfit-slider-prev-${sectionId}`);
      const next = document.getElementById(`outfit-slider-next-${sectionId}`);
      const prevMobile = document.getElementById(`outfit-slider-prev-mobile-${sectionId}`);
      const nextMobile = document.getElementById(`outfit-slider-next-mobile-${sectionId}`);
      const slides = track ? Array.from(track.getElementsByClassName('paired-product-slide')) : [];
      let currentSlide = 0;
      let expandedProductId = null;

      function showSlide(index) {
        slides.forEach((slide, idx) => {
          if (idx === index) {
            slide.style.display = 'flex';
            slide.style.opacity = '1';
          } else {
            slide.style.display = 'none';
            slide.style.opacity = '0';
          }
        });
      }

      function updateArrows() {
        if (prev && next) {
          if (slides.length <= 1 || expandedProductId) {
            prev.style.opacity = '0.3';
            next.style.opacity = '0.3';
            prev.style.pointerEvents = 'none';
            next.style.pointerEvents = 'none';
          } else {
            prev.style.pointerEvents = 'auto';
            next.style.pointerEvents = 'auto';
            prev.style.opacity = currentSlide === 0 ? '0.3' : '1';
            next.style.opacity = currentSlide >= slides.length - 1 ? '0.3' : '1';
          }
        }
        if (prevMobile && nextMobile) {
          if (slides.length <= 1 || expandedProductId) {
            prevMobile.style.opacity = '0.3';
            nextMobile.style.opacity = '0.3';
            prevMobile.style.pointerEvents = 'none';
            nextMobile.style.pointerEvents = 'none';
          } else {
            prevMobile.style.pointerEvents = 'auto';
            nextMobile.style.pointerEvents = 'auto';
            prevMobile.style.opacity = currentSlide === 0 ? '0.3' : '1';
            nextMobile.style.opacity = currentSlide >= slides.length - 1 ? '0.3' : '1';
          }
        }
      }

      function updateSlider() {
        showSlide(currentSlide);
        updateArrows();
      }

      function expandProduct(productId) {
        const currentSlideElement = slides[currentSlide];
        const compactCard = currentSlideElement.querySelector(
          `[data-product-id="${productId}"][data-section-id="${sectionId}"].paired-product-card`
        );
        const expandedCard = currentSlideElement.querySelector(
          `[data-product-id="${productId}"][data-section-id="${sectionId}"].expanded-product-card`
        );

        if (compactCard && expandedCard) {
          currentSlideElement
            .querySelectorAll(`[data-section-id="${sectionId}"].paired-product-card`)
            .forEach((card) => {
              card.classList.add('hidden-for-expand');
            });
          expandedCard.classList.add('active');

          expandedProductId = productId;
          updateArrows();
        }
      }

      function collapseProduct(productId) {
        const currentSlideElement = slides[currentSlide];
        const expandedCard = currentSlideElement.querySelector(
          `[data-product-id="${productId}"][data-section-id="${sectionId}"].expanded-product-card`
        );

        if (expandedCard) {
          expandedCard.classList.remove('active');

          currentSlideElement
            .querySelectorAll(`[data-section-id="${sectionId}"].paired-product-card`)
            .forEach((card) => {
              card.classList.remove('hidden-for-expand');
            });

          expandedProductId = null;
          updateArrows();
        }
      }

      if (slides.length > 0) {
        showSlide(0);
        updateArrows();

        // Section-specific event delegation
        document.addEventListener('click', function (e) {
          // Check if click is within this section
          const targetSection = e.target.closest('[data-section-id]');
          if (!targetSection || targetSection.getAttribute('data-section-id') !== sectionId) {
            return;
          }

          if (e.target.closest(`.outfit-expand-product-btn-${sectionId}`)) {
            e.preventDefault();
            const btn = e.target.closest(`.outfit-expand-product-btn-${sectionId}`);
            const productId = btn.getAttribute('data-product-id');

            if (window.innerWidth <= 767) {
              const productCard = btn.closest('.paired-product-card');
              const productUrl = productCard.getAttribute('data-product-url');
              if (productUrl) {
                window.location.href = productUrl;
                return;
              }
            }

            expandProduct(productId);
          }

          if (e.target.closest(`.outfit-close-expanded-btn-${sectionId}`)) {
            e.preventDefault();
            const btn = e.target.closest(`.outfit-close-expanded-btn-${sectionId}`);
            const productId = btn.getAttribute('data-product-id');
            collapseProduct(productId);
          }
        });

        prev?.addEventListener('click', (e) => {
          e.preventDefault();
          if (currentSlide > 0 && !expandedProductId) {
            currentSlide--;
            updateSlider();
          }
        });

        next?.addEventListener('click', (e) => {
          e.preventDefault();
          if (currentSlide < slides.length - 1 && !expandedProductId) {
            currentSlide++;
            updateSlider();
          }
        });

        prevMobile?.addEventListener('click', (e) => {
          e.preventDefault();
          if (currentSlide > 0 && !expandedProductId) {
            currentSlide--;
            updateSlider();
          }
        });

        nextMobile?.addEventListener('click', (e) => {
          e.preventDefault();
          if (currentSlide < slides.length - 1 && !expandedProductId) {
            currentSlide++;
            updateSlider();
          }
        });
      } else {
        if (prev) prev.style.display = 'none';
        if (next) next.style.display = 'none';
        if (prevMobile) prevMobile.style.display = 'none';
        if (nextMobile) nextMobile.style.display = 'none';
      }

      console.log(`Outfit section ${sectionId} - Total slides found:`, slides.length);
    });

    function addToCart(variantId, quantity) {
      console.log('Adding to cart:', variantId, quantity);

      const formData = {
        items: [
          {
            id: variantId,
            quantity: quantity,
          },
        ],
      };

      fetch(window.routes?.cart_add_url || '/cart/add.js', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(formData),
      })
        .then((response) => {
          console.log('Response status:', response.status); // Debug log

          if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
          }

          // Check if response is actually JSON
          const contentType = response.headers.get('content-type');
          if (!contentType || !contentType.includes('application/json')) {
            console.warn('Response is not JSON, treating as success');
            // If it's not JSON but status is OK, treat as success
            return { success: true };
          }

          return response.json();
        })
        .then((data) => {
          console.log('Cart add success:', data); // Debug log

          // Update cart count immediately
          updateCartCount();

          // Immediately refresh cart drawer and open it
          refreshCartDrawer()
            .then(() => {
              openCartDrawer();
            })
            .catch((error) => {
              console.error('Cart drawer refresh failed:', error);
              // Fallback: just update count and open
              updateCartCount();
              openCartDrawer();
            });
        })
        .catch((error) => {
          console.error('Error adding to cart:', error);

          // Check if the error is likely a parsing issue rather than an actual cart error
          if (error.message.includes('Unexpected') || error.message.includes('JSON')) {
            console.log('Likely JSON parsing error, but cart add may have succeeded');

            // Still try to update cart count as the add might have worked
            setTimeout(() => {
              updateCartCount();
            }, 500);

            showNotification('Item may have been added - please check cart', 'warning');
            return;
          }

          // Still try to update cart count even if there was an error
          setTimeout(() => {
            updateCartCount();
          }, 1000);

          showNotification('Error adding to cart', 'error');
        });
    }

    // Function to refresh cart drawer content
    function refreshCartDrawer() {
      return fetch(`${window.location.pathname}?section_id=cart-drawer`)
        .then((response) => {
          if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
          }
          return response.text();
        })
        .then((responseText) => {
          console.log('Cart drawer refreshed');

          const html = new DOMParser().parseFromString(responseText, 'text/html');

          // Update cart drawer content
          const cartDrawerElement = document.querySelector('cart-drawer');
          const newCartDrawerContent = html.querySelector('cart-drawer');

          if (cartDrawerElement && newCartDrawerContent) {
            // Store the current state
            const isActive = cartDrawerElement.classList.contains('active');
            const isAnimating = cartDrawerElement.classList.contains('animate');

            // Replace the content
            cartDrawerElement.innerHTML = newCartDrawerContent.innerHTML;

            // Restore necessary classes
            if (isActive) cartDrawerElement.classList.add('active');
            if (isAnimating) cartDrawerElement.classList.add('animate');

            // Remove empty state if it has items
            if (!newCartDrawerContent.classList.contains('is-empty')) {
              cartDrawerElement.classList.remove('is-empty');
            }
          }

          // Also update cart icon bubble
          const cartIconBubble = document.querySelector('#cart-icon-bubble');
          const newCartIconBubble = html.querySelector('#cart-icon-bubble');

          if (cartIconBubble && newCartIconBubble) {
            cartIconBubble.innerHTML = newCartIconBubble.innerHTML;
          }

          // Update cart count
          updateCartCount();

          // Re-initialize cart drawer event listeners
          initializeCartDrawerEventListeners();
        })
        .catch((error) => {
          console.error('Error refreshing cart drawer:', error);
          return updateCartCount();
        });
    }

    function initializeCartDrawerEventListeners() {
      console.log('Re-initializing cart drawer event listeners');

      // Re-initialize overlay click handler
      const overlay = document.querySelector('#CartDrawer-Overlay');
      if (overlay) {
        overlay.addEventListener('click', function () {
          const cartDrawer = document.querySelector('cart-drawer');
          if (cartDrawer && typeof cartDrawer.close === 'function') {
            cartDrawer.close();
          }
        });
      }

      // Re-initialize close button handlers
      const closeButtons = document.querySelectorAll('.drawer__close, .drawer__close2');
      closeButtons.forEach((button) => {
        button.addEventListener('click', function () {
          const cartDrawer = this.closest('cart-drawer');
          if (cartDrawer && typeof cartDrawer.close === 'function') {
            cartDrawer.close();
          }
        });
      });

      // Re-initialize quantity input handlers if they exist
      const quantityInputs = document.querySelectorAll('.cart-quantity input[type="number"]');
      quantityInputs.forEach((input) => {
        input.removeEventListener('change', handleQuantityChange);
        input.addEventListener('change', handleQuantityChange);
      });

      // Re-initialize remove buttons
      const removeButtons = document.querySelectorAll('cart-remove-button button');
      removeButtons.forEach((button) => {
        if (!button.hasAttribute('data-listener-added')) {
          button.setAttribute('data-listener-added', 'true');
          button.addEventListener('click', function (e) {
            e.preventDefault();
            const cartItems = this.closest('cart-items') || this.closest('cart-drawer-items');
            if (cartItems && cartItems.updateQuantity) {
              const index = this.closest('cart-remove-button').dataset.index;
              cartItems.updateQuantity(index, 0, e);
            }
          });
        }
      });
    }

    function handleQuantityChange(event) {
      const cartItems = event.target.closest('cart-items') || event.target.closest('cart-drawer-items');
      if (cartItems && cartItems.validateQuantity) {
        cartItems.validateQuantity(event);
      }
    }

    function openCartDrawer() {
      const cartIcon = document.querySelector('#cart-icon-bubble');
      if (cartIcon) {
        cartIcon.click();
        return;
      }
      const cartDrawer = document.querySelector('cart-drawer');
      if (cartDrawer && typeof cartDrawer.open === 'function') {
        cartDrawer.open();
      } else if (cartDrawer) {
        cartDrawer.classList.add('animate', 'active');
        document.body.classList.add('overflow-hidden');
      } else {
        window.location.href = '/cart';
      }
    }

    function updateCartCount() {
      fetch(window.routes?.cart_url || '/cart.js')
        .then((res) => {
          if (!res.ok) {
            throw new Error(`HTTP error! status: ${res.status}`);
          }
          return res.json();
        })
        .then((cart) => {
          console.log('Cart updated:', cart);
          const cartCountSelectors = [
            '.cart-count',
            '[data-cart-count]',
            '.cart-count-bubble',
            '#cart-icon-bubble .visually-hidden',
            '.cart-item-count',
            '.js-cart-count',
            '.site-header__cart-count',
            '.cart-count-number',
            '[data-header-cart-count]',
          ];
          cartCountSelectors.forEach((selector) => {
            const elements = document.querySelectorAll(selector);
            if (elements.length > 0) {
              elements.forEach((el) => {
                el.textContent = cart.item_count;
                el.classList.remove('hidden');

                if (el.querySelector('span')) {
                  el.querySelector('span').textContent = cart.item_count;
                }
              });
            }
          });

          const cartIcons = document.querySelectorAll('.cart-icon, [data-cart-icon]');
          cartIcons.forEach((icon) => {
            if (icon) {
              icon.setAttribute('data-count', cart.item_count);
            }
          });

          document.dispatchEvent(
            new CustomEvent('cart:updated', {
              detail: { cart: cart },
            })
          );
        })
        .catch((error) => {
          console.error('Error updating cart count:', error);
        });
    }

    function showNotification(message, type = 'success') {
      const notification = document.createElement('div');
      const bgColor = type === 'success' ? 'bg-green-500' : type === 'warning' ? 'bg-yellow-500' : 'bg-red-500';

      notification.className = `fixed bottom-4 right-4 ${bgColor} text-white px-6 py-3 rounded-lg z-50 opacity-0 transition-opacity duration-300`;
      notification.textContent = message;
      document.body.appendChild(notification);

      setTimeout(() => (notification.style.opacity = '1'), 10);
      setTimeout(
        () => {
          notification.style.opacity = '0';
          setTimeout(() => notification.remove(), 300);
        },
        type === 'warning' ? 3000 : 2000
      );
    }

    // Enhanced form submission with loading feedback
    document.addEventListener('submit', function (e) {
      const form = e.target;
      if (!form.classList.contains(`outfit-form-${sectionId}`)) return;

      const targetSection = form.closest('[data-section-id]');
      if (!targetSection || targetSection.getAttribute('data-section-id') !== sectionId) {
        return;
      }

      // Prevent default form submission to use AJAX
      e.preventDefault();

      const buttonContainer = form.querySelector(`.outfit-add-to-cart-btn-${sectionId}`);
      const button = buttonContainer ? buttonContainer.querySelector('button') : null;
      const btnText = button ? button.querySelector('.primary-slide-button-text') : null;
      const btnTextHover = button ? button.querySelector('.primary-slide-button-text-hover') : null;

      if (!button || !btnText) return;

      // Store the arrow HTML before updating text
      const arrowHTML = btnText ? btnText.querySelector('.primary-slide-button-arrow')?.outerHTML || '' : '';
      const arrowHoverHTML = btnTextHover
        ? btnTextHover.querySelector('.primary-slide-button-arrow')?.outerHTML || ''
        : '';

      // Show loading state
      button.disabled = true;
      button.classList.add('loading');
      if (btnText) {
        btnText.innerHTML = 'ADDING...' + arrowHTML;
      }
      if (btnTextHover) {
        btnTextHover.innerHTML = 'ADDING...' + arrowHoverHTML;
      }

      // Get form data
      const formData = new FormData(form);
      const variantId = formData.get('id');
      const quantity = parseInt(formData.get('quantity')) || 1;

      // Add to cart with AJAX
      addToCart(variantId, quantity);

      // Reset button state after a short delay
      setTimeout(() => {
        button.disabled = false;
        button.classList.remove('loading');
        if (btnText) {
          btnText.innerHTML = 'ADD TO CART' + arrowHTML;
        }
        if (btnTextHover) {
          btnTextHover.innerHTML = 'ADD TO CART' + arrowHoverHTML;
        }
      }, 1000);
    });

    document.addEventListener('click', function (e) {
      const targetSection = e.target.closest('[data-section-id]');
      if (!targetSection || targetSection.getAttribute('data-section-id') !== sectionId) {
        return;
      }

      if (e.target.classList.contains(`outfit-size-option-${sectionId}`) && !e.target.disabled) {
        const selectedBtn = e.target;
        const expandedCard = selectedBtn.closest(`[data-section-id="${sectionId}"].expanded-product-card`);

        if (expandedCard) {
          expandedCard.querySelectorAll(`.outfit-size-option-${sectionId}`).forEach((option) => {
            option.classList.remove('selected');
          });
          selectedBtn.classList.add('selected');
          const form = expandedCard.querySelector(`.outfit-form-${sectionId}`);
          if (form) {
            const variantId = selectedBtn.getAttribute('data-variant-id');
            const isAvailable = selectedBtn.getAttribute('data-available') === 'true';
            form.querySelector('input[name="id"]').value = variantId;

            // Update button state based on variant availability
            const buttonContainer = form.querySelector(`.outfit-add-to-cart-btn-${sectionId}`);
            const button = buttonContainer ? buttonContainer.querySelector('button') : null;
            if (button) {
              if (isAvailable) {
                button.disabled = false;
                button.removeAttribute('disabled');
                // Update button text to ADD TO CART
                const btnText = button.querySelector('.primary-slide-button-text');
                const btnTextHover = button.querySelector('.primary-slide-button-text-hover');
                if (btnText && btnTextHover) {
                  const arrowHTML = btnText.querySelector('.primary-slide-button-arrow')?.outerHTML || '';
                  btnText.innerHTML = 'ADD TO CART' + arrowHTML;
                  btnTextHover.innerHTML = 'ADD TO CART' + arrowHTML;
                }
              } else {
                button.disabled = true;
                button.setAttribute('disabled', 'disabled');
                // Update button text to SOLD OUT
                const btnText = button.querySelector('.primary-slide-button-text');
                const btnTextHover = button.querySelector('.primary-slide-button-text-hover');
                if (btnText && btnTextHover) {
                  const arrowHTML = btnText.querySelector('.primary-slide-button-arrow')?.outerHTML || '';
                  btnText.innerHTML = 'SOLD OUT' + arrowHTML;
                  btnTextHover.innerHTML = 'SOLD OUT' + arrowHTML;
                }
              }
            }
          }
        }
      }

      if (e.target.classList.contains(`outfit-color-swatch-${sectionId}`) && !e.target.disabled) {
        const selectedSwatch = e.target;
        const expandedCard = selectedSwatch.closest(`[data-section-id="${sectionId}"].expanded-product-card`);

        if (expandedCard) {
          expandedCard.querySelectorAll(`.outfit-color-swatch-${sectionId}`).forEach((swatch) => {
            swatch.classList.remove('selected');
          });
          selectedSwatch.classList.add('selected');
          const form = expandedCard.querySelector(`.outfit-form-${sectionId}`);
          if (form) {
            const variantId = selectedSwatch.getAttribute('data-variant-id');
            const isAvailable = selectedSwatch.getAttribute('data-available') === 'true';
            form.querySelector('input[name="id"]').value = variantId;

            // Update button state based on variant availability
            const buttonContainer = form.querySelector(`.outfit-add-to-cart-btn-${sectionId}`);
            const button = buttonContainer ? buttonContainer.querySelector('button') : null;
            if (button) {
              if (isAvailable) {
                button.disabled = false;
                button.removeAttribute('disabled');
                // Update button text to ADD TO CART
                const btnText = button.querySelector('.primary-slide-button-text');
                const btnTextHover = button.querySelector('.primary-slide-button-text-hover');
                if (btnText && btnTextHover) {
                  const arrowHTML = btnText.querySelector('.primary-slide-button-arrow')?.outerHTML || '';
                  btnText.innerHTML = 'ADD TO CART' + arrowHTML;
                  btnTextHover.innerHTML = 'ADD TO CART' + arrowHTML;
                }
              } else {
                button.disabled = true;
                button.setAttribute('disabled', 'disabled');
                // Update button text to SOLD OUT
                const btnText = button.querySelector('.primary-slide-button-text');
                const btnTextHover = button.querySelector('.primary-slide-button-text-hover');
                if (btnText && btnTextHover) {
                  const arrowHTML = btnText.querySelector('.primary-slide-button-arrow')?.outerHTML || '';
                  btnText.innerHTML = 'SOLD OUT' + arrowHTML;
                  btnTextHover.innerHTML = 'SOLD OUT' + arrowHTML;
                }
              }
            }
          }
        }
      }
    });
  })();
</script>

{% schema %}
{
  "name": "Outfit Inspiration",
  "tag": "section",
  "enabled_on": { "templates": ["product"] },
  "settings": [
    {
      "type": "text",
      "id": "title",
      "label": "Section Title",
      "default": "Outfit Inspiration"
    },
    {
      "type": "select",
      "id": "title_align",
      "label": "Section Title Alignment",
      "options": [
        { "value": "left", "label": "Left" },
        { "value": "center", "label": "Center" },
        { "value": "right", "label": "Right" }
      ],
      "default": "center"
    },
    {
      "type": "text",
      "id": "redirect_link",
      "label": "Redirect Link",
      "default": "Show Full Details"
    },
    {
      "type": "checkbox",
      "id": "show_full_details_link",
      "label": "Show 'Show full details' link below Add to Cart",
      "default": false
    },
    {
      "type": "color_scheme",
      "id": "color_scheme",
      "label": "t:sections.all.colors.label",
      "default": "scheme-1"
    },
    {
      "type": "color",
      "id": "border_color",
      "label": "Border Color",
      "default": "#000000"
    },
    {
      "type": "range",
      "id": "buttons_radius",
      "label": "Border Radius (px)",
      "min": 0,
      "max": 25,
      "step": 1,
      "default": 4
    }
  ],
  "blocks": [
    {
      "type": "product_group",
      "name": "Paired Products",
      "settings": [
        {
          "type": "product",
          "id": "product_1",
          "label": "Product 1"
        },
        {
          "type": "product",
          "id": "product_2",
          "label": "Product 2"
        },
        {
          "type": "product",
          "id": "product_3",
          "label": "Product 3"
        }
      ]
    }
  ],
  "presets": [
    {
      "name": "Outfit Inspiration"
    }
  ]
}
{% endschema %}
