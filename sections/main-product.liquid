<!-- Desktop view -->
<section class="product-section section-{{ section.id }}-padding hidden lg:!flex lg:flex-row gap-4 lg:gap-8 px-4 py-8">
  {%- comment -%} Left: Image Gallery {%- endcomment -%}
  <div class="product-gallery w-1/2">
    <div
      class="gallery-wrapper sticky top-[80px] h-[calc(100vh-80px)]"
      style="max-height: calc(100vh - 70px); overflow-y: auto; position: sticky; top: 70px;"
    >
      <div class="gallery-track w-full h-full relative" data-gallery-track>
        {%- if product.media.size > 0 -%}
          {%- for media in product.media -%}
            <div
              class="gallery-item absolute inset-0 w-full h-full {% if forloop.first %}is-active{% endif %}"
              data-index="{{ forloop.index0 }}"
            >
              <img
                src="{{ media | image_url: width: 1200 }}"
                alt="{{ media.alt | escape }}"
                class="w-full h-full object-cover"
                loading="{% if forloop.first %}eager{% else %}lazy{% endif %}"
                width="full"
                height="full"
              >
            </div>
          {%- endfor -%}
        {%- endif -%}

        <!-- Add vertical image strip -->
        <div class="image-strip-container opacity-0">
          <div class="image-strip">
            {%- for media in product.media -%}
              <div
                class="strip-image-wrapper {% if forloop.first %}active{% endif %}"
                data-strip-index="{{ forloop.index0 }}"
              >
                <img
                  src="{{ media | image_url: width: 150 }}"
                  alt="{{ media.alt | escape }}"
                  class="strip-image"
                  loading="lazy"
                  width="150"
                  height="full"
                >
              </div>
            {%- endfor -%}
          </div>
        </div>
      </div>
    </div>
  </div>

  {%- comment -%} Right: Product Details {%- endcomment -%}
  <div class="product-details w-1/2 mx-2">
    <div
      class="details-inner sticky top-[80px] flex flex-col"
      style="height: calc(100vh - 70px); overflow-y: auto; position: sticky; top: 70px;"
    >
      {%- comment -%} Header {%- endcomment -%}
      <div class="product-header w-[80%] space-y-8">
        <div class="header-top flex flex-col gap-4">
          <div class="product-status flex items-center gap-4">
            {% if product.available != true %}
              <span class="inline-flex items-center px-3 py-1 text-[14px] tracking-wider bg-black text-white uppercase rounded"
                >Sold Out</span
              >
            {% endif %}
          </div>
          <h1 class="text-[42px] font-bold">{{ product.title }}</h1>

          {%- comment -%} Product Variant {%- endcomment -%}
          <div class="product-variants my-4">
            <div class="flex items-center gap-2">
              <span class="inline-block text-[14px] font-medium">SELECT COLOR:</span>
              {%- assign first_color = product.options_with_values | where: 'name', 'Color' | first -%}
              <span class="active-color text-[14px]" data-active-color>
                {{- first_color.values | first -}}
              </span>
            </div>
            <div class="color-options flex gap-3 p-2">
              {%- for option in product.options_with_values -%}
                {%- if option.name == 'Color' -%}
                  {%- for value in option.values -%}
                    <button
                      type="button"
                      class="color-swatch w-8 h-8 rounded-full hover:scale-110 transition-transform focus:outline-none"
                      style="background-color: {{ value | handleize }};"
                      data-option-value="{{ value | escape }}"
                    >
                      <span class="sr-only">{{ value }}</span>
                    </button>
                  {%- endfor -%}
                {%- endif -%}
              {%- endfor -%}
            </div>
          </div>
        </div>
      </div>

      {% comment %} tabs  {% endcomment %}
      <div class="product-tabs w-[80%] flex-1 overflow-hidden">
        <!-- Tab Navigation -->
        <div class="tabs-nav flex justify-evenly space-x-3 h-auto mt-2 w-full">
          {%- assign tab_index = 0 -%}
          {%- for block in section.blocks -%}
            {% if block.type == 'tab_description' or block.type == 'tab_details' or block.type == 'tab_sizing' %}
              {%- assign tab_index = tab_index | plus: 1 -%}
              <button
                class="
                  tab-btn text-[16px] text-left border-t-2 mr-3 transition-colors duration-300 hover:text-black hover:border-black w-full
                  {% if tab_index == 1 %}
                    text-black border-black
                  {% else %}
                    text-gray-600 border-gray-400
                  {% endif %}
                "
                data-tab="tab-{{ block.id }}"
                {{ block.shopify_attributes }}
              >
                {{ block.settings.title }}
              </button>
            {% endif %}
          {%- endfor -%}
        </div>

        <!-- Tab Content -->
        <div class="tab-content mt-6 overflow-y-auto">
          {% for block in section.blocks %}
            <div
              class="tab-pane {% if forloop.first %}active{% else %}hidden{% endif %} tracking-normal leading-none text-[14px]"
              data-content="tab-{{ block.id }}"
            >
              {% case block.type %}
                {% when 'tab_description' %}
                  {{ product.description }}

                {% when 'tab_details' %}
                  {% if block.settings.metafield_namespace_key != blank %}
                    <div class="prose prose-lg max-w-none">
                      {{ block.settings.metafield_namespace_key }}
                    </div>
                  {% else %}
                    <p class="text-gray-500">No details available for this product.</p>
                  {% endif %}

                {% when 'tab_sizing' %}
                  <button
                    id="open-size-chart"
                    class="bg-black text-white px-4 py-2 rounded hover:bg-gray-900 transition-colors"
                  >
                    Size Chart
                  </button>

                  <div
                    id="size-chart-drawer"
                    class="fixed top-0 right-0 h-full bg-white shadow-lg transform translate-x-full hidden transition-transform duration-300 overflow-y-auto"
                    style="width: 40vw; z-index: 1000;"
                    aria-hidden="true"
                  >
                    <div class="flex justify-between items-center p-4 border-b">
                      <h2 class="text-xl font-semibold">Size Chart</h2>
                      <button
                        id="close-size-chart"
                        class="text-gray-500 hover:text-black transition-colors"
                        aria-label="Close size chart"
                      >
                        âœ•
                      </button>
                    </div>
                    <div class="p-4">
                      {% if block.settings.size_chart_page != blank %}
                        <div class="prose max-w-none">
                          {{ block.settings.size_chart_page.content }}
                        </div>
                      {% else %}
                        <p class="text-gray-500">No size guide page selected.</p>
                      {% endif %}
                    </div>
                  </div>
                  <div id="size-chart-backdrop" class="fixed inset-0 bg-black/60 hidden z-[999]">&nbsp;</div>
              {% endcase %}
            </div>
          {% endfor %}
        </div>
      </div>

      {%- comment -%} bottom utility {%- endcomment -%}
      {%- assign option_names = product.options_with_values | map: 'name' -%}
      {%- assign size_index = 0 -%}
      {%- for name in option_names -%}
        {%- if name == 'Size' -%}
          {%- assign size_index = forloop.index -%}
        {%- endif -%}
      {%- endfor -%}

      <div
        class="size-price-selector flex flex-col gap-6 text-[14px]"
      >
        <!-- DELIVERY SECTION -->
        {%- for block in section.blocks -%}
          {%- if block.type == 'delivery_address' -%}
            <div class="flex justify-between items-start border-b border-gray-400 py-4" {{ block.shopify_attributes }}>
              {% if customer and customer.default_address %}
                <!-- Logged-in: Show saved address -->
                <div>
                  <div class="font-semibold uppercase">DELIVER TO</div>
                  <div class="text-sm leading-relaxed">
                    {{ customer.default_address | format_address }}
                  </div>
                </div>
                <a href="/account/addresses" class="border px-3 py-1 text-xs font-medium rounded hover:bg-gray-100">
                  CHANGE
                </a>
              {% else %}
                <!-- Guest: Show login prompt -->
                <div>
                  <div class="font-semibold uppercase">DELIVER TO</div>
                  <div class="text-[14px] text-gray-600">
                    Please <a href="/account/login" class="underline text-blue-600">log in</a> to set your delivery
                    address.
                  </div>
                </div>
                <a
                  href="#"
                  class="border border-black px-2 py-1 text-[14px] font-medium rounded transition-colors duration-200 "
                  style="background-color: var(--button); color: var(--button_label);"
                  onmouseenter="this.style.backgroundColor='var(--hover)'"
                  onmouseleave="this.style.backgroundColor='var(--button)'"
                  aria-label="Change delivery address"
                >
                  CHANGE
                </a>
              {% endif %}
            </div>
          {%- endif -%}
        {%- endfor -%}

        <!-- QUANTITY SELECTOR -->
        {%- for block in section.blocks -%}
          {%- if block.type == 'quantity_selector' -%}
            <div class="flex justify-between items-center border-b border-gray-400 pb-4" {{ block.shopify_attributes }}>
              <span class="uppercase font-semibold">QUANTITY SELECTOR</span>
              <div class="flex items-center border rounded">
                <button
                  type="button"
                  id="decreaseQty"
                  class="px-3 py-1 text-lg hover:bg-gray-100"
                  aria-label="Decrease quantity"
                >
                  -
                </button>
                <span id="quantityDisplay" class="px-3">1</span>
                <input type="hidden" name="quantity" id="quantityInput" value="1">
                <button
                  type="button"
                  id="increaseQty"
                  class="px-3 py-1 text-lg hover:bg-gray-100"
                  aria-label="Increase quantity"
                >
                  +
                </button>
              </div>
            </div>
          {%- endif -%}
        {%- endfor -%}

        <!-- SIZE SELECTOR -->
        <div class="flex justify-between  items-center gap-2">
          <span class="uppercase font-semibold">SELECT SIZE</span>
          <div class="flex gap-2 flex-wrap">
            {%- assign size_options = product.options_with_values | where: 'name', 'Size' | first -%}
            {%- for value in size_options.values -%}
              {%- assign is_available = false -%}
              {%- for variant in product.variants -%}
                {% assign size_option = 'option' | append: size_index %}
                {% if variant[size_option] == value and variant.available %}
                  {%- assign is_available = true -%}
                  {% break %}
                {% endif %}
              {%- endfor -%}

              <button
                type="button"
                class="
                  size-btn relative px-3 h-10 min-w-[2.5rem] flex items-center justify-center border rounded font-semibold
                  {% if forloop.first and is_available %}bg-black text-white{% endif %}
                  {% unless is_available %}opacity-50 cursor-not-allowed bg-gray-200{% endunless %}
                "
                data-value="{{ value | escape }}"
                {% unless is_available %}
                  disabled aria-disabled="true"
                {% endunless %}
                aria-label="Size {{ value }}{% unless is_available %} - Sold out{% endunless %}"
              >
                <span class="label">{{ value }}</span>
              </button>
            {%- endfor -%}
          </div>
        </div>

        <!-- PRICE + ACTIONS -->
        <div class="flex justify-between items-center border-t pt-4" style="padding-top: 1rem;">
          <!-- Price + Compare at Price -->
          <div class="text-[18px] font-bold flex flex-col">
            <div class="flex items-center gap-2">
              <span>{{ product.price | money }}</span>
              {% if product.compare_at_price > product.price %}
                <span class="text-black text-[14px]">|</span>
                <span class="line-through text-gray-500">{{ product.compare_at_price | money }}</span>
              {% endif %}
            </div>

            {% if product.compare_at_price > product.price %}
              <div class="text-[14px] text-red-600 font-medium">
                Save {{ product.compare_at_price | minus: product.price | money }} (
                {{
                  product.compare_at_price
                  | minus: product.price
                  | times: 100
                  | divided_by: product.compare_at_price
                -}}
                % off)
              </div>
            {% endif %}
          </div>

          <!-- Buy Now + Add to Cart -->
          <div class="flex gap-2">
            {% if product.available %}
              <!-- BUY IT NOW button -->
              <button
                class="bg-black text-white text-4xl px-4 py-2 rounded hover:bg-gray-900"
                type="button"
                aria-label="Buy it now"
              >
                BUY IT NOW
              </button>

              <!-- ADD TO CART form -->
              <form method="post" action="/cart/add">
                <input type="hidden" name="id" value="{{ product.variants.first.id }}">
                <button
                  class="text-white text-4xl px-4 py-2 rounded group flex items-center justify-between gap-2"
                  style="background-color: var(--button); color: var(--button_label);"
                  onmouseenter="this.style.backgroundColor='var(--hover)'"
                  onmouseleave="this.style.backgroundColor='var(--button)'"
                  aria-label="Add to cart"
                  type="submit"
                >
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    class="w-6 h-6 object-contain transition-transform duration-300 group-hover:-rotate-90 mx-1"
                    fill="none"
                    viewBox="0 0 9 9"
                    stroke-width="1.5"
                    stroke="currentColor"
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    aria-hidden="true"
                  >
                    <path d="M1.1875 7.7334H7.6599M7.6599 7.7334V1.261M7.6599 7.7334L1.1875 1.261"/>
                  </svg>
                  ADD TO CART
                </button>
              </form>
            {% else %}
              <!-- SOLD OUT button -->
              <button
                class="bg-gray-400 text-white text-4xl px-4 py-2 rounded cursor-not-allowed"
                type="button"
                disabled
              >
                SOLD OUT
              </button>
            {% endif %}
          </div>
        </div>
      </div>
    </div>
  </div>
</section>

<!-- Mobile view -->
<section class="lg:hidden flex flex-col gap-6 px-4 py-4">
  <!-- Mobile Image Gallery -->
  <div class="mobile-gallery">
    <!-- Main Image Stack -->
    <div class="main-images relative h-[60vh] overflow-hidden">
      {%- if product.media.size > 0 -%}
        {%- for media in product.media -%}
          <div
            class="mobile-gallery-item w-full h-full {% unless forloop.first %}absolute top-0 left-0{% endunless %} {% if forloop.first %}relative active{% endif %}"
            data-mobile-index="{{ forloop.index0 }}"
            style="opacity: {% if forloop.first %}1{% else %}0{% endif %}; transition: opacity 0.3s ease;"
          >
            <img
              src="{{ media | image_url: width: 1200 }}"
              alt="{{ media.alt | escape }}"
              class="w-full h-full object-cover"
              loading="{% if forloop.first %}eager{% else %}lazy{% endif %}"
              width="full"
              height="full"
            >
          </div>
        {%- endfor -%}
      {%- endif -%}
    </div>

    <!-- Mobile Thumbnail Strip -->
    <div class="thumbnail-strip mt-8 pb-2 overflow-x-auto mx-auto w-fit">
      <div class="flex gap-2 snap-x  p-4">
        {%- for media in product.media -%}
          <button
            class="thumbnail-item flex-shrink-0 w-20 h-20 p-2 "
            data-thumb-index="{{ forloop.index0 }}"
          >
            <img
              src="{{ media | image_url: width: 150 }}"
              alt="{{ media.alt | escape }}"
              class="w-full h-full object-cover rounded"
              loading="lazy"
              width="full"
              height="full"
            >
          </button>
        {%- endfor -%}
      </div>
    </div>
  </div>

  <!-- Mobile Product Details -->
  <div class="mobile-details mt-6">
    <div class="details-inner flex flex-col">
      {%- comment -%} Header {%- endcomment -%}
      <div class="product-header space-y-8">
        <div class="header-top flex flex-col gap-4">
          <div class="product-status flex items-center gap-4">
            {% if product.available != true %}
              <span class="inline-flex items-center px-3 py-1 text-2xl tracking-wider bg-black text-white uppercase rounded"
                >Sold Out</span
              >
            {% endif %}
          </div>
          <h1 class="font-normal text-[40px] leading-[80%] tracking-normal uppercase">{{ product.title }}</h1>
          <div class="product-variants my-8">
            <div class="flex items-center gap-2">
              <span class="inline-block text-2xl font-medium">SELECT COLOR:</span>
              {%- assign first_color = product.options_with_values | where: 'name', 'Color' | first -%}
              <span class="active-color text-2xl" data-active-color>
                {{- first_color.values | first -}}
              </span>
            </div>
            <div class="color-options flex gap-3 p-2">
              {%- for option in product.options_with_values -%}
                {%- if option.name == 'Color' -%}
                  {%- for value in option.values -%}
                    <button
                      type="button"
                      class="color-swatch w-8 h-8 rounded-full hover:scale-110 transition-transform"
                      style="background-color: {{ value | handleize }};"
                      data-option-value="{{ value | escape }}"
                    >
                      <span class="sr-only">{{ value }}</span>
                    </button>
                  {%- endfor -%}
                {%- endif -%}
              {%- endfor -%}
            </div>
          </div>
        </div>
      </div>
      {%- comment -%} Tabs {%- endcomment -%}
      <div class="product-tabs flex-1">
        <div class="tabs-nav flex space-x-1 border-t border-gray-200">
          {% for block in section.blocks %}
            <button
              class="tab-btn flex-1 text-left font-normal text-[40px] leading-[80%] tracking-normal {% if forloop.first %}text-black border-black{% else %}text-gray-500 border-transparent{% endif %} border-t-2 hover:text-black hover:border-black transition-colors duration-300"
              data-tab="{{ block.id }}"
            >
              {{ block.settings.tab_label }}
            </button>
          {% endfor %}
        </div>

        <div class="tab-content mt-4 ">
          {% for block in section.blocks %}
            <div
              class="tab-pane font-normal text-[12px] leading-[15px] tracking-normal text-justify h-[50vh] overflow-y-auto bg-amber-300 {% if forloop.first %}active{% else %}hidden{% endif %}"
              data-content="{{ block.id }}"
            >
              {{ block.settings.tab_content }}
            </div>
          {% endfor %}
        </div>
      </div>
    </div>
  </div>

  <!-- Mobile  Size & Price Selector -->
  <div
    class=" w-full shadow-lg transition-all duration-300"
  >
    <div class="size-price-selector  flex flex-col gap-4 px-2  max-h-[80vh] w-[100%] ">
      <div class="size-selector border-t border-gray-400 py-4 flex justify-between ">
        <div class="flex items-center mb-4">
          <span class="text-xl font-medium text-[12px] pt-4">SELECT SIZE:</span>
        </div>
        <div class="size-buttons flex-1 justify-end flex gap-4 pt-2">
          {%- assign size_options = product.options_with_values | where: 'name', 'Size' | first -%}
          {%- for value in size_options.values -%}
            {%- assign size_variant = product.variants | where: 'option2', value | first -%}
            <button
              type="button"
              class="size-btn relative w-10 h-10 flex items-center justify-center {% if forloop.first %}bg-black text-white{% endif %} {% unless size_variant.available %}opacity-50 cursor-not-allowed{% endunless %} transition-all duration-300"
              data-value="{{ value | escape }}"
              {% unless size_variant.available %}
                disabled
                aria-disabled="true"
              {% endunless %}
              aria-label="Size {{ value }}{% unless size_variant.available %} - Sold out{% endunless %}"
            >
              <span class="relative z-10 text-xl font-bold ">{{ value }}</span>
              {% unless size_variant.available %}
                <span class="absolute inset-0 flex items-center justify-center">
                  <span class="block w-full h-[2px] bg-neutral-900 rotate-135 origin-center"></span>
                </span>
              {% endunless %}
            </button>
          {%- endfor -%}
        </div>
      </div>

      <div class="price-selector flex flex-col gap-2 border-t border-gray-400 py-4">
        <div class="flex flex-col items-center justify-between">
          <div class="flex items-center gap-2">
            <span class=" font-bold text-[20px]"> {{ product.compare_at_price | money }}</span>
            {% if product.compare_at_price > product.price %}
              <span class="text-[20px] text-gray-500">|</span>
              <span class="text-[20px] line-through text-gray-500">
                ${{ product.compare_at_price | money_without_currency -}}
              </span>
              <div class="text-[24px] text-red-600">
                Save {{ product.compare_at_price | minus: product.price | money }} (
                {{-
                  product.compare_at_price
                  | minus: product.price
                  | times: 100
                  | divided_by: product.compare_at_price
                -}}
                %)
              </div>
            {% endif %}
          </div>
          <button class=" flex justify-end  bg-black text-white mx-6 px-8 py-3 text-[24px] rounded-xl font-medium  w-full hover:bg-gray-900 transition-colors">
            <span>
              {%- if product.available %}Add to Cart{% else %}Sold Out{% endif -%}
            </span>
          </button>
        </div>
      </div>
    </div>
  </div>
</section>

<style>
  .section-{{ section.id }}-padding {
    padding-top: {{ section.settings.padding_top | times: 0.75 | round: 0 }}px;
    padding-bottom: {{ section.settings.padding_bottom | times: 0.75 | round: 0 }}px;
  }

  @media screen and (min-width: 750px) {
    .section-{{ section.id }}-padding {
      padding-top: {{ section.settings.padding_top }}px;
      padding-bottom: {{ section.settings.padding_bottom }}px;
    }
  }

  .product-section {
    display: flex;
    height: calc(100vh * {{product.media.size}});
    position: relative;
  }

  .gallery-wrapper {
    position: sticky;
    top: 0;
    height: 100vh;
    overflow: hidden;
  }

  .gallery-track {
    height: 100%;
  }

  .gallery-item {
    opacity: 0;
    pointer-events: none;
    transition: opacity 0.3s ease-out;
    will-change: opacity;
  }

  .gallery-item.is-active {
    opacity: 1;
    pointer-events: auto;
    z-index: 1;
  }

  .image-strip-container {
    position: absolute;
    top: 50%;
    left: 10px;
    transform: translateY(-50%);
    z-index: 10;
    transition: opacity 0.3s ease;
  }

  .gallery-track:hover .image-strip-container {
    opacity: 1;
  }

  .image-strip {
    display: flex;
    flex-direction: column;
    gap: 10px;
    padding: 10px;
    border-radius: 8px;
  }

  .strip-image-wrapper {
    width: 60px;
    height: 60px;
    cursor: pointer;
    opacity: 0.7;
    transition: all 0.3s ease;
  }

  .strip-image-wrapper:hover,
  .strip-image-wrapper.active {
    opacity: 1;
    transform: scale(1.1);
    border: 1px solid black;
  }

  .strip-image {
    width: 100%;
    height: 100%;
    object-fit: cover;
    border-radius: 4px;
  }

  .tab-btn {
    margin-top: -2px;
  }

  .tab-btn.active {
    border-color: black !important;
    color: black !important;
  }

  .tab-content {
    height: calc(100% - 50px);
  }

  .size-btn {
    transition: all 0.3s ease;
    background: #b8b7b7;
  }

  .size-btn:not(:disabled):hover,
  .size-btn.bg-black {
    background-color: black;
    color: white;
  }

  .size-btn:disabled {
    opacity: 0.8;
    cursor: not-allowed;
  }

  /* Mobile-specific styles */
  @media (max-width: 1024px) {
    .mobile-gallery-item {
      will-change: opacity, transform;
      transition: opacity 0.3s ease;
      position: absolute;
      inset: 0;
    }

    .mobile-gallery-item.active {
      opacity: 1;
      z-index: 2;
      position: relative;
    }

    .thumbnail-item {
      transition: all 0.3s ease;
      opacity: 0.6;
      border: 2px solid transparent;
    }

    .thumbnail-item.active {
      opacity: 1;
      border-color: black;
      transform: scale(1.05);
    }

    .product-tabs {
      height: auto;
      min-height: 200px;
    }

    .tab-content {
      height: auto;
    }

  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    // Quantity selector functionality
  const increaseBtn = document.getElementById("increaseQty");
  const decreaseBtn = document.getElementById("decreaseQty");
  const quantityDisplay = document.getElementById("quantityDisplay");
  const quantityInput = document.getElementById("quantityInput");

  console.log("Increase Button:", increaseBtn);
  console.log("Decrease Button:", decreaseBtn);
  console.log("Quantity Display:", quantityDisplay);
  console.log("Quantity Input:", quantityInput);

  if (increaseBtn && decreaseBtn && quantityDisplay && quantityInput) {
    let quantity = 1;

    increaseBtn.addEventListener("click", () => {
      quantity++;
      quantityDisplay.textContent = quantity;
      quantityInput.value = quantity;
    });

    decreaseBtn.addEventListener("click", () => {
      if (quantity > 1) {
        quantity--;
        quantityDisplay.textContent = quantity;
        quantityInput.value = quantity;
      }
    });
  }


    // desktop gallery handling
    const gallery = document.querySelector('.product-gallery');
    const items = document.querySelectorAll('.gallery-item');
    const totalImages = items.length;

    if (!gallery || !items.length) return;

    function updateActiveImage() {
      const galleryTop = gallery.offsetTop;
      const scrollPosition = window.pageYOffset;
      const sectionHeight = gallery.offsetHeight;
      const windowHeight = window.innerHeight;
      const scrollableDistance = sectionHeight - windowHeight;

      const scrollFraction = (scrollPosition - galleryTop) / scrollableDistance;
      const imageIndex = Math.min(Math.floor(scrollFraction * (totalImages - 0.1)), totalImages - 1);

      items.forEach((item, index) => {
        item.classList.toggle('is-active', index === Math.max(0, imageIndex));
      });

      const stripImages = document.querySelectorAll('.strip-image-wrapper');
      stripImages.forEach((img, index) => {
        img.classList.toggle('active', index === Math.max(0, imageIndex));
      });
    }

    let ticking = false;
    window.addEventListener('scroll', () => {
      if (!ticking) {
        window.requestAnimationFrame(() => {
          updateActiveImage();
          ticking = false;
        });
        ticking = true;
      }
    });

    updateActiveImage();

  // tab-pane handling
  document.querySelectorAll(".tab-btn").forEach(btn => {
    btn.addEventListener("click", () => {
      const tabId = btn.dataset.tab;

      document.querySelectorAll(".tab-btn").forEach(b => b.classList.remove("text-black", "border-black"));
      btn.classList.add("text-black", "border-black");

      document.querySelectorAll(".tab-pane").forEach(pane => {
        pane.classList.toggle("active", pane.dataset.content === tabId);
        pane.classList.toggle("hidden", pane.dataset.content !== tabId);
      });
    });
  });

  document.getElementById("open-size-chart")?.addEventListener("click", () => {
    document.getElementById("size-chart-drawer").classList.remove("hidden", "translate-x-full");
    document.getElementById("size-chart-backdrop").classList.remove("hidden");
  });

  document.getElementById("close-size-chart")?.addEventListener("click", () => {
    document.getElementById("size-chart-drawer").classList.add("translate-x-full", "hidden");
    document.getElementById("size-chart-backdrop").classList.add("hidden");
  });

  // tab buttons active handling
  const tabButtons = document.querySelectorAll(".tab-btn");
      const tabPanes = document.querySelectorAll(".tab-pane");

      tabButtons.forEach((button) => {
        button.addEventListener("click", () => {
          const targetTab = button.getAttribute("data-tab");

          // Reset styles on all buttons
          tabButtons.forEach((btn) => {
            btn.classList.remove("text-black", "border-black");
            btn.classList.add("text-gray-600", "border-transparent");
          });

          // Activate clicked button
          button.classList.remove("text-gray-600", "border-transparent");
          button.classList.add("text-black", "border-black");

          // Toggle tab panes
          tabPanes.forEach((pane) => {
            if (pane.getAttribute("data-content") === targetTab) {
              pane.classList.remove("hidden");
              pane.classList.add("block");
            } else {
              pane.classList.remove("block");
              pane.classList.add("hidden");
            }
          });
        });
      });

    

  // color swatch handling 
    const colorSwatches = document.querySelectorAll('.color-swatch');
    const activeColorDisplays = document.querySelectorAll('[data-active-color]');
    let lastSelectedColor = '';

    function updateDisplays(color) {
      activeColorDisplays.forEach(display => {
        display.textContent = color;
      });
    }

  function setActiveSwatch(swatch) {
    const selectedColor = swatch.getAttribute('data-option-value');

    // Remove ring from all
    colorSwatches.forEach((el) => {
      el.classList.remove('ring-1', 'ring-offset-1', 'ring-black');
    });

    // Force reflow then add ring
    swatch.offsetWidth;
    swatch.classList.add('ring-1', 'ring-offset-2', 'ring-black');

    // Update visible color name
    activeColorDisplays.forEach((el) => {
      el.textContent = selectedColor;
    });

    lastSelectedColor = selectedColor;

    swatch.blur();

    updateVariant(); 
  }

  colorSwatches.forEach(swatch => {
    const swatchColor = swatch.getAttribute('data-option-value');

    swatch.addEventListener('click', () => setActiveSwatch(swatch));

    swatch.addEventListener('mouseenter', () => {
      if (swatchColor) updateDisplays(swatchColor);
    });

    swatch.addEventListener('mouseleave', () => {
      if (lastSelectedColor) updateDisplays(lastSelectedColor);
    });
  });

  // Initialize first swatch as selected
  if (colorSwatches.length > 0) {
    setActiveSwatch(colorSwatches[0]);
  }
      // Size button handling
    const sizeButtons = document.querySelectorAll('.size-btn');

    // Set initial active state
    const firstSizeBtn = document.querySelector('.size-btn');
    if (firstSizeBtn) {
      firstSizeBtn.classList.add('active', 'bg-black', 'text-white');
    }

    sizeButtons.forEach((btn) => {
      btn.addEventListener('click', () => {
        sizeButtons.forEach((b) => b.classList.remove('active', 'bg-black', 'text-white'));
        btn.classList.add('active', 'bg-black', 'text-white');
      });
    });

    // Image strip handling
    const stripImages = document.querySelectorAll('.strip-image-wrapper');

    stripImages.forEach((stripImage) => {
      stripImage.addEventListener('click', () => {
        const targetIndex = parseInt(stripImage.dataset.stripIndex);

        items.forEach((item, index) => {
          item.classList.toggle('is-active', index === targetIndex);
        });

        stripImages.forEach((img) => {
          img.classList.toggle('active', img === stripImage);
        });
      });
    });

    // Mobile Gallery Handling
    if (window.innerWidth < 1024) {
      const mobileImages = document.querySelectorAll('.mobile-gallery-item');
      const thumbnails = document.querySelectorAll('.thumbnail-item');
      let currentIndex = 0;

      function showImage(index) {
        mobileImages.forEach((img, i) => {
          if (i === index) {
            img.classList.add('active');
            img.style.opacity = '1';
            img.style.zIndex = '2';
          } else {
            img.classList.remove('active');
            img.style.opacity = '0';
            img.style.zIndex = '1';
          }
        });

        thumbnails.forEach((thumb, i) => {
          if (i === index) {
            thumb.classList.add('active');
            thumb.style.opacity = '1';
          } else {
            thumb.classList.remove('active');
            thumb.style.opacity = '0.6';
          }
        });

        currentIndex = index;
      }

      // Add click handlers to thumbnails
  thumbnails.forEach((thumb) => {
    thumb.addEventListener('click', () => {
      const index = parseInt(thumb.dataset.thumbIndex);
      showImage(index);
    });
  });


      // Initialize with first image
      showImage(0);
    }

    // variant logic
    const productOptions = {{ product.options | json }};
    const productVariants = {{ product.variants | json }};

    const colorIndex = productOptions.findIndex(opt => opt.toLowerCase() === 'color');
    const sizeIndex = productOptions.findIndex(opt => opt.toLowerCase() === 'size');

    let selectedColor = null;
    let selectedSize = null;

    const priceElement = document.querySelector('.price-selector span.text-5xl');
    const addToCartButton = document.querySelector('.price-selector button');

    function findMatchingVariant() {
      return productVariants.find(variant => {
        const colorMatch = colorIndex >= 0 ? variant[`option${colorIndex + 1}`] === selectedColor : true;
        const sizeMatch = sizeIndex >= 0 ? variant[`option${sizeIndex + 1}`] === selectedSize : true;
        return colorMatch && sizeMatch;
      });
    }

    function updateUI(variant) {
      if (!variant) {
        addToCartButton.disabled = true;
        addToCartButton.textContent = 'Unavailable';
        priceElement.textContent = 'N/A';
        return;
      }

      addToCartButton.disabled = !variant.available;
      addToCartButton.textContent = variant.available ? 'Add to Cart' : 'Sold Out';
      priceElement.textContent = `$${(variant.price / 100).toFixed(2)}`;
    }

    // Size button clicks
    document.querySelectorAll('.size-btn').forEach(btn => {
      btn.addEventListener('click', () => {
        selectedSize = btn.getAttribute('data-value');

        // highlight selected size
        document.querySelectorAll('.size-btn').forEach(b => {
          b.classList.remove('bg-black', 'text-white');
        });
        btn.classList.add('bg-black', 'text-white');

        updateVariant();
      });
    });

 

    const defaultSizeBtn = document.querySelector('.size-btn');
    if (defaultSizeBtn) {
      selectedSize = defaultSizeBtn.getAttribute('data-value');
      defaultSizeBtn.classList.add('bg-black', 'text-white');
    }

    function updateSizeAvailability() {
  const color = selectedColor;
  const sizeBtns = document.querySelectorAll('.size-btn');

  sizeBtns.forEach(btn => {
    const size = btn.getAttribute('data-value');

      // Find if there's any variant with this color + size
      const existingSlash = btn.querySelector('.unavailable-slash');
      if (!matchingVariant || !matchingVariant.available) {
        btn.classList.add('opacity-50', 'cursor-not-allowed');
        btn.disabled = true;
        btn.setAttribute('aria-disabled', 'true');

    if (!existingSlash) {
      btn.insertAdjacentHTML('beforeend', `
        <span class="absolute inset-0 flex items-center justify-center unavailable-slash">
          <span class="block w-full h-[2px] bg-neutral-900 rotate-[135deg] origin-center"></span>
        </span>
      `);
    }
      } else {
        btn.classList.remove('opacity-50', 'cursor-not-allowed');
          btn.disabled = false;
      btn.removeAttribute('aria-disabled');
    if (existingSlash) existingSlash.remove();
  }
    });
  }


  function updateVariant() {
    const variant = findMatchingVariant();
    updateUI(variant);
    updateSizeAvailability();
  }

  // size-chart button functionality
  const openBtn = document.getElementById('open-size-chart');
      const closeBtn = document.getElementById('close-size-chart');
      const drawer = document.getElementById('size-chart-drawer');
      const backdrop = document.getElementById('size-chart-backdrop');

      if (openBtn && closeBtn && drawer) {
        openBtn.addEventListener('click', () => {
    drawer.classList.remove('translate-x-full', 'hidden');
    backdrop.classList.remove('hidden');
    document.body.classList.add('overflow-hidden'); 
  });

  function closeDrawer() {
    drawer.classList.add('translate-x-full');

      drawer.classList.add('hidden');

    backdrop.classList.add('hidden');
    document.body.classList.remove('overflow-hidden');  
  }

  closeBtn.addEventListener('click', closeDrawer);
  backdrop.addEventListener('click', closeDrawer);



      backdrop.addEventListener('click', () => {
        drawer.classList.add('translate-x-full');
        backdrop.classList.add('hidden');
      });

      document.addEventListener('keydown', (e) => {
        if (e.key === 'Escape') {
          drawer.classList.add('translate-x-full');
          backdrop.classList.add('hidden');
        }
      });
    }


    const openMobileSizeChart = document.getElementById('open-size-chart-mobile');
    const closeMobileSizeChart = document.getElementById('close-size-chart-mobile');
    const mobileDrawer = document.getElementById('mobile-size-chart-drawer');

    if (openMobileSizeChart && closeMobileSizeChart && mobileDrawer) {
      openMobileSizeChart.addEventListener('click', () => {
        mobileDrawer.classList.remove('translate-y-full', 'hidden');
        document.body.classList.add('overflow-hidden');
      });

      closeMobileSizeChart.addEventListener('click', () => {
        mobileDrawer.classList.add('translate-y-full');
        document.body.classList.remove('overflow-hidden');
        setTimeout(() => mobileDrawer.classList.add('hidden'), 300);
      });

      document.addEventListener('keydown', (e) => {
        if (e.key === 'Escape') {
          mobileDrawer.classList.add('translate-y-full');
          document.body.classList.remove('overflow-hidden');
          setTimeout(() => mobileDrawer.classList.add('hidden'), 300);
        }
      });
    }

  });
</script>

{% schema %}
{
  "name": "Product Details",
  "tag": "section",
  "class": "section",
  "settings": [
    {
      "type": "range",
      "id": "padding_top",
      "min": 0,
      "max": 100,
      "step": 4,
      "unit": "px",
      "label": "t:sections.all.padding.padding_top",
      "default": 0
    },
    {
      "type": "range",
      "id": "padding_bottom",
      "min": 0,
      "max": 100,
      "step": 4,
      "unit": "px",
      "label": "t:sections.all.padding.padding_bottom",
      "default": 0
    }
  ],
  "blocks": [
    {
      "type": "tab_description",
      "name": "Tab: Description",
      "limit": 1,
      "settings": [
        {
          "type": "text",
          "id": "title",
          "label": "Tab Title",
          "default": "DESCRIPTION"
        }
      ]
    },
    {
      "type": "tab_details",
      "name": "Tab: Details",
      "limit": 1,
      "settings": [
        {
          "type": "text",
          "id": "title",
          "label": "Tab Title",
          "default": "DETAILS"
        },
        {
          "type": "text",
          "id": "metafield_namespace_key",
          "label": "Product Details ",
          "default": "CONNECT TO A DYNAMIC SOURCE FOR PRODUCT DETAILS"
        }
      ]
    },
    {
      "type": "tab_sizing",
      "name": "Tab: Sizing",
      "limit": 1,
      "settings": [
        {
          "type": "text",
          "id": "title",
          "label": "Tab Title",
          "default": "SIZING"
        },

        {
          "type": "page",
          "id": "size_chart_page",
          "label": "Select a Size Chart Page"
        }
      ]
    },
    {
      "type": "delivery_address",
      "name": "Delivery Address",
      "limit": 1,
      "settings": []
    },
    {
      "type": "quantity_selector",
      "name": "Quantity Selector",
      "limit": 1,
      "settings": []
    }
  ],

  "presets": [
    {
      "name": "Product Tabs",
      "blocks": []
    }
  ]
}
{% endschema %}
