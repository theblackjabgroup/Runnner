<!-- Desktop view -->
<section class="product-section section-{{ section.id }}-padding hidden lg:!flex lg:flex-row gap-4 lg:gap-8 px-4 py-8">
  {%- comment -%} Left: Image Gallery {%- endcomment -%}
  <div class="product-gallery w-1/2">
    <div class="gallery-wrapper sticky top-0 h-screen">
      <div class="gallery-track w-full h-full relative" data-gallery-track>
        {%- if product.media.size > 0 -%}
          {%- for media in product.media -%}
            <div
              class="gallery-item absolute inset-0 w-full h-full {% if forloop.first %}is-active{% endif %}"
              data-index="{{ forloop.index0 }}"
            >
              <img
                src="{{ media | image_url: width: 1200 }}"
                alt="{{ media.alt | escape }}"
                class="w-full h-full object-cover"
                loading="{% if forloop.first %}eager{% else %}lazy{% endif %}"
                width="full"
                height="full"
              >
            </div>
          {%- endfor -%}
        {%- endif -%}

        <!-- Add vertical image strip -->
        <div class="image-strip-container opacity-0">
          <div class="image-strip">
            {%- for media in product.media -%}
              <div
                class="strip-image-wrapper {% if forloop.first %}active{% endif %}"
                data-strip-index="{{ forloop.index0 }}"
              >
                <img
                  src="{{ media | image_url: width: 150 }}"
                  alt="{{ media.alt | escape }}"
                  class="strip-image"
                  loading="lazy"
                  width="150"
                  height="full"
                >
              </div>
            {%- endfor -%}
          </div>
        </div>
      </div>
    </div>
  </div>

  {%- comment -%} Right: Product Details {%- endcomment -%}
  <div class="product-details w-1/2 mx-2">
    <div class="details-inner sticky top-0 h-screen flex flex-col">
      {%- comment -%} Header {%- endcomment -%}
      <div class="product-header w-[80%]   space-y-8">
        <div class="header-top flex flex-col gap-4">
          <div class="product-status flex items-center gap-4">
            {% if product.available != true %}
              <span class="inline-flex items-center px-3 py-1 text-2xl tracking-wider bg-black text-white uppercase rounded"
                >Sold Out</span
              >
            {% endif %}
          </div>
          <h1 class="text-4xl font-bold">{{ product.title }}</h1>
          <div class="product-variants my-8">
            <div class="flex items-center gap-2">
              <span class="inline-block text-2xl font-medium">SELECT COLOR:</span>
              {%- assign first_color = product.options_with_values | where: 'name', 'Color' | first -%}
              <span class="active-color text-2xl" data-active-color>
                {{- first_color.values | first -}}
              </span>
            </div>
            <div class="color-options flex gap-3 p-2">
              {%- for option in product.options_with_values -%}
                {%- if option.name == 'Color' -%}
                  {%- for value in option.values -%}
                    <button
                      type="button"
                      class="color-swatch w-8 h-8 rounded-full hover:scale-110 transition-transform {% if forloop.first %}ring-2 ring-offset-2 ring-black{% endif %}"
                      style="background-color: {{ value | handleize }};"
                      data-option-value="{{ value | escape }}"
                    >
                      <span class="sr-only">{{ value }}</span>
                    </button>
                  {%- endfor -%}
                {%- endif -%}
              {%- endfor -%}
            </div>
          </div>
        </div>
      </div>
      {%- comment -%} Tabs {%- endcomment -%}
      <div class="product-tabs w-[80%]   flex-1 overflow-hidden">
        <div class="tabs-nav flex border-t border-gray-200">
          <button
            class="tab-btn text-black border-black flex-1 p-4 border-t-2 hover:text-black hover:border-black transition-colors duration-300"
            data-tab="description"
          >
            Description
          </button>
          <button
            class="tab-btn flex-1 p-4 text-gray-500 border-t-2 border-transparent hover:text-black hover:border-black transition-colors duration-300"
            data-tab="details"
          >
            Details
          </button>
          <button
            class="tab-btn flex-1 p-4 text-gray-500 border-t-2 border-transparent hover:text-black hover:border-black transition-colors duration-300"
            data-tab="sizing"
          >
            Sizing
          </button>
        </div>
        <div class="tab-content p-8 overflow-y-auto">
          <div class="tab-pane active" data-content="description">{{ product.description }}</div>

          <div class="tab-pane hidden" data-content="details">
            {%- if section.settings.metafield_namespace_key != blank -%}
              <div class="prose prose-lg max-w-none">
                {{ section.settings.metafield_namespace_key }}
              </div>
            {%- else -%}
              <p class="text-gray-500">No details available for this product.</p>
            {%- endif -%}
          </div>
          <div class="tab-pane hidden" data-content="sizing">Size guide here...</div>
        </div>
      </div>

      {%- comment -%} Size & Price {%- endcomment -%}
      {%- assign option_names = product.options_with_values | map: 'name' -%}
      {%- assign size_index = option_names | index_of: 'Size' | plus: 1 -%}

      <div class="size-price-selector px-4 flex flex-col gap-4">
        <div class="size-selector border-t border-gray-400 py-4 flex justify-between ">
          <div class="flex items-center mb-4">
            <span class="text-2xl font-medium">SELECT SIZE:</span>
          </div>
          <div class="size-buttons flex-1 justify-end flex gap-4">
            {%- assign size_options = product.options_with_values | where: 'name', 'Size' | first -%}
            {%- for value in size_options.values -%}
              {% assign size_variant = product.variants
                | where: 'option'
                | append: size_index
                | append: '', value
                | first
              %}

              <button
                type="button"
                class="size-btn relative w-12 h-12 flex items-center justify-center transition-all duration-300"
                data-value="{{ value | escape }}"
                aria-label="Size {{ value }}"
              >
                <span class="relative z-10 text-3xl font-bold ">{{ value }}</span>
              </button>
            {%- endfor -%}
          </div>
        </div>

        <div class="price-selector flex flex-col gap-2 border-t border-gray-400 py-4">
          <div class="flex items-center justify-between">
            <div class="flex items-center gap-2">
              <span class="text-5xl font-bold">${{ product.price | money_without_currency }}</span>
              {% if product.compare_at_price > product.price %}
                <span class="text-4xl text-gray-500">|</span>
                <span class="text-4xl line-through text-gray-500">
                  ${{ product.compare_at_price | money_without_currency -}}
                </span>
                <div class="text-4xl text-red-600">
                  Save {{ product.compare_at_price | minus: product.price | money_without_currency }}$ (
                  {{-
                    product.compare_at_price
                    | minus: product.price
                    | times: 100
                    | divided_by: product.compare_at_price
                  -}}
                  %)
                </div>
              {% endif %}
            </div>
            <button class="flex-1 flex justify-between  bg-black text-white mx-6 px-8 py-3 text-4xl font-medium hover:bg-gray-900 transition-colors">
              <span>-></span>
              {% if product.available %}Add to Cart{% else %}Sold Out{% endif %}
            </button>
          </div>
        </div>
      </div>
    </div>
  </div>
</section>

<!-- Mobile view -->
<section class="lg:hidden flex flex-col gap-6 px-4 py-4 mobile-sticky-container">
  <!-- Mobile Image Gallery -->
  <div class="mobile-gallery">
    <!-- Main Image Stack -->
    <div class="main-images relative h-[60vh] overflow-hidden">
      {%- if product.media.size > 0 -%}
        {%- for media in product.media -%}
          <div
            class="mobile-gallery-item w-full h-full {% unless forloop.first %}absolute top-0 left-0{% endunless %} {% if forloop.first %}relative{% endif %}"
            data-mobile-index="{{ forloop.index0 }}"
            style="opacity: {% if forloop.first %}1{% else %}0{% endif %}; transition: opacity 0.3s ease;"
          >
            <img
              src="{{ media | image_url: width: 1200 }}"
              alt="{{ media.alt | escape }}"
              class="w-full h-full object-cover"
              loading="{% if forloop.first %}eager{% else %}lazy{% endif %}"
              width="full"
              height="full"
            >
          </div>
        {%- endfor -%}
      {%- endif -%}
    </div>

    <!-- Mobile Thumbnail Strip -->
    <div class="thumbnail-strip mt-8 pb-2 overflow-x-auto mx-auto w-fit">
      <div class="flex gap-2 snap-x  p-4">
        {%- for media in product.media -%}
          <button
            class="thumbnail-item flex-shrink-0 w-20 h-20 p-2 "
            data-thumb-index="{{ forloop.index0 }}"
          >
            <img
              src="{{ media | image_url: width: 150 }}"
              alt="{{ media.alt | escape }}"
              class="w-full h-full object-cover rounded"
              loading="lazy"
              width="full"
              height="full"
            >
          </button>
        {%- endfor -%}
      </div>
    </div>
  </div>

  <!-- Mobile Product Details -->
  <div class="mobile-details mt-6">
    <div class="details-inner flex flex-col">
      {%- comment -%} Header {%- endcomment -%}
      <div class="product-header space-y-8">
        <div class="header-top flex flex-col gap-4">
          <div class="product-status flex items-center gap-4">
            {% if product.available != true %}
              <span class="inline-flex items-center px-3 py-1 text-2xl tracking-wider bg-black text-white uppercase rounded"
                >Sold Out</span
              >
            {% endif %}
          </div>
          <h1 class="text-4xl font-bold">{{ product.title }}</h1>
          <div class="product-variants my-8">
            <div class="flex items-center gap-2">
              <span class="inline-block text-2xl font-medium">SELECT COLOR:</span>
              {%- assign first_color = product.options_with_values | where: 'name', 'Color' | first -%}
              <span class="active-color text-2xl" data-active-color>
                {{- first_color.values | first -}}
              </span>
            </div>
            <div class="color-options flex gap-3 p-2">
              {%- for option in product.options_with_values -%}
                {%- if option.name == 'Color' -%}
                  {%- for value in option.values -%}
                    <button
                      type="button"
                      class="color-swatch w-8 h-8 rounded-full hover:scale-110 transition-transform {% if forloop.first %}ring-2 ring-offset-2 ring-black{% endif %}"
                      style="background-color: {{ value | handleize }};"
                      data-option-value="{{ value | escape }}"
                    >
                      <span class="sr-only">{{ value }}</span>
                    </button>
                  {%- endfor -%}
                {%- endif -%}
              {%- endfor -%}
            </div>
          </div>
        </div>
      </div>
      {%- comment -%} Tabs {%- endcomment -%}
      <div class="product-tabs flex-1">
        <div class="tabs-nav flex border-t border-gray-200">
          <button
            class="tab-btn text-black border-black flex-1 p-4 border-t-2 hover:text-black hover:border-black transition-colors duration-300"
            data-tab="description"
          >
            Description
          </button>
          <button
            class="tab-btn flex-1 p-4 text-gray-500 border-t-2 border-transparent hover:text-black hover:border-black transition-colors duration-300"
            data-tab="details"
          >
            Details
          </button>
          <button
            class="tab-btn flex-1 p-4 text-gray-500 border-t-2 border-transparent hover:text-black hover:border-black transition-colors duration-300"
          >
            Sizing
          </button>
        </div>
        <div class="tab-content p-8">
          <div class="tab-pane active" data-content="description">{{ product.description }}</div>
          <div class="tab-pane hidden" data-content="details">
            {%- if section.settings.metafield_namespace_key != blank -%}
              <div class="prose prose-lg max-w-none">
                {{ section.settings.metafield_namespace_key }}
              </div>
            {%- else -%}
              <p class="text-gray-500">No details available for this product.</p>
            {%- endif -%}
          </div>
          <div class="tab-pane hidden" data-content="sizing">Size guide here...</div>
        </div>
      </div>
    </div>
  </div>

  <!-- Mobile Sticky Size & Price Selector -->
  <div
    class="mobile-sticky-selector   w-full shadow-lg transition-all duration-300 sticky-div"
    data-sticky-selector
  >
    <div class="size-price-selector  flex flex-col gap-4   max-h-[80vh] w-[100%] ">
      <div class="size-selector border-t border-gray-400 py-4 flex justify-between ">
        <div class="flex items-center mb-4">
          <span class="text-xl font-medium">SELECT SIZE:</span>
        </div>
        <div class="size-buttons flex-1 justify-end flex gap-4">
          {%- assign size_options = product.options_with_values | where: 'name', 'Size' | first -%}
          {%- for value in size_options.values -%}
            {%- assign size_variant = product.variants | where: 'option2', value | first -%}
            <button
              type="button"
              class="size-btn relative w-10 h-10 flex items-center justify-center {% if forloop.first %}bg-black text-white{% endif %} {% unless size_variant.available %}opacity-50 cursor-not-allowed{% endunless %} transition-all duration-300"
              data-value="{{ value | escape }}"
              {% unless size_variant.available %}
                disabled
                aria-disabled="true"
              {% endunless %}
              aria-label="Size {{ value }}{% unless size_variant.available %} - Sold out{% endunless %}"
            >
              <span class="relative z-10 text-xl font-bold ">{{ value }}</span>
              {% unless size_variant.available %}
                <span class="absolute inset-0 flex items-center justify-center">
                  <span class="block w-full h-[2px] bg-neutral-900 rotate-135 origin-center"></span>
                </span>
              {% endunless %}
            </button>
          {%- endfor -%}
        </div>
      </div>

      <div class="price-selector flex flex-col gap-2 border-t border-gray-400 py-4">
        <div class="flex flex-col items-center justify-between">
          <div class="flex items-center gap-2">
            <span class="text-2xl font-bold">${{ product.price | money_without_currency }}</span>
            {% if product.compare_at_price > product.price %}
              <span class="text-2xl text-gray-500">|</span>
              <span class="text-2xl line-through text-gray-500">
                ${{ product.compare_at_price | money_without_currency -}}
              </span>
              <div class="text-xl text-red-600">
                Save {{ product.compare_at_price | minus: product.price | money_without_currency }}$ (
                {{-
                  product.compare_at_price
                  | minus: product.price
                  | times: 100
                  | divided_by: product.compare_at_price
                -}}
                %)
              </div>
            {% endif %}
          </div>
          <button class=" flex justify-between  bg-black text-white mx-6 px-8 py-3 text-4xl font-medium  w-full hover:bg-gray-900 transition-colors">
            <span>-></span>
            <span>
              {%- if product.available %}Add to Cart{% else %}Sold Out{% endif -%}
            </span>
          </button>
        </div>
      </div>
    </div>
  </div>
</section>

<style>
  .section-{{ section.id }}-padding {
    padding-top: {{ section.settings.padding_top | times: 0.75 | round: 0 }}px;
    padding-bottom: {{ section.settings.padding_bottom | times: 0.75 | round: 0 }}px;
  }

  @media screen and (min-width: 750px) {
    .section-{{ section.id }}-padding {
      padding-top: {{ section.settings.padding_top }}px;
      padding-bottom: {{ section.settings.padding_bottom }}px;
    }
  }

  .product-section {
    display: flex;
    height: calc(100vh * {{product.media.size}});
    position: relative;
  }

  .gallery-wrapper {
    position: sticky;
    top: 0;
    height: 100vh;
    overflow: hidden;
  }

  .gallery-track {
    height: 100%;
  }

  .gallery-item {
    opacity: 0;
    pointer-events: none;
    transition: opacity 0.3s ease-out;
    will-change: opacity;
  }

  .gallery-item.is-active {
    opacity: 1;
    pointer-events: auto;
    z-index: 1;
  }

  .image-strip-container {
    position: absolute;
    top: 50%;
    left: 10px;
    transform: translateY(-50%);
    z-index: 10;
    transition: opacity 0.3s ease;
  }

  .gallery-track:hover .image-strip-container {
    opacity: 1;
  }

  .image-strip {
    display: flex;
    flex-direction: column;
    gap: 10px;
    background: rgba(255, 255, 255, 0.9);
    padding: 10px;
    border-radius: 8px;
    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
  }

  .strip-image-wrapper {
    width: 60px;
    height: 60px;
    cursor: pointer;
    opacity: 0.7;
    transition: all 0.3s ease;
  }

  .strip-image-wrapper:hover,
  .strip-image-wrapper.active {
    opacity: 1;
    transform: scale(1.1);
  }

  .strip-image {
    width: 100%;
    height: 100%;
    object-fit: cover;
    border-radius: 4px;
  }

  .tab-btn {
    margin-top: -2px;
  }

  .tab-btn.active {
    border-color: black !important;
    color: black !important;
  }

  .tab-content {
    height: calc(100% - 50px);
  }

  .size-btn {
    transition: all 0.3s ease;
    background: #b8b7b7;
  }

  .size-btn:not(:disabled):hover,
  .size-btn.bg-black {
    background-color: black;
    color: white;
  }

  .size-btn:disabled {
    opacity: 0.8;
    cursor: not-allowed;
  }

  /* Mobile-specific styles */
  @media (max-width: 1024px) {
    .mobile-gallery-item {
      will-change: opacity, transform;
      transition: opacity 0.3s ease;
      position: absolute;
      inset: 0;
    }

    .mobile-gallery-item.active {
      opacity: 1;
      z-index: 2;
      position: relative;
    }

    .thumbnail-item {
      transition: all 0.3s ease;
      opacity: 0.6;
      border: 2px solid transparent;
    }

    .thumbnail-item.active {
      opacity: 1;
      border-color: black;
      transform: scale(1.05);
    }

    .product-tabs {
      height: auto;
      min-height: 200px;
    }

    .tab-content {
      height: auto;
    }
    .mobile-sticky-selector {
      position: static;
      transform: translateY(100%);
      transition: transform 0.3s ease;
      will-change: transform;
      z-index: 999;
    }

    .mobile-sticky-selector.stuck {
      position: fixed;
      bottom: 0;
      left: 0;
      right: 0;
      transform: translateY(0);
      background-color: white;
    }
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const gallery = document.querySelector('.product-gallery');
    const items = document.querySelectorAll('.gallery-item');
    const totalImages = items.length;

    if (!gallery || !items.length) return;

    function updateActiveImage() {
      const galleryTop = gallery.offsetTop;
      const scrollPosition = window.pageYOffset;
      const sectionHeight = gallery.offsetHeight;
      const windowHeight = window.innerHeight;
      const scrollableDistance = sectionHeight - windowHeight;

      const scrollFraction = (scrollPosition - galleryTop) / scrollableDistance;
      const imageIndex = Math.min(Math.floor(scrollFraction * (totalImages - 0.1)), totalImages - 1);

      items.forEach((item, index) => {
        item.classList.toggle('is-active', index === Math.max(0, imageIndex));
      });

      const stripImages = document.querySelectorAll('.strip-image-wrapper');
      stripImages.forEach((img, index) => {
        img.classList.toggle('active', index === Math.max(0, imageIndex));
      });
    }

    let ticking = false;
    window.addEventListener('scroll', () => {
      if (!ticking) {
        window.requestAnimationFrame(() => {
          updateActiveImage();
          ticking = false;
        });
        ticking = true;
      }
    });

    updateActiveImage();

    const firstSwatch = document.querySelector('.color-swatch');
    if (firstSwatch) {
      firstSwatch.classList.add('ring-1', 'ring-offset-2', 'ring-black');
      const initialColor = firstSwatch.getAttribute('data-option-value');
      document.querySelector('[data-active-color]').textContent = initialColor;
    }
    const tabBtns = document.querySelectorAll('.tab-btn');
    const tabPanes = document.querySelectorAll('.tab-pane');

    tabBtns.forEach((btn) => {
      btn.addEventListener('click', () => {
        const target = btn.dataset.tab;

        tabBtns.forEach((b) => {
          b.classList.toggle('active', b === btn);
          if (b === btn) {
            b.classList.remove('text-gray-500', 'border-transparent');
            b.classList.add('text-black', 'border-black');
          } else {
            b.classList.remove('text-black', 'border-black');
            b.classList.add('text-gray-500', 'border-transparent');
          }
        });

        tabPanes.forEach((pane) => {
          pane.classList.toggle('active', pane.dataset.content === target);
          pane.classList.toggle('hidden', pane.dataset.content !== target);
        });
      });
    });
    const colorSwatches = document.querySelectorAll('.color-swatch');
    const activeColorDisplays = document.querySelectorAll('[data-active-color]');

    colorSwatches.forEach((swatch) => {
      swatch.addEventListener('click', () => {
        const selectedColor = swatch.getAttribute('data-option-value');

        // Update all color displays
        activeColorDisplays.forEach((display) => {
          display.textContent = selectedColor;
        });

        // Update swatch states
        colorSwatches.forEach((s) => {
          s.classList.remove('ring-2', 'ring-offset-2', 'ring-black');
          if (s.getAttribute('data-option-value') === selectedColor) {
            s.classList.add('ring-2', 'ring-offset-2', 'ring-black');
          }
        });
      });
    });

    // Initialize first color
    if (colorSwatches.length > 0) {
      const initialColor = colorSwatches[0].getAttribute('data-option-value');
      activeColorDisplays.forEach((display) => {
        display.textContent = initialColor;
      });
      colorSwatches[0].classList.add('ring-2', 'ring-offset-2', 'ring-black');
    }

    // Size button handling
    const sizeButtons = document.querySelectorAll('.size-btn');

    // Set initial active state
    const firstSizeBtn = document.querySelector('.size-btn');
    if (firstSizeBtn) {
      firstSizeBtn.classList.add('active', 'bg-black', 'text-white');
    }

    sizeButtons.forEach((btn) => {
      btn.addEventListener('click', () => {
        sizeButtons.forEach((b) => b.classList.remove('active', 'bg-black', 'text-white'));
        btn.classList.add('active', 'bg-black', 'text-white');
      });
    });

    const stripImages = document.querySelectorAll('.strip-image-wrapper');

    stripImages.forEach((stripImage) => {
      stripImage.addEventListener('click', () => {
        const targetIndex = parseInt(stripImage.dataset.stripIndex);

        items.forEach((item, index) => {
          item.classList.toggle('is-active', index === targetIndex);
        });

        stripImages.forEach((img) => {
          img.classList.toggle('active', img === stripImage);
        });
      });
    });

    // Mobile Gallery Handling
    if (window.innerWidth < 1024) {
      const mobileImages = document.querySelectorAll('.mobile-gallery-item');
      const thumbnails = document.querySelectorAll('.thumbnail-item');
      let currentIndex = 0;

      function showImage(index) {
        mobileImages.forEach((img, i) => {
          if (i === index) {
            img.classList.add('active');
            img.style.opacity = '1';
            img.style.zIndex = '2';
          } else {
            img.classList.remove('active');
            img.style.opacity = '0';
            img.style.zIndex = '1';
          }
        });

        thumbnails.forEach((thumb, i) => {
          if (i === index) {
            thumb.classList.add('active');
            thumb.style.opacity = '1';
          } else {
            thumb.classList.remove('active');
            thumb.style.opacity = '0.6';
          }
        });

        currentIndex = index;
      }

      // Add click handlers to thumbnails
      thumbnails.forEach((thumb, index) => {
        thumb.addEventListener('click', () => {
          showImage(index);
        });
      });

      // Initialize with first image
      showImage(0);
    }

    const stickySelector = document.querySelector('.mobile-sticky-selector');
    const stickyContainer = document.querySelector('.mobile-sticky-container');

    if (stickySelector && stickyContainer) {
      const observer = new IntersectionObserver(
        ([entry]) => {
          if (entry.isIntersecting) {
            stickySelector.classList.add('stuck');
          } else {
            stickySelector.classList.remove('stuck');
          }
        },
        {
          root: null,
          threshold: 0,
          rootMargin: `0px 0px -100% 0px`, // triggers when container bottom reaches viewport bottom
        }
      );

      observer.observe(stickyContainer);
    }

    // variant logic
    const productOptions = {{ product.options | json }};
    const productVariants = {{ product.variants | json }};
    
    const colorIndex = productOptions.findIndex(opt => opt.toLowerCase() === 'color');
    const sizeIndex = productOptions.findIndex(opt => opt.toLowerCase() === 'size');

    let selectedColor = null;
    let selectedSize = null;

    const priceElement = document.querySelector('.price-selector span.text-5xl');
    const addToCartButton = document.querySelector('.price-selector button');

    function findMatchingVariant() {
      return productVariants.find(variant => {
        const colorMatch = colorIndex >= 0 ? variant[`option${colorIndex + 1}`] === selectedColor : true;
        const sizeMatch = sizeIndex >= 0 ? variant[`option${sizeIndex + 1}`] === selectedSize : true;
        return colorMatch && sizeMatch;
      });
    }

    function updateUI(variant) {
      if (!variant) {
        addToCartButton.disabled = true;
        addToCartButton.textContent = 'Unavailable';
        priceElement.textContent = 'N/A';
        return;
      }

      addToCartButton.disabled = !variant.available;
      addToCartButton.textContent = variant.available ? 'Add to Cart' : 'Sold Out';
      priceElement.textContent = `$${(variant.price / 100).toFixed(2)}`;
    }

    function updateVariant() {
      const variant = findMatchingVariant();
      updateUI(variant);
    }

    // Color button clicks
    document.querySelectorAll('.color-swatch').forEach(btn => {
      btn.addEventListener('click', () => {
        selectedColor = btn.getAttribute('data-option-value');

        // highlight selected color
        document.querySelectorAll('.color-swatch').forEach(b => {
          b.classList.remove('ring-2', 'ring-offset-2', 'ring-black');
        });
        btn.classList.add('ring-2', 'ring-offset-2', 'ring-black');

        updateVariant();
      });
    });

    // Size button clicks
    document.querySelectorAll('.size-btn').forEach(btn => {
      btn.addEventListener('click', () => {
        selectedSize = btn.getAttribute('data-value');

        // highlight selected size
        document.querySelectorAll('.size-btn').forEach(b => {
          b.classList.remove('bg-black', 'text-white');
        });
        btn.classList.add('bg-black', 'text-white');

        updateVariant();
      });
    });

    // Initial pre-select (optional)
    const defaultColorBtn = document.querySelector('.color-swatch');
    if (defaultColorBtn) {
      selectedColor = defaultColorBtn.getAttribute('data-option-value');
      defaultColorBtn.classList.add('ring-2', 'ring-offset-2', 'ring-black');
    }

    const defaultSizeBtn = document.querySelector('.size-btn');
    if (defaultSizeBtn) {
      selectedSize = defaultSizeBtn.getAttribute('data-value');
      defaultSizeBtn.classList.add('bg-black', 'text-white');
    }

    function updateSizeAvailability() {
  const color = selectedColor;
  const sizeBtns = document.querySelectorAll('.size-btn');

  sizeBtns.forEach(btn => {
    const size = btn.getAttribute('data-value');

    // Find if there's any variant with this color + size
    const matchingVariant = productVariants.find(variant => {
      const colorMatch = colorIndex >= 0 ? variant[`option${colorIndex + 1}`] === color : true;
      const sizeMatch = sizeIndex >= 0 ? variant[`option${sizeIndex + 1}`] === size : true;
      return colorMatch && sizeMatch;
    });

    if (!matchingVariant || !matchingVariant.available) {
      btn.classList.add('opacity-50', 'cursor-not-allowed');
      btn.disabled = true;
      btn.setAttribute('aria-disabled', 'true');
      btn.querySelector('span').insertAdjacentHTML('afterend', `
        <span class="absolute inset-0 flex items-center justify-center">
          <span class="block w-full h-[2px] bg-neutral-900 rotate-135 origin-center"></span>
        </span>
      `);
    } else {
      btn.classList.remove('opacity-50', 'cursor-not-allowed');
      btn.disabled = false;
      btn.removeAttribute('aria-disabled');
      const slash = btn.querySelector('.absolute');
      if (slash) slash.remove();
    }
  });
}


function updateVariant() {
  const variant = findMatchingVariant();
  updateUI(variant);
  updateSizeAvailability(); 
}

  });
</script>

{% schema %}
{
  "name": "Product Details",
  "tag": "section",
  "class": "section",
  "settings": [
    {
      "type": "range",
      "id": "padding_top",
      "min": 0,
      "max": 100,
      "step": 4,
      "unit": "px",
      "label": "t:sections.all.padding.padding_top",
      "default": 36
    },
    {
      "type": "range",
      "id": "padding_bottom",
      "min": 0,
      "max": 100,
      "step": 4,
      "unit": "px",
      "label": "t:sections.all.padding.padding_bottom",
      "default": 36
    },
    {
      "type": "text",
      "id": "metafield_namespace_key",
      "label": "Metafield ",
      "default": "custom.short_description"
    }
  ],
  "presets": [
    {
      "name": "Product Details"
    }
  ]
}
{% endschema %}
