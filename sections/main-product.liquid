<!-- Desktop view -->
<section
  class="product-section section-{{ section.id }}-padding hidden lg:!flex lg:flex-row gap-4 lg:gap-8 px-4 py-8"
  style="background-color: var(--background); color: var(--text);"
>
  {%- comment -%} Left: Image Gallery {%- endcomment -%}
  <div class="product-gallery w-1/2">
    <div
      class="gallery-wrapper sticky top-[80px] h-[calc(100vh-80px)]"
      style="max-height: calc(100vh - 70px); overflow-y: auto; position: sticky; top: 70px;"
    >
      <div class="gallery-track w-full h-full relative" data-gallery-track>
        {%- if product.media.size >= 0 -%}
          {%- for media in product.media -%}
            <div
              class="gallery-item absolute inset-0 w-full h-full {% if forloop.first %}is-active{% endif %}"
              data-index="{{ forloop.index0 }}"
            >
              {% if media.media_type == 'image' %}
                <img
                  src="{{ media | image_url: width: 1200 }}"
                  alt="{{ media.alt | escape }}"
                  class="w-full h-full object-cover"
                  loading="{% if forloop.first %}lazy{% else %}lazy{% endif %}"
                  width="full"
                  height="full"
                >
              {% elsif media.media_type == 'video' %}
                {{
                  media
                  | video_tag:
                    autoplay: true,
                    loop: true,
                    muted: true,
                    playsinline: true,
                    controls: true,
                    class: 'w-full h-full object-cover'
                }}
              {% endif %}
            </div>
          {%- endfor -%}
        {%- endif -%}

        <!-- Add vertical image strip -->
        <div class="image-strip-container opacity-0">
          <div class="image-strip">
            {%- for media in product.media -%}
              <div
                class="strip-image-wrapper {% if forloop.first %}active{% endif %}"
                data-strip-index="{{ forloop.index0 }}"
              >
                {% if media.media_type == 'video' %}
                  <div class="relative w-full h-full">
                    <img
                      src="{{ media.preview_image | image_url: width: 150 }}"
                      alt="{{ media.alt | escape }}"
                      class="strip-image"
                      loading="lazy"
                      width="150"
                      height="full"
                    >
                    <span class="video-play-icon absolute inset-0 flex items-center justify-center pointer-events-none">
                      <svg width="32" height="32" fill="none" viewBox="0 0 32 32">
                        <circle cx="16" cy="16" r="16" fill="rgba(0,0,0,0.5)"/>
                        <polygon points="13,10 24,16 13,22" fill="white"/>
                      </svg>
                    </span>
                  </div>
                {% else %}
                  <img
                    src="{{ media | image_url: width: 150 }}"
                    alt="{{ media.alt | escape }}"
                    class="strip-image"
                    loading="lazy"
                    width="150"
                    height="full"
                  >
                {% endif %}
              </div>
            {%- endfor -%}
          </div>
        </div>
      </div>
    </div>
  </div>

  {%- comment -%} Right: Product Details {%- endcomment -%}
  <div class="product-details w-1/2 mx-2">
    <div
      class="details-inner sticky top-[80px] flex flex-col"
      style="height: calc(100vh - 70px); overflow-y: auto; position: sticky; top: 70px;"
    >
      {%- comment -%} Header {%- endcomment -%}
      <div class="product-header w-[80%] space-y-8">
        <div class="header-top flex flex-col gap-4">
          <div class="product-status flex items-center gap-4">
            {% if product.available != true %}
              <span class="inline-flex items-center px-3 py-1 text-[14px] tracking-wider bg-black text-white uppercase rounded"
                >Sold Out</span
              >
            {% endif %}
          </div>
          <h1
            class="text-[42px] pb-10"
            style="font-weight: {{section.settings.product_name_font_weight}};  padding-bottom: 10px;"
          >
            {{ product.title }}
          </h1>

          {%- comment -%} Product Variant {%- endcomment -%}
          {%- assign color_option = product.options_with_values | where: 'name', 'Color' | first -%}
          {%- if color_option and color_option.values.size > 0 -%}
            <div class="product-variants my-4">
              <div class="flex items-center gap-2">
                <span class="inline-block text-[14px] font-medium">SELECT COLOR:</span>
                <span class="active-color text-[14px] font-medium uppercase" data-active-color>
                  {{- color_option.values | first -}}
                </span>
              </div>
              <div class="color-options flex gap-4 p-2">
                {%- for value in color_option.values -%}
                  <button
                    type="button"
                    class="color-swatch rounded-full hover:scale-110 transition-transform focus:outline-none"
                    style="background-color: {{ value | handleize }}; width: 20px; height: 20px;"
                    data-option-value="{{ value | escape }}"
                  >
                    <span class="sr-only">{{ value }}</span>
                  </button>
                {%- endfor -%}
              </div>
            </div>
          {%- endif -%}
        </div>
      </div>

      {% comment %} tabs  {% endcomment %}
      <div class="product-tabs w-[80%] flex-1 overflow-hidden">
        <!-- Tab Navigation -->
        <div class="tabs-nav flex justify-evenly space-x-3 h-auto mt-2 w-full">
          {%- assign tab_index = 0 -%}
          {%- for block in section.blocks -%}
            {% if block.type == 'tab_description' or block.type == 'tab_details' or block.type == 'tab_sizing' %}
              {%- assign tab_index = tab_index | plus: 1 -%}
              <button
                class="
                  tab-btn group text-[16px] text-left pt-[5px] mr-3 w-full transition-colors duration-300 relative
                  {% if tab_index == 1 %}
                    active-tab text-black
                  {% else %}
                    text-gray-600 hover:text-black
                  {% endif %}
                "
                data-tab="tab-{{ block.id }}"
                {{ block.shopify_attributes }}
              >
                <!-- Div acting as top border -->
                <div
                  class="
                    tab-top-bar absolute top-0 left-0 right-0 rounded transition-colors duration-300
                    {% if tab_index == 1 %}
                      bg-black
                    {% else %}
                      bg-gray-400 group-hover:bg-black
                    {% endif %}
                  "
                  style="height: 3px; "
                >
                  &nbsp;
                </div>

                {{ block.settings.title }}
              </button>
            {% endif %}
          {%- endfor -%}
        </div>

        <!-- Tab Content -->
        <div class="tab-content mt-6 overflow-y-auto">
          {% for block in section.blocks %}
            <div
              class="tab-pane {% if forloop.first %}active{% else %}hidden{% endif %} tracking-normal leading-none text-[14px]"
              data-content="tab-{{ block.id }}"
            >
              {% case block.type %}
                {% when 'tab_description' %}
                  {{ product.description }}

                {% when 'tab_details' %}
                  {% if block.settings.metafield_namespace_key != blank %}
                    <div class="prose prose-lg max-w-none">
                      {{ block.settings.metafield_namespace_key }}
                    </div>
                  {% else %}
                    <p class="text-gray-500">No details available for this product.</p>
                  {% endif %}

                {% when 'tab_sizing' %}
                  <button
                    id="open-size-chart"
                    class="bg-black text-white px-4 py-2 rounded hover:bg-gray-900 transition-colors"
                  >
                    Size Chart
                  </button>

                  <div
                    id="size-chart-drawer"
                    class="fixed top-0 right-0 h-full bg-white shadow-lg transform translate-x-full hidden transition-transform duration-300 ease-in-out overflow-y-auto"
                    style="width: 40vw; z-index: 1001;"
                    aria-hidden="true"
                  >
                    <div class="p-6" style="text-decoration-line: underline; margin-top: 12vh; padding: 0 10px; display: flex; flex-direction: row-reverse;">
                      <button
                        id="close-size-chart"
                        class="text-gray-500 hover:text-black transition-colors "
                        aria-label="Close size chart"
                      >
                        CLOSE
                      </button>
                    </div>
                    <div class="p-4">
                      {% if block.settings.size_chart_page != blank %}
                        <div class="prose max-w-none">
                          {{ block.settings.size_chart_page.content }}
                        </div>
                      {% else %}
                        <p class="text-gray-500">No size guide page selected.</p>
                      {% endif %}
                    </div>
                  </div>
                  <div id="size-chart-backdrop" class="fixed inset-0 bg-black/60 hidden z-[999]">&nbsp;</div>
              {% endcase %}
            </div>
          {% endfor %}
        </div>
      </div>

      {%- comment -%} bottom utility {%- endcomment -%}
      {%- assign option_names = product.options_with_values | map: 'name' -%}
      {%- assign size_index = 0 -%}
      {%- for name in option_names -%}
        {%- if name == 'Size' -%}
          {%- assign size_index = forloop.index -%}
        {%- endif -%}
      {%- endfor -%}

      <div
        class="size-price-selector flex flex-col gap-6 text-[14px] font-medium"
      >
        <!-- DELIVERY SECTION -->
        {%- for block in section.blocks -%}
          {%- if block.type == 'delivery_address' -%}
            <div class="flex justify-between items-start border-b border-gray-400 py-4" {{ block.shopify_attributes }}>
              {% if customer and customer.default_address %}
                <!-- Logged-in: Show saved address -->
                <div>
                  <div class="font-medium uppercase">DELIVER TO</div>
                  <div class="text-sm leading-relaxed">
                    {{ customer.default_address | format_address }}
                  </div>
                </div>
                <a
                  href="#"
                  class="border border-black px-2 py-0 text-[14px] font-medium rounded-xl transition-colors duration-200 "
                  style="background-color: var(--secondary_button_label); color: var(--secondary_button_text_color); width: 8rem; text-align: center;"
                  onmouseenter="this.style.backgroundColor='var(--hover)'"
                  onmouseleave="this.style.backgroundColor='var(--secondary_button_label)'"
                  aria-label="Change delivery address"
                >
                  CHANGE
                </a>
              {% else %}
                <!-- Guest: Show login prompt -->
                <div>
                  <div class="font-medium uppercase">DELIVER TO</div>
                  <div class="text-[14px] text-gray-600">
                    Please <a href="/account/login" class="underline text-blue-600">log in</a> to set your delivery
                    address.
                  </div>
                </div>
                <a
                  href="#"
                  class="border border-black px-2 py-0 text-[14px] font-medium rounded-xl transition-colors duration-200 "
                  style="background-color: var(--secondary_button_label); color: var(--secondary_button_text_color); width: 8rem; text-align: center;"
                  onmouseenter="this.style.backgroundColor='var(--hover)'"
                  onmouseleave="this.style.backgroundColor='var(--secondary_button_label)'"
                  aria-label="Change delivery address"
                >
                  CHANGE
                </a>
              {% endif %}
            </div>
          {%- endif -%}
        {%- endfor -%}

        <!-- QUANTITY SELECTOR -->
        {%- for block in section.blocks -%}
          {%- if block.type == 'quantity_selector' -%}
            <div class="flex justify-between items-center border-b border-gray-400 pb-4" {{ block.shopify_attributes }}>
              <span class="font-medium uppercase ">QUANTITY SELECTOR</span>
              <div
                class="flex items-center justify-center py-1 border rounded-xl overflow-hidden h-10"
                style="width: 8rem;"
              >
                <button
                  type="button"
                  id="decreaseQty"
                  class="px-3 text-[16px]   hover:bg-gray-100"
                  aria-label="Decrease quantity"
                >
                  -
                </button>
                <span
                  id="quantityDisplay"
                  class="px-3 border-x-1 border-black text-[16px]  "
                  style="border-left: 1px solid black; border-right: 1px solid black;"
                  >1</span
                >
                <input type="hidden" name="quantity" id="quantityInput" value="1">
                <button
                  type="button"
                  id="increaseQty"
                  class="px-3 text-[16px]  hover:bg-gray-100"
                  aria-label="Increase quantity"
                >
                  +
                </button>
              </div>
            </div>
          {%- endif -%}
        {%- endfor -%}

        <!-- SIZE SELECTOR -->
        <div class="flex justify-between  items-center gap-2">
          <span class="font-medium uppercase">SELECT SIZE</span>
          <div class="flex gap-2 flex-wrap">
            {%- assign size_options = product.options_with_values | where: 'name', 'Size' | first -%}
            {%- for value in size_options.values -%}
              {%- assign is_available = false -%}
              {%- for variant in product.variants -%}
                {% assign size_option = 'option' | append: size_index %}
                {% if variant[size_option] == value and variant.available %}
                  {%- assign is_available = true -%}
                  {% break %}
                {% endif %}
              {%- endfor -%}

              <button
                type="button"
                class="
                  size-btn relative px-3 h-10 min-w-[2.5rem] flex items-center justify-center border-transparent rounded font-semibold bg-white
                  {% if forloop.first and is_available %}bg-black text-white{% endif %}
                  {% unless is_available %}opacity-50 cursor-not-allowed{% endunless %}
                "
                data-value="{{ value | escape }}"
                {% unless is_available %}
                  disabled aria-disabled="true"
                {% endunless %}
                aria-label="Size {{ value }}{% unless is_available %} - Sold out{% endunless %}"
              >
                <span class="label z-10">{{ value }}</span>

                {% unless is_available %}
                  <span
                    class="absolute inset-0 flex items-center justify-center pointer-events-none"
                    aria-hidden="true"
                  >
                    <span class="block w-full  bg-black -rotate-45" style="height: 1px; rotate: -45deg"></span>
                  </span>
                {% endunless %}
              </button>
            {%- endfor -%}
          </div>
        </div>

        <!-- PRICE + ACTIONS -->
        <div class="flex justify-between items-center border-t border-gray-400 pt-4" style="padding-top: 1rem;">
          <!-- Price + Compare at Price -->
          <div class="text-[18px]  flex flex-col">
            <div class="flex items-center gap-2">
              <span style="font-weight: {{section.settings.product_price_font_weight}};">
                {{- product.price | money -}}
              </span>
              {% if product.compare_at_price > product.price %}
                <span class="text-black text-[14px]">|</span>
                <span class="line-through text-gray-500">{{ product.compare_at_price | money }}</span>
              {% endif %}
            </div>

            {% if product.compare_at_price > product.price %}
              <div class="text-[14px] text-red-600 font-medium">
                Save {{ product.compare_at_price | minus: product.price | money }} (
                {{
                  product.compare_at_price
                  | minus: product.price
                  | times: 100
                  | divided_by: product.compare_at_price
                -}}
                % off)
              </div>
            {% endif %}
          </div>

          <!-- Add to Cart -->
          <div class="flex gap-2">
            {% if product.available %}

              <!-- ADD TO CART form -->
              <form method="post" action="/cart/add">
                <input type="hidden" name="id" value="{{ product.variants.first.id }}">
                <button
                  class="text-white text-4xl px-6 rounded group flex items-center justify-between gap-2"
                  style="background-color: var(--button); color: var(--button_label); height: 50px; width: 370px;"
                  onmouseenter="this.style.backgroundColor='var(--hover)'"
                  onmouseleave="this.style.backgroundColor='var(--button)'"
                  aria-label="Add to cart"
                  type="submit"
                >
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    class="w-6 h-6 object-contain transition-transform duration-300 group-hover:-rotate-90 mx-1"
                    fill="none"
                    viewBox="0 0 9 9"
                    stroke-width="1.5"
                    stroke="currentColor"
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    aria-hidden="true"
                  >
                    <path d="M1.1875 7.7334H7.6599M7.6599 7.7334V1.261M7.6599 7.7334L1.1875 1.261"/>
                  </svg>
                  ADD TO CART
                </button>
              </form>
            {% else %}
              <!-- SOLD OUT button -->
              <button
                class="bg-gray-400 text-white text-4xl px-6 py-3 rounded cursor-not-allowed"
                type="button"
                disabled
              >
                SOLD OUT
              </button>
            {% endif %}
          </div>
        </div>
      </div>
    </div>
  </div>
</section>

<!-- Mobile view -->
<section
  class="lg:hidden flex flex-col gap-6 px-4 py-4"
  style="background-color: var(--background); color: var(--text);"
>
  <!-- Mobile Image Gallery -->
  <div class="mobile-gallery">
    <!-- Main Image Stack -->
    <div class="main-images relative h-[60vh] overflow-hidden">
      {%- if product.media.size > 0 -%}
        {%- for media in product.media -%}
          <div
            class="mobile-gallery-item w-full h-full {% unless forloop.first %}absolute top-0 left-0{% endunless %} {% if forloop.first %}relative active{% endif %}"
            data-mobile-index="{{ forloop.index0 }}"
            style="opacity: {% if forloop.first %}1{% else %}0{% endif %}; transition: opacity 0.3s ease;"
          >
            {% if media.media_type == 'image' %}
              <img
                srcset="
                  {%- if media.width >= 165 -%}{{ media | image_url: width: 165 }} 165w,{%- endif -%}
                  {%- if media.width >= 360 -%}{{ media | image_url: width: 360 }} 360w,{%- endif -%}
                  {%- if media.width >= 535 -%}{{ media | image_url: width: 535 }} 535w,{%- endif -%}
                  {%- if media.width >= 750 -%}{{ media | image_url: width: 750 }} 750w,{%- endif -%}
                  {%- if media.width >= 1070 -%}{{ media | image_url: width: 1070 }} 1070w,{%- endif -%}
                  {%- if media.width >= 1500 -%}{{ media | image_url: width: 1500 }} 1500w,{%- endif -%}
                  {{ media | image_url }} {{ media.width }}w
                "
                src="{{ media | image_url: width: 1200 }}"
                alt="{{ media.alt | escape }}"
                class="w-full h-full object-cover"
                loading="{% if forloop.first %}lazy{% else %}lazy{% endif %}"
                width="full"
                height="full"
              >
            {% elsif media.media_type == 'video' %}
              {{
                media
                | video_tag:
                  autoplay: true,
                  loop: true,
                  muted: true,
                  playsinline: true,
                  controls: true,
                  class: 'w-full h-full object-cover'
              }}
            {% endif %}
          </div>
        {%- endfor -%}
      {%- endif -%}
    </div>

    <!-- Mobile Thumbnail Strip -->
    <div class="thumbnail-strip mt-2 pb-2 overflow-x-auto mx-auto w-fit">
      <div class="flex gap-2 snap-x p-4">
        {%- for media in product.media -%}
          <button
            class="thumbnail-item flex-shrink-0 w-20 h-20 p-2 {% if forloop.first %} active{% endif %}"
            data-thumb-index="{{ forloop.index0 }}"
            aria-label="product image thumbnail"
          >
            {% if media.media_type == 'video' %}
              <div class="relative w-full h-full">
                <img
                  src="{{ media.preview_image | image_url: width: 150 }}"
                  alt="Product video thumbnail"
                  class="w-full h-full object-cover rounded"
                  loading="lazy"
                  width="full"
                  height="full"
                >
                <span class="video-play-icon absolute inset-0 flex items-center justify-center pointer-events-none">
                  <svg width="32" height="32" fill="none" viewBox="0 0 32 32">
                    <circle cx="16" cy="16" r="16" fill="rgba(0,0,0,0.5)"/>
                    <polygon points="13,10 24,16 13,22" fill="white"/>
                  </svg>
                </span>
              </div>
            {% else %}
              <img
                src="{{ media | image_url: width: 150 }}"
                alt="{% if media.alt != blank %}{{ media.alt | escape }}{% else %}Product image thumbnail{% endif %}"
                class="w-full h-full object-cover rounded"
                loading="lazy"
                width="full"
                height="full"
              >
            {% endif %}
          </button>
        {%- endfor -%}
      </div>
    </div>
  </div>

  <!-- Mobile Product Details -->
  <div
    class="details-inner flex flex-col"
  >
    {%- comment -%} Header {%- endcomment -%}
    <div class="product-header w-[80%] space-y-8">
      <div class="header-top flex flex-col gap-4">
        <div class="product-status flex items-center gap-4">
          {% if product.available != true %}
            <span class="inline-flex items-center px-3 py-1 text-[14px] tracking-wider bg-black text-white uppercase rounded"
              >Sold Out</span
            >
          {% endif %}
        </div>
        <h1 class="text-[42px] font-bold">{{ product.title }}</h1>

        {%- comment -%} Product Variant {%- endcomment -%}
        <div class="product-variants my-4">
          <div class="flex items-center gap-2">
            <span class="inline-block text-[14px] font-medium">SELECT COLOR:</span>
            {%- assign first_color = product.options_with_values | where: 'name', 'Color' | first -%}
            <span class="active-color text-[14px]" data-active-color>
              {{- first_color.values | first -}}
            </span>
          </div>
          <div class="color-options flex gap-3 p-2">
            {%- for option in product.options_with_values -%}
              {%- if option.name == 'Color' -%}
                {%- for value in option.values -%}
                  <button
                    type="button"
                    class="color-swatch w-8 h-8 rounded-full hover:scale-110 transition-transform focus:outline-none"
                    style="background-color: {{ value | handleize }};"
                    data-option-value="{{ value | escape }}"
                  >
                    <span class="sr-only">{{ value }}</span>
                  </button>
                {%- endfor -%}
              {%- endif -%}
            {%- endfor -%}
          </div>
        </div>
      </div>
    </div>

    {% comment %} tabs  {% endcomment %}
    <div class="product-tabs flex-1 overflow-hidden">
      <!-- Tab Navigation -->
      <div class="tabs-nav flex justify-evenly space-x-3 h-auto mt-2 w-full">
        {%- assign tab_index = 0 -%}
        {%- for block in section.blocks -%}
          {% if block.type == 'tab_description' or block.type == 'tab_details' or block.type == 'tab_sizing' %}
            {%- assign tab_index = tab_index | plus: 1 -%}
            <button
              class="
                tab-btn group text-[12px] text-left mr-3 w-full transition-colors duration-300 relative
                {% if tab_index == 1 %}
                  active-tab text-black
                {% else %}
                  text-gray-600
                {% endif %}
              "
              data-tab="tab-{{ block.id }}"
              {{ block.shopify_attributes }}
            >
              <div
                class="
                  tab-top-bar absolute top-0 left-0 right-0 rounded transition-colors duration-300
                  {% if tab_index == 1 %}
                    bg-black
                  {% else %}
                    bg-gray-400 group-hover:bg-black
                  {% endif %}
                "
                style="height: 2px;"
              >
                &nbsp;
              </div>
              {{ block.settings.title }}
            </button>
          {% endif %}
        {%- endfor -%}
      </div>

      <!-- Tab Content -->
      <div class="tab-content mt-6 overflow-y-auto max-h-[50vh]">
        {% for block in section.blocks %}
          <div
            class="tab-pane {% if forloop.first %}active{% else %}hidden{% endif %} tracking-normal leading-1 text-[12px]"
            data-content="tab-{{ block.id }}"
          >
            {% case block.type %}
              {% when 'tab_description' %}
                {{ product.description }}

              {% when 'tab_details' %}
                {% if block.settings.metafield_namespace_key != blank %}
                  <div class="prose prose-lg max-w-none">
                    {{ block.settings.metafield_namespace_key }}
                  </div>
                {% else %}
                  <p class="text-gray-500">No details available for this product.</p>
                {% endif %}

              {% when 'tab_sizing' %}
                <button
                  id="open-mobile-size-chart"
                  class="bg-black text-white px-4 py-2 rounded hover:bg-gray-900 transition-colors"
                >
                  Size Chart
                </button>

                <div
                  id="mobile-size-chart-drawer"
                  class="fixed top-0 right-0 w-full h-full bg-white shadow-lg transform translate-x-full hidden transition-transform duration-300 overflow-y-auto"
                  style="z-index: 1000;"
                  aria-hidden="true"
                >
                  <div class="p-6" style="text-decoration-line: underline; display: flex; flex-direction: row-reverse;">
                    <button
                      id="close-mobile-size-chart"
                      class="text-gray-500 hover:text-black transition-colors"
                      aria-label="Close size chart"
                    >
                      CLOSE
                    </button>
                  </div>
                  <div class="p-4">
                    {% if block.settings.size_chart_page != blank %}
                      <div class="prose max-w-none">
                        {{ block.settings.size_chart_page.content }}
                      </div>
                    {% else %}
                      <p class="text-gray-500">No size guide page selected.</p>
                    {% endif %}
                  </div>
                </div>
            {% endcase %}
          </div>
        {% endfor %}
      </div>
    </div>

    {%- comment -%} bottom utility {%- endcomment -%}
    {%- assign option_names = product.options_with_values | map: 'name' -%}
    {%- assign size_index = 0 -%}
    {%- for name in option_names -%}
      {%- if name == 'Size' -%}
        {%- assign size_index = forloop.index -%}
      {%- endif -%}
    {%- endfor -%}

    <div
      class="size-price-selector flex flex-col gap-6 text-[12px]"
    >
      <!-- DELIVERY SECTION -->
      {%- for block in section.blocks -%}
        {%- if block.type == 'delivery_address' -%}
          <div class="flex justify-between items-start border-b border-gray-400 py-4" {{ block.shopify_attributes }}>
            {% if customer and customer.default_address %}
              <!-- Logged-in: Show saved address -->
              <div>
                <div class="font-semibold uppercase">DELIVER TO</div>
                <div class="text-sm leading-relaxed">
                  {{ customer.default_address | format_address }}
                </div>
              </div>
              <a
                href="#"
                class="border border-black px-2 py-1 text-[14px] font-medium rounded transition-colors duration-200 "
                style="background-color: var(--secondary_button_label); color: var(--secondary_button_text_color);"
                onmouseenter="this.style.backgroundColor='var(--hover)'"
                onmouseleave="this.style.backgroundColor='var(--secondary_button_label)'"
                aria-label="Change delivery address"
              >
                CHANGE
              </a>
            {% else %}
              <!-- Guest: Show login prompt -->
              <div>
                <div class="font-semibold uppercase">DELIVER TO</div>
                <div class="text-[10px] text-gray-600">
                  Please <a href="/account/login" class="underline !text-blue-900">log in</a> to set your delivery
                  address.
                </div>
              </div>
              <a
                href="#"
                class="border border-black  py-0 text-[14px] font-medium rounded transition-colors duration-200 "
                style="background-color: var(--secondary_button_label); color: var(--secondary_button_text_color); width: 8rem; text-align: center;"
                aria-label="Change delivery address"
              >
                CHANGE
              </a>
            {% endif %}
          </div>
        {%- endif -%}
      {%- endfor -%}

      <!-- QUANTITY SELECTOR -->
      {%- for block in section.blocks -%}
        {%- if block.type == 'quantity_selector' -%}
          <div class="flex justify-between items-center border-b border-gray-400 pb-4" {{ block.shopify_attributes }}>
            <span class="uppercase font-semibold">QUANTITY SELECTOR</span>
            <div class="flex items-center justify-center h-10 border rounded" style="width: 8rem;">
              <button
                type="button"
                id="decreaseQty"
                class="px-3 py-1 text-lg hover:bg-gray-100"
                aria-label="Decrease quantity"
              >
                -
              </button>
              <span
                id="quantityDisplay"
                class="px-4"
                style="border-left: 1px solid black; border-right: 1px solid black;"
                >1</span
              >
              <input type="hidden" name="quantity" id="quantityInput" value="1">
              <button
                type="button"
                id="increaseQty"
                class="px-3 py-1 text-lg hover:bg-gray-100"
                aria-label="Increase quantity"
              >
                +
              </button>
            </div>
          </div>
        {%- endif -%}
      {%- endfor -%}

      <!-- SIZE SELECTOR -->
      <div class="flex justify-between  items-center gap-2">
        <span class="uppercase font-semibold">SELECT SIZE</span>
        <div class="flex gap-2 flex-wrap">
          {%- assign size_options = product.options_with_values | where: 'name', 'Size' | first -%}
          {%- for value in size_options.values -%}
            {%- assign is_available = false -%}
            {%- for variant in product.variants -%}
              {% assign size_option = 'option' | append: size_index %}
              {% if variant[size_option] == value and variant.available %}
                {%- assign is_available = true -%}
                {% break %}
              {% endif %}
            {%- endfor -%}

            <button
              type="button"
              class="
                size-btn relative px-3 h-10 min-w-[2.5rem] flex items-center justify-center border-transparent rounded font-semibold
                {% if forloop.first and is_available %}bg-black text-white{% endif %}
                {% unless is_available %}opacity-50 cursor-not-allowed bg-gray-200{% endunless %}
              "
              data-value="{{ value | escape }}"
              {% unless is_available %}
                disabled aria-disabled="true"
              {% endunless %}
              aria-label="Size {{ value }}{% unless is_available %} - Sold out{% endunless %}"
            >
              <span class="label z-10">{{ value }}</span>

              {% unless is_available %}
                <span
                  class="absolute inset-0 flex items-center justify-center pointer-events-none"
                  aria-hidden="true"
                >
                  <span class="block w-full  bg-black -rotate-45" style="height: 1px; rotate: -45deg"></span>
                </span>
              {% endunless %}
            </button>
          {%- endfor -%}
        </div>
      </div>

      <!-- PRICE + ACTIONS -->
      <div class="flex flex-col justify-evenly  border-t border-gray-400 pt-4" style="padding-top: 1rem;">
        <!-- Price + Compare at Price -->
        <div class="text-[18px] flex flex-col justify-between">
          <div class="flex items-center gap-2">
            <span>{{ product.price | money }}</span>
            {% if product.compare_at_price > product.price %}
              <span class="text-black text-[14px]">|</span>
              <span class="line-through text-gray-500">{{ product.compare_at_price | money }}</span>
            {% endif %}
          </div>

          {% if product.compare_at_price > product.price %}
            <div class="text-[14px] text-red-600 font-medium">
              Save {{ product.compare_at_price | minus: product.price | money }} (
              {{ product.compare_at_price | minus: product.price | times: 100 | divided_by: product.compare_at_price -}}
              % off)
            </div>
          {% endif %}
        </div>

        <!-- Add to Cart -->
        <div class="flex justify-evenly w-full gap-2">
          {% if product.available %}

            <!-- ADD TO CART form -->
            <form method="post" action="/cart/add">
              <input type="hidden" name="id" value="{{ product.variants.first.id }}">
              <button
                class="text-white text-3xl px-4 py-2 rounded group flex items-center justify-between gap-2"
                style="background-color: var(--button); color: var(--button_label); width: 95vw"
                onmouseenter="this.style.backgroundColor='var(--hover)'"
                onmouseleave="this.style.backgroundColor='var(--button)'"
                aria-label="Add to cart"
                type="submit"
              >
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  class="w-6 h-6 object-contain transition-transform duration-300 group-hover:-rotate-90 mx-1"
                  fill="none"
                  viewBox="0 0 9 9"
                  stroke-width="1.5"
                  stroke="currentColor"
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  aria-hidden="true"
                >
                  <path d="M1.1875 7.7334H7.6599M7.6599 7.7334V1.261M7.6599 7.7334L1.1875 1.261"/>
                </svg>
                ADD TO CART
              </button>
            </form>
          {% else %}
            <!-- SOLD OUT button -->
            <button
              class="bg-gray-400 text-white text-4xl px-4 py-2 rounded cursor-not-allowed"
              type="button"
              disabled
            >
              SOLD OUT
            </button>
          {% endif %}
        </div>
      </div>
    </div>
  </div>
</section>

<style>
  .section-{{ section.id }}-padding {
    padding-top: {{  settings.sections_spacing | times: 0.75 | round: 0 }}px;
    padding-bottom: {{  settings.sections_spacing | times: 0.75 | round: 0 }}px;
    padding-left: {{  settings.side_space | times: 0.75 | round: 0 }}px;
    padding-right: {{  settings.side_space | times: 0.75 | round: 0 }}px;
  }

  @media screen and (min-width: 750px) {
    .section-{{ section.id }}-padding {
      padding-top: {{  settings.sections_spacing}}px;
      padding-bottom: {{  settings.sections_spacing}}px;
      padding-left: {{  settings.side_space  }}px;
      padding-right: {{  settings.side_space }}px;
    }
  }

  #size-chart-drawer {
    transition: transform 1s cubic-bezier(0.4,0,0.2,1);
    transform: translateX(100%);
    will-change: transform;
  }
  #size-chart-drawer.open {
    transform: translateX(0);
  }

  .product-section {
    display: flex;
    height: calc(100vh * {{product.media.size}});
    position: relative;
  }

  .gallery-wrapper {
    position: sticky;
    top: 0;
    height: 100vh;
    overflow: hidden;
  }

  .gallery-track {
    height: 100%;
  }

  .gallery-item {
    opacity: 0;
    transition: opacity 0.3s ease-out;
    will-change: opacity;
  }

  .gallery-item.is-active {
    opacity: 1;
    pointer-events: auto;
    z-index: 1;
  }

  .image-strip-container {
    position: absolute;
    top: 50%;
    left: 10px;
    transform: translateY(-50%);
    z-index: 100;
    transition: opacity 0.3s ease;
  }

  .gallery-track:hover .image-strip-container {
    opacity: 1;
  }

  .image-strip {
    display: flex;
    flex-direction: column;
    gap: 10px;
    padding: 10px;
    border-radius: 8px;
  }

  .strip-image-wrapper {
    width: 60px;
    height: 60px;
    cursor: pointer;
    opacity: 0.7;
    transition: all 0.3s ease;
  }

  .strip-image-wrapper:hover,
  .strip-image-wrapper.active {
    opacity: 1;
    transform: scale(1.1);
    border: 1px solid black;
  }
  .strip-image {
    width: 100%;
    height: 100%;
    object-fit: cover;
    border-radius: 4px;
  }

  .tab-content {
    height: calc(100% - 50px);
  }

  .size-btn {
    transition: all 0.3s ease;
    border: 1px solid #ccc;
  }

  .size-btn:not(:disabled):hover,
  .size-btn.bg-black {
    background-color: black;
    color: white;
  }

  .size-btn:disabled {
    opacity: 0.8;
    cursor: not-allowed;
  }

  /* Mobile-specific styles */
  @media (max-width: 1024px) {
    .mobile-gallery-item {
      will-change: opacity, transform;
      transition: opacity 0.3s ease;
      position: absolute;
      inset: 0;
      max-height: 65vh !important;
      object-fit: cover !important;
      display: block;
    }

    .mobile-gallery-item.active {
      opacity: 1;
      z-index: 2;
      position: relative;
    }

    .thumbnail-item {
      transition: all 0.3s ease;
      opacity: 0.6;
      border: 2px solid transparent;
    }

    .thumbnail-item.active {
      opacity: 1;
      border-color: black;
      transform: scale(1.05);
    }

    .product-tabs {
      height: auto;
      min-height: 200px;
    }

    .tab-content {
      height: auto;
    }

    #mobile-size-chart-drawer {
      transition: transform 0.6s cubic-bezier(0.4,0,0.2,1);
    }

  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', () => {

    function lockBodyScroll() {
      document.body.style.overflow = 'hidden';
      document.body.style.touchAction = 'none';
    }
    function unlockBodyScroll() {
      document.body.style.overflow = '';
      document.body.style.touchAction = '';
    }


    // Mobile size chart button functionality
    const mobileOpenBtn = document.getElementById('open-mobile-size-chart');
const mobileCloseBtn = document.getElementById('close-mobile-size-chart');
const mobileDrawer = document.getElementById('mobile-size-chart-drawer');

if (mobileOpenBtn && mobileCloseBtn && mobileDrawer) {
  mobileOpenBtn.addEventListener('click', function() {
    mobileDrawer.classList.remove('hidden');
    // Use requestAnimationFrame for reliable repaint before transition
    requestAnimationFrame(() => {
      mobileDrawer.classList.remove('translate-x-full');
    });
    document.body.style.overflow = 'hidden';
  });

  mobileCloseBtn.addEventListener('click', function() {
    mobileDrawer.classList.add('translate-x-full');
    document.body.style.overflow = '';
    setTimeout(() => {
      mobileDrawer.classList.add('hidden');
    }, 600); // Match your CSS transition duration (0.6s)
  });

  document.addEventListener('keydown', function(e) {
    if (e.key === 'Escape' && !mobileDrawer.classList.contains('hidden')) {
      mobileCloseBtn.click();
    }
  });
}


      // size-chart button functionality
      const openBtn = document.getElementById("open-size-chart");
      const closeBtn = document.getElementById("close-size-chart");
      const drawer = document.getElementById("size-chart-drawer");
      const backdrop = document.getElementById("size-chart-backdrop");
      
      if (openBtn && drawer && backdrop && closeBtn) {
        openBtn.addEventListener("click", () => {
          drawer.classList.remove("hidden");
          backdrop.classList.remove("hidden");
          setTimeout(() => {
            drawer.classList.add("open");
          }, 20);
          lockBodyScroll();
        });
      
        const closeDrawer = () => {
          drawer.classList.remove("open");
          backdrop.classList.add("hidden");
          unlockBodyScroll();
          setTimeout(() => {
            drawer.classList.add("hidden");
          }, 400); // Match the CSS transition duration
        };
      
        closeBtn.addEventListener("click", closeDrawer);
        backdrop.addEventListener("click", closeDrawer);
      
        document.addEventListener("keydown", (e) => {
          if (e.key === "Escape") {
            closeDrawer();
          }
        });
      }
      


  // Quantity selector functionality
  const increaseBtn = document.getElementById("increaseQty");
  const decreaseBtn = document.getElementById("decreaseQty");
  const quantityDisplay = document.getElementById("quantityDisplay");
  const quantityInput = document.getElementById("quantityInput");


  if (increaseBtn && decreaseBtn && quantityDisplay && quantityInput) {
    let quantity = 1;

    increaseBtn.addEventListener("click", () => {
      quantity++;
      quantityDisplay.textContent = quantity;
      quantityInput.value = quantity;
    });

    decreaseBtn.addEventListener("click", () => {
      if (quantity > 1) {
        quantity--;
        quantityDisplay.textContent = quantity;
        quantityInput.value = quantity;
      }
    });
  }

  // Mobile Gallery Handling
  if (window.innerWidth < 1024) {
    const mobileImages = document.querySelectorAll('.mobile-gallery-item');
    const thumbnails = document.querySelectorAll('.thumbnail-item');
    let currentIndex = 0;

    thumbnails.forEach((thumb, i) => {
      thumb.addEventListener('click', () => {
        console.log('Thumbnail clicked:', i);
        showImage(i);
      });
    });
    
    function showImage(index) {
      mobileImages.forEach((img, i) => {
        if (i === index) {
          img.classList.add('active');
          img.classList.add('relative');
          img.classList.remove('absolute', 'top-0', 'left-0');
          img.style.opacity = '1';
          img.style.zIndex = '2';
          img.style.pointerEvents = 'auto';
        } else {
          img.classList.remove('active');
          img.classList.remove('relative');
          img.classList.add('absolute', 'top-0', 'left-0');
          img.style.opacity = '0';
          img.style.zIndex = '1';
          img.style.pointerEvents = 'none';
        }
      });
    
      thumbnails.forEach((thumb, i) => {
        if (i === index) {
          thumb.classList.add('active');
          thumb.style.opacity = '1';
        } else {
          thumb.classList.remove('active');
          thumb.style.opacity = '0.6';
        }
      });
    
      currentIndex = index;
    }


    // Initialize with first image
    showImage(0);
  }


    // desktop gallery handling
 
      const gallery = document.querySelector('.product-gallery');
      const items = document.querySelectorAll('.gallery-item');
      const stripImages = document.querySelectorAll('.strip-image-wrapper');
      const totalImages = items.length;
    
      if (!gallery || !items.length || !stripImages.length) return;
    
      let scrollLockUntil = 0; // time until scroll is locked out
    
      function updateActiveImage() {

        if (totalImages === 1) {
          items[0].classList.add('is-active');
          stripImages[0].classList.add('active');
          return;
        }
      // Skip scroll-based update if recently clicked
        if (Date.now() < scrollLockUntil) return;
    
        const galleryTop = gallery.offsetTop;
        const scrollPosition = window.pageYOffset;
        const sectionHeight = gallery.offsetHeight;
        const windowHeight = window.innerHeight;
        const scrollableDistance = sectionHeight - windowHeight;
    
        const scrollFraction = (scrollPosition - galleryTop) / scrollableDistance;
        const imageIndex = Math.min(Math.floor(scrollFraction * (totalImages - 0.1)), totalImages - 1);
        const targetIndex = Math.max(0, imageIndex);
    
        items.forEach((item, index) => {
          item.classList.toggle('is-active', index === targetIndex);
          const video = item.querySelector('video');
          if (video) {
            if (index === targetIndex) {
              video.muted = true;
              video.play().catch(() => {}); // Prevents errors if play is interrupted
            } else {
              video.pause();
              video.currentTime = 0;
            }
          }
        });
        
        stripImages.forEach((img, index) => {
          img.classList.toggle('active', index === targetIndex);
        });
      }
    
      // Throttle scroll handler using requestAnimationFrame
      let ticking = false;
      window.addEventListener('scroll', () => {
        if (!ticking) {
          window.requestAnimationFrame(() => {
            updateActiveImage();
            ticking = false;
          });
          ticking = true;
        }
      });
    
      // Manual image switching on click
      stripImages.forEach((stripImage, index) => {
        stripImage.addEventListener('click', () => {
          scrollLocked = true;
          setTimeout(() => {
            scrollLocked = false;
          }, 2000);
          
    
          items.forEach((item, i) => {
            item.classList.toggle('is-active', i === index);
            const video = item.querySelector('video');
            if (video) {
              if (i === index) {
                video.muted = true; // Ensure muted for autoplay
                video.play();
              } else {
                video.pause();
                video.currentTime = 0;
              }
            }
            
            
          });
    
          stripImages.forEach((img, i) => {
            img.classList.toggle('active', i === index);
          });
        });
      });
    
      // Set initial active image
      updateActiveImage();

    // tab-btn handling
   const tabButtons = document.querySelectorAll(".tab-btn");
   const tabPanes = document.querySelectorAll(".tab-pane");

  tabButtons.forEach((button) => {
    button.addEventListener("click", () => {
      const targetTab = button.getAttribute("data-tab");
      const borderDiv = button.querySelector(".tab-top-bar"); // Get the border div with specific class

      // Reset all tabs to inactive state
      tabButtons.forEach((btn) => {
        const btnBorderDiv = btn.querySelector(".tab-top-bar");
        
        // Remove active classes from button
        btn.classList.remove("text-black", "active-tab");
        btn.classList.add("text-gray-600");
        
        // Reset border div to inactive state
        if (btnBorderDiv) {
          btnBorderDiv.classList.remove("bg-black");
          btnBorderDiv.classList.add("bg-gray-400");
        }
      });

      // Set clicked tab to active state
      button.classList.remove("text-gray-600");
      button.classList.add("text-black", "active-tab");
      
      // Set border div to active state
      if (borderDiv) {
        borderDiv.classList.remove("bg-gray-400");
        borderDiv.classList.add("bg-black");
      }

      // Handle tab pane visibility
      tabPanes.forEach((pane) => {
        if (pane.getAttribute("data-content") === targetTab) {
          pane.classList.remove("hidden");
          pane.classList.add("block");
        } else {
          pane.classList.add("hidden");
          pane.classList.remove("block");
        }
      });
  });
});

tabButtons.forEach((button) => {
  const borderDiv = button.querySelector(".tab-top-bar");
  
  button.addEventListener("mouseenter", () => {
    // Only apply hover if not active
    if (!button.classList.contains("active-tab")) {
      button.classList.add("text-black");
      if (borderDiv) {
        borderDiv.classList.remove("bg-gray-400");
        borderDiv.classList.add("bg-black");
      }
    }
  });
  
  button.addEventListener("mouseleave", () => {
    // Only remove hover if not active
    if (!button.classList.contains("active-tab")) {
      button.classList.remove("text-black");
      button.classList.add("text-gray-600");
      if (borderDiv) {
        borderDiv.classList.remove("bg-black");
        borderDiv.classList.add("bg-gray-400");
      }
    }
  });
});
    

  // color swatch handling 
    const colorSwatches = document.querySelectorAll('.color-swatch');
    const activeColorDisplays = document.querySelectorAll('[data-active-color]');
    let lastSelectedColor = '';

    function updateDisplays(color) {
      activeColorDisplays.forEach(display => {
        display.textContent = color;
      });
    }

  function setActiveSwatch(swatch) {
    const selectedColor = swatch.getAttribute('data-option-value');

    // Remove ring from all
    colorSwatches.forEach((el) => {
      el.classList.remove('ring-1', 'ring-offset-1', 'ring-black');
    });

    // Force reflow then add ring
    swatch.offsetWidth;
    swatch.classList.add('ring-1', 'ring-offset-2', 'ring-black');

    // Update visible color name
    activeColorDisplays.forEach((el) => {
      el.textContent = selectedColor;
    });

    lastSelectedColor = selectedColor;

    swatch.blur();

    updateVariant(); 
  }

  colorSwatches.forEach(swatch => {
    const swatchColor = swatch.getAttribute('data-option-value');

    swatch.addEventListener('click', () => setActiveSwatch(swatch));

    swatch.addEventListener('mouseenter', () => {
      if (swatchColor) updateDisplays(swatchColor);
    });

    swatch.addEventListener('mouseleave', () => {
      if (lastSelectedColor) updateDisplays(lastSelectedColor);
    });
  });

  // Initialize first swatch as selected
  if (colorSwatches.length > 0) {
    setActiveSwatch(colorSwatches[0]);
  }
      // Size button handling
    const sizeButtons = document.querySelectorAll('.size-btn');

    // Set initial active state
    const firstSizeBtn = document.querySelector('.size-btn');
    if (firstSizeBtn) {
      firstSizeBtn.classList.add('active', 'bg-black', 'text-white');
    }

    sizeButtons.forEach((btn) => {
      btn.addEventListener('click', () => {
        sizeButtons.forEach((b) => b.classList.remove('active', 'bg-black', 'text-white'));
        btn.classList.add('active', 'bg-black', 'text-white');
      });
    });


    // variant logic
    const productOptions = {{ product.options | json }};
    const productVariants = {{ product.variants | json }};

    const colorIndex = productOptions.findIndex(opt => opt.toLowerCase() === 'color');
    const sizeIndex = productOptions.findIndex(opt => opt.toLowerCase() === 'size');

    let selectedColor = null;
    let selectedSize = null;

    const priceElement = document.querySelector('.price-selector span.text-5xl');
    const addToCartButton = document.querySelector('.price-selector button');

    function findMatchingVariant() {
      return productVariants.find(variant => {
        const colorMatch = colorIndex >= 0 ? variant[`option${colorIndex + 1}`] === selectedColor : true;
        const sizeMatch = sizeIndex >= 0 ? variant[`option${sizeIndex + 1}`] === selectedSize : true;
        return colorMatch && sizeMatch;
      });
    }

    function updateUI(variant) {
      if (!variant) {
        addToCartButton.disabled = true;
        addToCartButton.textContent = 'Unavailable';
        priceElement.textContent = 'N/A';
        return;
      }

      addToCartButton.disabled = !variant.available;
      addToCartButton.textContent = variant.available ? 'Add to Cart' : 'Sold Out';
      priceElement.textContent = `$${(variant.price / 100).toFixed(2)}`;
    }

    // Size button clicks
    document.querySelectorAll('.size-btn').forEach(btn => {
      btn.addEventListener('click', () => {
        selectedSize = btn.getAttribute('data-value');

        // highlight selected size
        document.querySelectorAll('.size-btn').forEach(b => {
          b.classList.remove('bg-black', 'text-white');
        });
        btn.classList.add('bg-black', 'text-white');

        updateVariant();
      });
    });

 

    const defaultSizeBtn = document.querySelector('.size-btn');
    if (defaultSizeBtn) {
      selectedSize = defaultSizeBtn.getAttribute('data-value');
      defaultSizeBtn.classList.add('bg-black', 'text-white');
    }

    function updateSizeAvailability() {
  const color = selectedColor;
  const sizeBtns = document.querySelectorAll('.size-btn');

  sizeBtns.forEach(btn => {
    const size = btn.getAttribute('data-value');

      // Find if there's any variant with this color + size
      const existingSlash = btn.querySelector('.unavailable-slash');
      if (!matchingVariant || !matchingVariant.available) {
        btn.classList.add('opacity-50', 'cursor-not-allowed');
        btn.disabled = true;
        btn.setAttribute('aria-disabled', 'true');

    if (!existingSlash) {
      btn.insertAdjacentHTML('beforeend', `
        <span class="absolute inset-0 flex items-center justify-center unavailable-slash">
          <span class="block w-full h-[2px] bg-neutral-900 rotate-[135deg] origin-center"></span>
        </span>
      `);
    }
      } else {
        btn.classList.remove('opacity-50', 'cursor-not-allowed');
          btn.disabled = false;
      btn.removeAttribute('aria-disabled');
    if (existingSlash) existingSlash.remove();
  }
    });
  }


  function updateVariant() {
    const variant = findMatchingVariant();
    updateUI(variant);
    updateSizeAvailability();
  }



  });
</script>

{% schema %}
{
  "name": "Product Details",
  "tag": "section",
  "class": "section",
  "settings": [
    {
      "type": "color_scheme",
      "id": "color_scheme",
      "label": "Color scheme",
      "default": "background-1"
    },
    {
      "type": "select",
      "id": "product_name_font_weight",
      "label": "Product Name",
      "info": "Font Weight",
      "options": [
        {
          "value": "300",
          "label": "Light"
        },
        {
          "value": "400",
          "label": "Normal"
        },
        {
          "value": "500",
          "label": "Medium"
        },
        {
          "value": "600",
          "label": "Semi Bold"
        },
        {
          "value": "700",
          "label": "Bold"
        }
      ],
      "default": "400"
    },
    {
      "type": "select",
      "id": "product_price_font_weight",
      "label": "Product Price",
      "info": "Font Weight",
      "options": [
        {
          "value": "300",
          "label": "Light"
        },
        {
          "value": "400",
          "label": "Normal"
        },
        {
          "value": "500",
          "label": "Medium"
        },
        {
          "value": "600",
          "label": "Semi Bold"
        },
        {
          "value": "700",
          "label": "Bold"
        }
      ],
      "default": "400"
    }
  ],
  "blocks": [
    {
      "type": "tab_description",
      "name": "Tab: Description",
      "limit": 1,
      "settings": [
        {
          "type": "text",
          "id": "title",
          "label": "Tab Title",
          "default": "DESCRIPTION"
        }
      ]
    },
    {
      "type": "tab_details",
      "name": "Tab: Details",
      "limit": 1,
      "settings": [
        {
          "type": "text",
          "id": "title",
          "label": "Tab Title",
          "default": "DETAILS"
        },
        {
          "type": "text",
          "id": "metafield_namespace_key",
          "label": "Product Details ",
          "default": "CONNECT TO A DYNAMIC SOURCE FOR PRODUCT DETAILS"
        }
      ]
    },
    {
      "type": "tab_sizing",
      "name": "Tab: Sizing",
      "limit": 1,
      "settings": [
        {
          "type": "text",
          "id": "title",
          "label": "Tab Title",
          "default": "SIZING"
        },

        {
          "type": "page",
          "id": "size_chart_page",
          "label": "Select a Size Chart Page"
        }
      ]
    },
    {
      "type": "delivery_address",
      "name": "Delivery Address",
      "limit": 1,
      "settings": []
    },
    {
      "type": "quantity_selector",
      "name": "Quantity Selector",
      "limit": 1,
      "settings": []
    }
  ],

  "presets": [
    {
      "name": "Product Tabs",
      "blocks": []
    }
  ]
}
{% endschema %}
