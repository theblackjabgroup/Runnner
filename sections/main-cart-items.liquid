<style>
  :root {
    --spacing-xs: 0.5rem;
    --spacing-sm: 1rem;
    --spacing-md: 1.5rem;
    --spacing-lg: 2rem;
    --spacing-xl: 3rem;
  }

  * {
    box-sizing: border-box;
  }

  .cart-container {
    max-width: 100%;
    margin: 0 auto;
    padding: 13px;
    font-family: Arial, sans-serif;
    height: auto;
    display: flex;
    flex-direction: column;
  }

  .cart-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: var(--spacing-lg);
    padding-bottom: var(--spacing-sm);
    border-bottom: 1px solid var(--border);
  }

  .cart-title {
    font-size: 1.5rem;
    font-weight: bold;
    text-transform: uppercase;
    color: var(--text);
  }

  .close-btn {
    background: none;
    border: none;
    font-size: 1.5rem;
    cursor: pointer;
    text-transform: uppercase;
    font-weight: bold;
    color: var(--text);
  }

  .cart-content {
    display: flex;
    gap: var(--spacing-xl);
    align-items: stretch;
    flex: 1;
    overflow: hidden;
  }

  .cart-items {
    flex: 2;
    overflow-y: auto;
    max-height: 100%;
  }

  .cart-item {
    display: grid;
    grid-template-columns: 186px 1fr auto;
    gap: var(--spacing-lg);
    padding: 19px 0 19px 0;
    border-bottom: 1px solid var(--border);
    position: relative;
    align-items: start;
  }
  .cart-item:first-of-type {
    padding-top: 0;
  }

  .item-image {
    width: 186px;
    height: 222px;
    background: #f5f5f5;
  }

  .item-details {
    display: flex;
    flex-direction: column;
  }
  .item-info {
    transform: translateY(-15px);
  }

  .item-price {
    font-size: 32px;
    font-weight: 500;
    color: var(--text);
  }

  .item-title {
    font-size: 16px;
    text-transform: uppercase;
    color: var(--text);
    font-weight: 400;
    letter-spacing: 0.5px;
    line-height: 1;
  }

  .item-options {
    display: flex;
    flex-direction: column;
    gap: var(--spacing-sm);
    position: absolute;
    bottom: 0.9rem;
  }
  .option-label {
    font-size: 21px;
    font-weight: 500;
    text-transform: uppercase;
    color: var(--text);
  }
  .option-value {
    font-size: 21px;
    font-weight: 400;
    border-radius: 5px;
    color: var(--button_label);
    background-color: var(--text);
    padding: 0 9px !important;
    line-height: 1.5 !important;
    text-transform: uppercase;
  }

  .option-row {
    display: flex;
    align-items: center;
    gap: 5px;
  }

  .color-options {
    display: flex;
    gap: var(--spacing-xs);
    align-items: center;
    min-height: 24px;
  }

  .color-picker {
    width: 20px;
    height: 20px;
    border-radius: 50%;
    border: 1px solid var(--text);
    cursor: pointer;
    position: relative;
    margin-right: 4px;
    background: #eee; /* fallback for unknown colors */
    box-sizing: border-box;
  }

  .color-picker.selected {
    border-width: 2px;
    border-color: var(--text);
  }

  .color-picker.black {
    background: #000;
  }
  .color-picker.white {
    background: #fff;
    border: 1.5px solid #aaa; /* make white visible */
  }
  .color-picker.red {
    background: #ff0000;
  }
  .color-picker.blue {
    background: #0000ff;
  }
  .color-picker.green {
    background: #00ff00;
  }
  .color-picker.gray {
    background: #808080;
  }
  .color-picker.grey {
    background: #808080;
  }
  .color-picker.navy {
    background: #000080;
  }
  .color-picker.beige {
    background: #f5f5dc;
  }
  .color-picker.brown {
    background: #8b4513;
  }
  .color-picker.yellow {
    background: #ffff00;
  }
  .color-picker.orange {
    background: #ffa500;
  }
  .color-picker.purple {
    background: #800080;
  }
  .color-picker.pink {
    background: #ffc0cb;
  }

  .item-controls {
    display: flex;
    flex-direction: column;
    align-items: flex-end;
    gap: var(--spacing-md);
    justify-self: end;
    height: 100%;
    justify-content: space-between;
  }

  .quantity-controls {
    display: flex;
    align-items: center;
    border: 1px solid var(--text);
    border-radius: 4px;
    background: var(--background);
  }

  .qty-btn {
    background: none;
    border: 1px;
    border-radius: 5px;
    width: 50px;
    height: 43px;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    font-weight: 400;
    font-size: 2rem;
    transition: all 0.3s ease-in-out;
    color: var(--text);
  }
  .qty-btn:hover {
    background-color: #d9d9d9;
  }

  .qty-btn:disabled {
    opacity: 0.9;
    cursor: not-allowed;
    background-color: #f5f5f5;
    color: var(--disabled_text);
    border-color: #eee;
  }

  .qty-input {
    width: 52px;
    height: 43px;
    border: none;
    border-left: 1px solid var(--text);
    border-right: 1px solid var(--text);
    text-align: center;
    font-weight: bold;
    background: var(--background);
    color: var(--text);
  }

  .remove-btn {
    background: none;
    border: none;
    color: var(--text);
    text-transform: uppercase;
    font-size: 21px;
    font-weight: 400;
    cursor: pointer;
    padding: 0;
    margin-top: auto;
    align-self: flex-end;
    transform: translateY(8px);
  }

  .remove-btn:hover {
    background-color: var(--text);
    color: var(--background);
  }

  .cart-sidebar {
    flex: 1;
    min-width: 300px;
    display: flex;
    flex-direction: column;
    gap: 10px;
    height: 80vh;
  }

  .cart-total-section {
    margin-top: auto;
  }

  .sidebar-sections {
    flex: 1 1 auto;
    display: flex;
    flex-direction: column;
  }

  .sidebar-section {
    margin-bottom: 0;
    overflow: hidden;
    background: var(--background);
    margin-bottom: 16px;
    border-radius: 5px;
    border: 1px solid var(--border);
  }

  .sidebar-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: var(--spacing-md);
    cursor: pointer;
    background: var(--background);
    border: none;
  }

  .sidebar-title {
    font-size: 21px;
    text-transform: uppercase;
    line-height: 1.2;
    flex: 1;
    letter-spacing: -6%;
    font-weight: 400;
    color: var(--text);
  }

  .sidebar-section:nth-child(1) .sidebar-title {
    font-weight: 600;
  }

  .sidebar-section:nth-child(2) .sidebar-title,
  .sidebar-section:nth-child(n + 3) .sidebar-title {
    font-weight: 400;
  }

  .expand-icon {
    display: inline-block;
    width: 18px;
    height: 18px;
    margin-left: var(--spacing-sm);
    vertical-align: middle;
    font-size: 0;
    background: none;
    border: none;
    padding: 0;
    /* Remove transform: rotate(45deg); and transition */
  }

  /* Plus/Minus Morphing Icon Styles (copied from facets) */
  .pmorph__icon {
    position: relative;
    width: 18px;
    height: 18px;
    flex-shrink: 0;
    font-weight: 500;
    display: inline-block;
    vertical-align: middle;
  }
  .pmorph__icon::before {
    content: '';
    position: absolute;
    top: 50%;
    left: 0;
    width: 100%;
    height: 2px;
    background: var(--text);
    border-radius: 2px;
    transform: translateY(-50%);
  }
  .pmorph__icon::after {
    content: '';
    position: absolute;
    top: 50%;
    left: 0;
    width: 100%;
    height: 2px;
    background: var(--text);
    border-radius: 2px;
    transform: translateY(-50%) rotate(90deg) scale(1);
    transform-origin: center;
    opacity: 1;
    transition: transform 220ms cubic-bezier(0.33, 0, 0.13, 1), opacity 220ms cubic-bezier(0.33, 0, 0.13, 1);
  }
  .pmorph__icon.expanded::after {
    opacity: 0;
    transform: translateY(-50%) rotate(90deg) scale(0.5);
    transition: transform 220ms cubic-bezier(0.33, 0, 0.13, 1), opacity 220ms cubic-bezier(0.33, 0, 0.13, 1);
  }
  details:not([open]) .pmorph__icon::after {
    opacity: 1;
    transform: translateY(-50%) rotate(90deg) scale(1);
    transition: transform 220ms cubic-bezier(0.22, 0.61, 0.36, 1), opacity 220ms cubic-bezier(0.22, 0.61, 0.36, 1);
  }

  .sidebar-content {
    max-height: 0;
    overflow: hidden;
    padding: 0 var(--spacing-md);
    opacity: 0;
    transform: translateY(-10px);
    transition: all 350ms cubic-bezier(0.25, 0.1, 0.25, 1);
  }

  .sidebar-section.expanded .sidebar-content {
    max-height: 300px; /* Adjust based on your content needs */
    opacity: 1;
    transform: translateY(0);
    padding: 0 var(--spacing-md) var(--spacing-md) var(--spacing-md);
    transition: all 350ms cubic-bezier(0.25, 0.1, 0.25, 1);
  }

  .sidebar-section:last-child .sidebar-content {
    border-bottom: none;
  }

  .sidebar-section.expanded .sidebar-content {
    display: block;
  }

  .sidebar-section.expanded .expand-icon {
    /* Remove transform: rotate(45deg); */
  }

  .sidebar-form {
    /* allow wrapping so button moves to next line when space is tight */
    display: flex;
    gap: var(--spacing-sm);
    align-items: center;
    flex-wrap: wrap;
  }

  .sidebar-input {
    /* allow input to shrink but remain usable; prevents overflow */
    flex: 1 1 50px;
    min-width: 0;
    padding: var(--spacing-sm);
    border-radius: 0;
    font-size: 14px;
    background: var(--background);
    font-family: inherit;
    color: var(--text);
    border: 1px solid var(--border);
  }

  .sidebar-btn {
    /* keep buttons sized to content and don't grow */
    flex: 0 0 auto;
  }

  .subscribe-btn {
    /* ensure subscribe appears after input and will wrap to next line */
    order: 2;
    /* on very narrow sidebars make it full width for usability */
  }

  @media (max-width: 450px) {
    .sidebar-form .subscribe-btn {
      width: 100%;
      order: 2;
    }
  }

  .note-form {
    flex-direction: column;
    gap: var(--spacing-sm);
    align-items: stretch;
  }

  .note-form .sidebar-input {
    min-height: 100px;
    resize: vertical;
  }

  .note-form .sidebar-btn {
    align-self: flex-end;
    width: auto;
    font-weight: 400;
    line-height: 1.4;
  }

  .sidebar-input::placeholder {
    color: var(--disabled_text);
    font-size: 21px;
  }

  .sidebar-btn {
    background: var(--background);
    color: var(--text);
    border: none;
    border-radius: 0;
    cursor: pointer;
    font-weight: bold;
    text-transform: uppercase;
    font-size: 30px;
    font-weight: 400;
    white-space: nowrap;
    font-family: inherit;
    letter-spacing: 0.5px;
    line-height: 1;
    transition: all 0.3s ease;
  }
  .sidebar-btn:hover {
    background: var(--text);
    color: var(--background);
  }

  .subscribe-btn {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    line-height: 1.4 !important;
    font-size: 23px;
    font-weight: 400;
    border: 1px solid var(--text);
    border-radius: 5px;
    padding: 0 var(--spacing-sm);
  }

  /* remove plus injected by broader styles for sidebar subscribe button */
  .cart-sidebar .subscribe-btn::before {
    content: none !important;
  }
  .pmorph__icon {
    width: 14px;
    height: 14px;
  }
  .subscribe-btn::before {
    content: '+';
    font-size: 1rem;
    font-weight: bold;
    margin-right: var(--spacing-xs);
  }

  .cart-total {
    display: flex;
    justify-content: space-between;

    border-top: none;
  }

  .total-label {
    font-size: 4rem;
    font-weight: bold;
    text-transform: uppercase;
    color: var(--text);
  }

  .total-amount {
    font-size: 4rem;
    font-weight: bold;
    color: var(--text);
  }

  .checkout-btn {
    width: 100%;
    padding: 0 var(--spacing-sm);
    background: var(--button);
    color: var(--button_label);
    border: none;
    border-radius: 5px;
    font-size: 4rem;
    font-weight: bold;
    text-transform: uppercase;
    cursor: pointer;
    margin-top: var(--spacing-sm);
    display: flex;
    align-items: center;
    justify-content: space-between;
    gap: var(--spacing-xs);
    letter-spacing: 1px;
  }
  .checkout-icon {
    font-size: 2.9rem;
  }

  /* Mobile Styles */
  @media (max-width: 768px) {
    .item-info {
      transform: translateY(-5px);
    }
    .sidebar-input {
      /* allow input to shrink but remain usable; prevents overflow */
      flex: 1 1 50px;
      min-width: 0;
      padding: 0;
      border-radius: 0;
      font-size: 14px;
      background: var(--background);
      font-family: inherit;
      color: var(--text);
    }
    .sidebar-section.expanded .sidebar-content {
      padding: 0 0 var(--spacing-md) 0;
    }
    .sidebar-input::placeholder {
      color: var(--disabled_text);
      font-size: 14px;
    }

    .checkout-icon {
      font-size: 1.6rem;
    }
    .checkout-btn {
      font-size: 17px;
    }
    .cart-total {
      flex-direction: column;
      justify-content: center;
      align-items: left !important;
    }
    .cart-total-section {
      display: flex;
      flex-direction: row;
      justify-content: space-between;
      align-items: end;
      gap: var(--spacing-sm);
    }
    .checkout-btn {
      max-width: 178px;
      max-height: 50px;
    }
    .sidebar-section.expanded .sidebar-content {
      max-height: 200px;
    }
    .cart-container {
      padding: var(--spacing-sm);
    }

    .cart-content {
      flex-direction: column;
      gap: var(--spacing-md);
    }

    .cart-item {
      grid-template-columns: 128px 1fr;
      gap: var(--spacing-sm);
    }

    .item-image {
      height: 151px;
    }
    .cart-item {
      padding: 0px 0 5px 0;
      margin-top: 15px;
      margin-bottom: 0 !important;
    }
    .item-controls {
      position: absolute;
      top: 0;
      right: 0;
      display: flex;
      flex-direction: column;
      align-items: flex-end;
      gap: var(--spacing-md);
      justify-self: end;
      height: 100%;
      justify-content: space-between;
    }
    .qty-btn {
      width: 29px;
      height: 25px;
      font-size: 14px;
    }
    .qty-input {
      width: 32px;
      height: 25px;
      font-size: 14px;
    }

    .item-price {
      font-weight: 500;
      font-size: 16px;
    }

    .item-title {
      font-weight: 400;
      font-size: 11px;
      line-height: 1.4;
      max-width: 150px;
    }

    .quantity-controls {
      order: 1;
    }
    .option-label,
    .option-value,
    .remove-btn {
      font-size: 14px;
      font-weight: 500;
    }
    .remove-btn {
      order: 2;
      margin-bottom: 10px;
      transform: translateY(0px);
    }

    .cart-sidebar {
      min-width: auto;
    }

    .sidebar-section {
      border-radius: 0;
      border-left: none;
      border-right: none;
      border-bottom: none;
      margin-bottom: 0;
    }
    .sidebar-section:last-of-type {
      border-bottom: 1px solid var(--text);
    }
    .sidebar-title {
      font-size: 14px;
      font-weight: 400;
    }

    .sidebar-header {
      padding: var(--spacing-sm) 0;
    }
    .sidebar-btn {
      font-size: 14px;
      font-weight: 400;
    }

    .total-label,
    .total-amount {
      font-size: 22px;
      line-height: 1.2;
    }
    .cart-header {
      margin-bottom: 0;
    }
  }
</style>

<div class="cart-container">
  <div class="cart-header">
    <h2 class="cart-title">Cart [{{ cart.item_count }}]</h2>
  </div>

  <div class="cart-content">
    <div class="cart-items">
      <form action="{{ routes.cart_url }}" method="post" id="MainCartForm">
        {% for item in cart.items %}
          <div class="cart-item">
            <img
              class="item-image"
              src="{{ item.image | image_url: width: 200 }}"
              alt="{{ item.product.title | escape }}"
              width="100"
              height="100"
            >

            <div class="item-details">
              <div class="item-info">
                <div class="item-price">
                  {% if item.original_price != item.final_price %}
                    {{ item.final_price | money }}
                  {% else %}
                    {{ item.original_price | money }}
                  {% endif %}
                </div>
                <div class="item-title">{{ item.product.title }}</div>
              </div>

              <div class="item-options">
                {% assign size_option = null %}
                {% assign color_option = null %}

                {% for option in item.options_with_values %}
                  {% assign option_name_lower = option.name | downcase %}
                  {% if option_name_lower contains 'size' %}
                    {% assign size_option = option %}
                  {% elsif option_name_lower contains 'color' or option_name_lower contains 'colour' %}
                    {% assign color_option = option %}
                  {% endif %}
                {% endfor %}

                {% if size_option %}
                  <div class="option-row">
                    <span class="option-label">{{ size_option.name }}:</span>
                    <span class="option-value selected">{{ size_option.value }}</span>
                  </div>
                {% endif %}

                {% if color_option %}
                  <div class="option-row">
                    <span class="option-label">{{ color_option.name }}:</span>
                    <div class="color-options">
                      {% assign displayed_colors = '' %}
                      {% for variant in item.product.variants %}
                        {% assign variant_color = null %}

                        {% comment %} Check all three option positions for color {% endcomment %}
                        {% if item.product.options[0] and item.product.options[0] != 'Title' %}
                          {% assign option_name_lower = item.product.options[0] | downcase %}
                          {% if option_name_lower contains 'color' or option_name_lower contains 'colour' %}
                            {% assign variant_color = variant.option1 %}
                          {% endif %}
                        {% endif %}

                        {% if variant_color == null
                          and item.product.options[1]
                          and item.product.options[1] != 'Title'
                        %}
                          {% assign option_name_lower = item.product.options[1] | downcase %}
                          {% if option_name_lower contains 'color' or option_name_lower contains 'colour' %}
                            {% assign variant_color = variant.option2 %}
                          {% endif %}
                        {% endif %}

                        {% if variant_color == null
                          and item.product.options[2]
                          and item.product.options[2] != 'Title'
                        %}
                          {% assign option_name_lower = item.product.options[2] | downcase %}
                          {% if option_name_lower contains 'color' or option_name_lower contains 'colour' %}
                            {% assign variant_color = variant.option3 %}
                          {% endif %}
                        {% endif %}

                        {% if variant_color and variant_color != blank and variant_color != 'Default Title' %}
                          {% unless displayed_colors contains variant_color %}
                            {% assign displayed_colors = displayed_colors | append: variant_color | append: ',' %}
                            {% assign color_class = variant_color | downcase | replace: ' ', '' | replace: '-', '' %}
                            {% assign is_selected = false %}
                            {% if variant_color == color_option.value %}
                              {% assign is_selected = true %}
                            {% endif %}

                            <div
                              class="color-picker {{ color_class }}{% if is_selected %} selected{% endif %}"
                              data-variant-id="{{ variant.id }}"
                              data-color="{{ variant_color }}"
                              title="{{ variant_color }}"
                            ></div>
                          {% endunless %}
                        {% endif %}
                      {% endfor %}
                    </div>
                  </div>
                {% endif %}

                {% for option in item.options_with_values %}
                  {% assign option_name_lower = option.name | downcase %}
                  {% unless option_name_lower contains 'size'
                    or option_name_lower contains 'color'
                    or option_name_lower contains 'colour'
                  %}
                    <div class="option-row">
                      <span class="option-label">{{ option.name }}:</span>
                      <span class="option-value selected">{{ option.value }}</span>
                    </div>
                  {% endunless %}
                {% endfor %}
              </div>
            </div>

            <div class="item-controls">
              <div class="quantity-controls">
                <button
                  class="qty-btn decrease-qty"
                  data-item-key="{{ item.key }}"
                  {% if item.quantity <= 1 or cart.item_count == 1 %}
                    disabled
                  {% endif %}
                >
                  -
                </button>
                <input
                  class="qty-input"
                  type="text"
                  value="{{ item.quantity }}"
                  readonly
                  data-item-key="{{ item.key }}"
                >
                <button
                  class="qty-btn increase-qty"
                  data-item-key="{{ item.key }}"
                >
                  +
                </button>
              </div>
              <button class="remove-btn" data-item-key="{{ item.key }}">[Remove]</button>
            </div>
          </div>
        {% endfor %}
      </form>
    </div>

    <div class="cart-sidebar">
      <div class="sidebar-sections">
        <div class="sidebar-section">
          <div class="sidebar-header" onclick="toggleSection(this)">
            <span class="sidebar-title"
              >Add a Note to<br>
              Your Order:</span
            >
            <span class="expand-icon"><span class="pmorph__icon"></span></span>
          </div>
          <div class="sidebar-content">
            <form class="sidebar-form note-form">
              <textarea class="sidebar-input" placeholder="Type..." rows="3"></textarea>
              <button type="submit" class="sidebar-btn">[SEND]</button>
            </form>
          </div>
        </div>

        <div class="sidebar-section">
          <div class="sidebar-header" onclick="toggleSection(this)">
            <span class="sidebar-title"
              >Receive Special Offers and<br>
              First Look at New Products.</span
            >
            <span class="expand-icon"><span class="pmorph__icon"></span></span>
          </div>
          <div class="sidebar-content">
            <form class="sidebar-form">
              <input type="email" class="sidebar-input" placeholder="Your Email" required>
              <button type="submit" class="sidebar-btn subscribe-btn">+ SUBSCRIBE</button>
            </form>
          </div>
        </div>

        <div class="sidebar-section">
          <div class="sidebar-header" onclick="toggleSection(this)">
            <span class="sidebar-title">Estimate Shipping Rates</span>
            <span class="expand-icon"><span class="pmorph__icon"></span></span>
          </div>
          <div class="sidebar-content">
            <form class="sidebar-form">
              <input type="text" class="sidebar-input" placeholder="Zip Code">
              <button type="submit" class="sidebar-btn">[SEARCH]</button>
            </form>
          </div>
        </div>
      </div>
      <div class="cart-total-section">
        <div class="cart-total">
          <span class="total-label">Total:</span>
          <span class="total-amount">
            {{ cart.total_price | money_without_trailing_zeros }}
          </span>
        </div>
        <button
          type="submit"
          form="MainCartForm"
          class="checkout-btn"
          name="checkout"
          {% if cart == empty %}
            disabled
          {% endif %}
        >
          <span class="checkout-icon">▶</span>
          Checkout
        </button>
      </div>
    </div>
  </div>
</div>

<script>
  function toggleSection(header) {
    const section = header.parentElement;
    const isExpanded = section.classList.contains('expanded');
    // Close all sections and remove icon animation
    document.querySelectorAll('.sidebar-section').forEach((s) => {
      s.classList.remove('expanded');
      const icon = s.querySelector('.pmorph__icon');
      if (icon) icon.classList.remove('expanded');
    });
    // Open clicked section and animate icon
    if (!isExpanded) {
      section.classList.add('expanded');
      const icon = section.querySelector('.pmorph__icon');
      if (icon) icon.classList.add('expanded');
    }
  }

  function closeCart() {
    // Add your close cart logic here
    console.log('Close cart');
  }

  // Quantity controls
  document.addEventListener('click', function (e) {
    if (e.target.classList.contains('decrease-qty')) {
      const itemKey = e.target.dataset.itemKey;
      const input = document.querySelector(`input[data-item-key="${itemKey}"]`);
      const currentQty = parseInt(input.value);
      if (currentQty > 1) {
        updateQuantity(itemKey, currentQty - 1);
      }
    }

    if (e.target.classList.contains('increase-qty')) {
      const itemKey = e.target.dataset.itemKey;
      const input = document.querySelector(`input[data-item-key="${itemKey}"]`);
      const currentQty = parseInt(input.value);
      updateQuantity(itemKey, currentQty + 1);
    }

    if (e.target.classList.contains('remove-btn')) {
      const itemKey = e.target.dataset.itemKey;
      updateQuantity(itemKey, 0);
    }
  });

  function updateQuantity(itemKey, quantity) {
    fetch('/cart/change.js', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        Accept: 'application/json',
      },
      body: JSON.stringify({
        id: itemKey,
        quantity: quantity,
      }),
    })
      .then((response) => response.json())
      .then((data) => {
        // Update the cart without page reload
        updateCartDisplay(data);
      })
      .catch((error) => {
        console.error('Error:', error);
      });
  }

  function updateCartDisplay(cartData) {
    // Update cart item count in header
    const cartTitle = document.querySelector('.cart-title');
    if (cartTitle) {
      cartTitle.textContent = `Cart [${cartData.item_count}]`;
    }

    // Update total price
    const totalAmount = document.querySelector('.total-amount');
    if (totalAmount && cartData.total_price) {
      totalAmount.textContent = formatMoney(cartData.total_price);
    }

    // Update individual item quantities and remove items with 0 quantity
    cartData.items.forEach(item => {
      const itemElement = document.querySelector(`[data-item-key="${item.key}"]`);
      if (itemElement) {
        const qtyInput = itemElement.closest('.cart-item').querySelector('.qty-input');
        if (qtyInput) {
          qtyInput.value = item.quantity;
        }

        // Update item total price if it exists
        const itemPrice = itemElement.closest('.cart-item').querySelector('.item-price');
        if (itemPrice) {
          itemPrice.textContent = formatMoney(item.final_line_price);
        }
      }
    });

    // Remove items that are no longer in cart
    const currentItemKeys = cartData.items.map(item => item.key);
    document.querySelectorAll('.cart-item').forEach(cartItem => {
      const itemKey = cartItem.querySelector('[data-item-key]').dataset.itemKey;
      if (!currentItemKeys.includes(itemKey)) {
        cartItem.remove();
      }
    });

    // Update button states
    updateButtonStates(cartData);
  }

  function updateButtonStates(cartData) {
    cartData.items.forEach(item => {
      const decreaseBtn = document.querySelector(`[data-item-key="${item.key}"].decrease-qty`);
      if (decreaseBtn) {
        if (item.quantity <= 1 || cartData.item_count == 1) {
          decreaseBtn.disabled = true;
        } else {
          decreaseBtn.disabled = false;
        }
      }
    });

    // Update checkout button
    const checkoutBtn = document.querySelector('.checkout-btn');
    if (checkoutBtn) {
      if (cartData.item_count === 0) {
        checkoutBtn.disabled = true;
      } else {
        checkoutBtn.disabled = false;
      }
    }
  }

  function formatMoney(cents) {
    // Simple money formatting - adjust based on your currency settings
    const dollars = (cents / 100).toFixed(2);
    return `$${dollars}`;
  }

  // Form submissions
  document.addEventListener('submit', function (e) {
    e.preventDefault();
    console.log('Form submitted:', e.target);
    // Add your form handling logic here
  });
</script>
