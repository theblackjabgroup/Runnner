<div class="featured-collection-page-width overflow-hidden py-10">
  {% if section.settings.heading != blank %}
    <h2 class="md:!text-9xl text-6xl font-bold mb-4">{{ section.settings.heading }}</h2>
  {% endif %}

  <div class="flex justify-between items-center w-full">
    <div class="flex-grow">
      {% if section.settings.description != blank %}
        {{ section.settings.description }}
      {% endif %}
    </div>
    <div class="flex-shrink-0">
      {% if section.settings.show_shop_all and section.settings.main_collection %}
        <a
          href="{{ section.settings.main_collection.url }}"
          class="image-with-text-custom-button"
        >
          <div class="image-with-text-button-text-container">
            <div class="image-with-text-button-text">
              {{ section.settings.button_text }}
              <span class="image-with-text-button-arrow">
                <svg width="28" height="36" viewBox="0 0 38 36" xmlns="http://www.w3.org/2000/svg" class="w-5 h-5">
                  <path fill="currentColor" d="M26.79,9.21A35.06,35.06,0,0,0,37,16.2v3.66a35.34,35.34,0,0,0-10.21,7A12.84,12.84,0,0,0,23.21,36H17.56q0-6.22,3-10a15.4,15.4,0,0,1,8.06-5.2V20.6H0V15.43H28.63v-.3A15.16,15.16,0,0,1,20.57,10q-3-3.77-3-10h5.65a13,13,0,0,0,.87,5A12.79,12.79,0,0,0,26.79,9.21Z"/>
                </svg>
              </span>
            </div>
            <div class="image-with-text-button-text-hover">
              {{ section.settings.button_text }}
              <span class="image-with-text-button-arrow">
                <svg width="28" height="36" viewBox="0 0 38 36" xmlns="http://www.w3.org/2000/svg" class="w-5 h-5">
                  <path fill="currentColor" d="M26.79,9.21A35.06,35.06,0,0,0,37,16.2v3.66a35.34,35.34,0,0,0-10.21,7A12.84,12.84,0,0,0,23.21,36H17.56q0-6.22,3-10a15.4,15.4,0,0,1,8.06-5.2V20.6H0V15.43H28.63v-.3A15.16,15.16,0,0,1,20.57,10q-3-3.77-3-10h5.65a13,13,0,0,0,.87,5A12.79,12.79,0,0,0,26.79,9.21Z"/>
                </svg>
              </span>
            </div>
          </div>
        </a>
      {% endif %}
    </div>
  </div>

  <hr class="border-gray-300 my-6">

  <div class="featured_collection_filters  flex flex-col md:flex-row mt-10 gap-[40px]">
    <div class="collections-container text-[24px] w-full md:w-[400px] min-w-[350px] order-1 md:order-none mb-4 md:mb-0">
      <div class="collection-filters flex flex-row md:flex-col flex-wrap">
        {% for block in section.blocks %}
          <button
            class="collection-btn {% if forloop.first %}active{% endif %} w-auto md:w-full h-[59px] flex items-center justify-between"
            data-collection="{{ block.settings.collection.id }}"
            aria-label="View {{ block.settings.label }} collection"
            aria-pressed="{% if forloop.first %}true{% else %}false{% endif %}"
          >
            <span class="label-text">{{ block.settings.label }}</span>
            <svg class="svg-arrow-right" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 37 36" width="18" height="18">
              <path fill="currentColor" d="M26.79,9.21A35.06,35.06,0,0,0,37,16.2v3.66a35.34,35.34,0,0,0-10.21,7A12.84,12.84,0,0,0,23.21,36H17.56q0-6.22,3-10a15.4,15.4,0,0,1,8.06-5.2V20.6H0V15.43H28.63v-.3A15.16,15.16,0,0,1,20.57,10q-3-3.77-3-10h5.65a13,13,0,0,0,.87,5A12.79,12.79,0,0,0,26.79,9.21Z"/>
            </svg>
          </button>
        {% endfor %}
      </div>
    </div>

    <div class="products-container w-full md:flex-1 order-2 md:order-none">
      {% for block in section.blocks %}
        <div
          class="collection-products-container {% unless forloop.first %}hidden{% endunless %}"
          data-collection-id="{{ block.settings.collection.id }}"
        >
          <div class="slider-container relative">
            <div
              id="product-slider-{{ block.settings.collection.id }}"
              class="product-slider flex gap-4 md:gap-6 cursor-grab overflow-x-auto custom-scrollbar"
            >
              {% for product in block.settings.collection.products %}
                <div class="product-card flex-none w-[220px] md:w-[450px]">
                  <div class="product-image-wrapper relative group">
                    {% unless product.available %}
                      <div class="absolute top-3 right-4 z-10">
                        <span class="inline-block rounded-xl px-4 text-[12px] tracking-wide font-medium bg-zinc-800 text-white">
                          SOLD OUT
                        </span>
                      </div>
                    {% endunless %}

                    <a href="{{ product.url }}" class="product-image-link block relative">
                      <div class="product-images-container relative">
                        {% if product.images.size > 1 %}
                          {% for image in product.images %}
                            <img
                              src="{{ image | image_url: '450x544', crop: 'center' }}"
                              alt="{{ product.title }}{% if forloop.index > 1 %} image {{ forloop.index }}{% endif %}"
                              class="w-full h-auto rounded product-image {% if forloop.first %}active{% else %}hidden{% endif %}"
                              data-index="{{ forloop.index0 }}"
                              data-product-id="{{ product.id }}"
                              loading="lazy"
                              decoding="async"
                              width="450"
                              height="544"
                            >
                          {% endfor %}

                          <button
                            class="image-nav-arrow image-nav-prev"
                            data-product-id="{{ product.id }}"
                            aria-label="Previous image"
                            aria-controls="product-images-{{ product.id }}"
                          >
                            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="24" height="24">
                              <path fill="currentColor" d="M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z"/>
                            </svg>
                          </button>
                          <button
                            class="image-nav-arrow image-nav-next"
                            data-product-id="{{ product.id }}"
                            aria-label="Next image"
                            aria-controls="product-images-{{ product.id }}"
                          >
                            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="24" height="24">
                              <path fill="currentColor" d="M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z"/>
                            </svg>
                          </button>
                        {% else %}
                          <img
                            src="{{ product.featured_image | image_url: '450x544', crop: 'center' }}"
                            alt="{{ product.title }}"
                            class="w-full h-auto rounded"
                            loading="lazy"
                            decoding="async"
                            width="450"
                            height="544"
                          >
                        {% endif %}
                      </div>
                    </a>

                    <div class="product-cart-container absolute bottom-4 left-1/2 transform -translate-x-1/2 w-full px-4">
                      <div class="cart-options-wrapper relative">
                        {% assign has_size_variants = false %}
                        {% unless product.has_only_default_variant %}
                          {% for option in product.options_with_values %}
                            {% if option.name == 'Size' or option.name == 'size' %}
                              {% assign has_size_variants = true %}
                            {% endif %}
                          {% endfor %}
                        {% endunless %}

                        {% if has_size_variants %}
                          <div class="size-variants-container bg-white rounded p-2 mb-0 opacity-0 invisible">
                            {% for option in product.options_with_values %}
                              {% if option.name == 'Size' or option.name == 'size' %}
                                {% assign size_option_index = forloop.index0 %}
                                <div class="size-label-wrapper flex items-center w-full">
                                  <span class="size-label text-m font-semibold px-2 mr-auto">SELECT SIZE</span>
                                  <div
                                    class="size-options-wrapper flex flex-wrap gap-4 justify-end"
                                    data-option-index="{{ size_option_index }}"
                                  >
                                    {% for value in option.values %}
                                      {% assign variant_available = false %}
                                      {% for variant in product.variants %}
                                        {% if variant.options[size_option_index] == value and variant.available %}
                                          {% assign variant_available = true %}
                                          {% assign variant_id = variant.id %}
                                          {% break %}
                                        {% endif %}
                                      {% endfor %}

                                      <button
                                        class="size-option-btn p-5 bg-gray-200 text-s rounded size-animate {% unless variant_available %}unavailable-size{% endunless %}"
                                        {% if variant_available %}
                                          data-variant-id="{{ variant_id }}"
                                          data-product-id="{{ product.id }}"
                                        {% else %}
                                          data-waitlist="true"
                                          data-product-id="{{ product.id }}"
                                          data-product-title="{{ product.title | escape }}"
                                          data-variant-size="{{ value }}"
                                        {% endif %}
                                        style="--animation-order: {{ forloop.index }}"
                                        aria-label="Size {{ value }}{% unless variant_available %} - Sold Out{% endunless %}"
                                        {% unless variant_available %}
                                          aria-disabled="true"
                                        {% endunless %}
                                      >
                                        {{ value }}
                                      </button>
                                    {% endfor %}
                                  </div>
                                </div>
                              {% endif %}
                            {% endfor %}
                          </div>
                        {% endif %}

                        {% if product.available %}
                          <button
                            class="add-to-cart-btn w-90 bg-white text-black py-2 px-4 rounded opacity-0 group-hover:opacity-100 transition-opacity duration-300"
                            data-product-id="{{ product.id }}"
                            {% if product.has_only_default_variant %}
                              data-variant-id="{{ product.variants.first.id }}"
                              data-has-variants="false"
                            {% elsif has_size_variants %}
                              data-has-variants="true"
                            {% else %}
                              data-variant-id="{{ product.variants.first.id }}"
                              data-has-variants="false"
                            {% endif %}
                            aria-label="Add {{ product.title }} to cart"
                          >
                            Add to Cart
                          </button>
                        {% else %}
                          <button
                            class="notify-me-btn w-90 bg-white text-black py-2 px-4 rounded opacity-0 group-hover:opacity-100 transition-opacity duration-300"
                            data-product-id="{{ product.id }}"
                            data-product-title="{{ product.title | escape }}"
                            data-has-variants="{% if has_size_variants %}true{% else %}false{% endif %}"
                            aria-label="Get notified when {{ product.title }} is back in stock"
                            aria-haspopup="dialog"
                          >
                            Notify Me When In Stock
                          </button>
                        {% endif %}
                      </div>
                    </div>
                  </div>

                  <div class="product-details mt-3">
                    <a href="{{ product.url }}">
                      <h3 class="!text-[1.6rem] uppercase font-medium leading-tight">
                        {{ product.title | escape }}
                      </h3>
                      <div class="flex gap-2 items-baseline">
                        <span class="!text-[1.6rem] uppercase font-medium"> {{ product.price | money }} </span>
                        {%- if product.compare_at_price > product.price -%}
                          |<span class="!text-[1.6rem] uppercase text-red-600">
                            {{- product.compare_at_price | money }} FOR MEMBERS</span
                          >
                        {%- endif -%}
                      </div>
                    </a>
                  </div>
                </div>
              {% endfor %}
            </div>
          </div>
        </div>
      {% endfor %}
    </div>
  </div>
</div>

<div
  id="waitlist-modal-overlay"
  class="fixed inset-0 z-50 bg-black/50 hidden items-center justify-center"
>
  <div class="bg-white !w-auto md:!w-[50vw] max-w-[90vw] rounded p-4 md:p-10 shadow-lg mx-4">
    <div class="flex justify-end p-2 md:p-4">
      <button
        id="close-waitlist-modal"
        class="text-black hover:text-gray-700 font-medium"
        aria-label="Close waitlist form"
      >
        CLOSE
      </button>
    </div>

    <h2 class="text-xl md:text-2xl font-bold mb-2" id="waitlist-product-title">PRODUCT TITLE</h2>

    <div class="text-gray-600 mb-4" id="waitlist-product-variant">XS / PORT</div>

    <hr class="border-gray-300 mx-2 md:mx-6">

    <div class="my-4 md:my-6">
      <p class="font-medium mb-4 text-sm md:text-base">
        Waitlist: Enter your email to get notified when this product becomes available again.
      </p>

      <div class="flex flex-col sm:flex-row gap-3 mb-4">
        <input
          type="email"
          id="waitlist-email"
          placeholder="Your email"
          class="flex-grow border border-gray-300 p-2 md:p-3 rounded text-sm md:text-base"
        >
        <button
          id="get-notified-btn"
          class="bg-black text-white py-2 md:py-3 px-4 md:px-6 font-medium hover:bg-gray-800 rounded text-sm md:text-base"
          aria-label="Submit waitlist request"
        >
          GET NOTIFIED
        </button>
      </div>
    </div>
  </div>
</div>

<style>
  .featured-collection-page-width {
    margin: 0 10px;
    overflow-y: hidden;
  }

  .collection-filters {
    justify-content: center;
  }

  @media (min-width: 768px) {
    .collections-container {
      width: 400px !important;
      min-width: 400px;
      max-width: 400px;
    }

    .products-container {
      width: calc(100% - 400px - 1.5rem) !important;
      overflow: hidden;
    }

    .slider-container {
      margin-right: -1.5rem;
    }

    .product-slider {
      padding-right: 1.5rem;
    }
  }

  .collection-filters .collection-btn {
    padding: 0.5rem 1.2rem;
    border-bottom: 2px solid black;
    text-align: left;
    background: #fff;
    color: #000;
    text-decoration: none;
    transition: all 0.3s ease;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: space-between;
    gap: 8px;
    position: relative;
  }

  .svg-arrow-right {
    opacity: 0;
    transition: opacity 0.3s ease, transform 0.3s ease;
    transform: translateX(-4px);
  }
  .collection-btn:hover .svg-arrow-right,
  .collection-btn.active .svg-arrow-right {
    opacity: 1;
    transform: translateX(0);
  }

  .collection-filters .collection-btn:hover,
  .collection-filters .collection-btn.active {
    background: #000;
    color: #fff;
  }
  .collection-btn.active {
    border: 1px solid white;
  }

  .product-image-wrapper {
    position: relative;
    overflow: hidden;
  }

  .product-images-container {
    position: relative;
  }

  .product-image {
    transition: opacity 0.3s ease;
  }

  .product-image.hidden {
    display: none;
  }

  .product-image.active {
    display: block;
  }

  .product-images-container:hover .product-image[data-index='0'] {
    display: none;
  }

  .product-images-container:hover .product-image[data-index='1'] {
    display: block;
  }

  .image-nav-arrow {
    position: absolute;
    top: 50%;
    transform: translateY(-50%);
    z-index: 15;
    border-radius: 50%;
    width: 32px;
    height: 32px;
    display: flex;
    align-items: center;
    justify-content: center;
    opacity: 0;
    transition: opacity 0.3s ease, background-color 0.3s ease;
    cursor: pointer;
    border: none;
  }

  .product-image-wrapper:hover .image-nav-arrow {
    opacity: 1;
  }

  .image-nav-arrow:hover {
    background-color: rgba(255, 255, 255, 0.9);
  }

  .image-nav-prev {
    left: 8px;
  }

  .image-nav-next {
    right: 8px;
  }
  .product-images-container:hover .product-image {
    display: block;
  }

  .product-images-container:hover .product-image.hidden {
    display: none;
  }

  .product-image {
    display: none;
  }

  .product-image.active {
    display: block;
  }

  .product-cart-container {
    z-index: 10;
    width: 90%;
  }

  .cart-options-wrapper {
    position: relative;
  }

  .add-to-cart-btn,
  .notify-me-btn {
    transition: all 0.3s ease;
    width: 100%;
    height: 40px;
    position: relative;
    z-index: 5;
    cursor: pointer;
  }

  .add-to-cart-btn:hover,
  .notify-me-btn:hover {
    background-color: black;
    color: white;
  }

  .size-variants-container {
    position: absolute;
    bottom: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: 10;
    transition: all 0.3s ease;
    transform: translateY(0);
    display: flex;
    justify-content: center;
    padding: 2px;
  }

  .size-label-wrapper {
    display: flex;
    width: 100%;
    align-items: center;
  }

  .size-label {
    margin-right: auto;
    font-weight: 600;
    color: #000;
  }

  .product-cart-container:hover .size-variants-container,
  .size-variants-container.active {
    opacity: 1 !important;
    visibility: visible !important;
    transform: translateY(0);
  }

  .product-cart-container:hover .add-to-cart-btn[data-has-variants='true'] {
    opacity: 0 !important;
    visibility: hidden;
  }

  .product-cart-container:hover .add-to-cart-btn[data-has-variants='false'],
  .product-cart-container:hover .notify-me-btn {
    opacity: 1 !important;
    visibility: visible !important;
  }

  .size-option-btn {
    transition: all 0.2s ease;
    width: 30px;
    height: 30px;
    border: 1px solid #000;
    padding: 2px;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
  }

  .unavailable-size {
    opacity: 1;
    position: relative;
    cursor: not-allowed;
    border-color: #ccc;
    color: #ccc;
    overflow: hidden;
  }

  .unavailable-size::after {
    content: '';
    position: absolute;
    top: 50%;
    left: -2px;
    right: -2px;
    height: 1px;
    background-color: #ccc;
    transform: rotate(-45deg);
  }

  .size-option-btn:hover {
    transform: translateY(-2px);
  }

  .size-option-btn.size-animate {
    opacity: 0;
    transform: translateY(20px);
    animation: sizeAppear 0.3s ease forwards;
    animation-delay: calc(0.1s * var(--animation-order));
  }

  @keyframes sizeAppear {
    0% {
      opacity: 0;
      transform: translateY(20px);
    }
    100% {
      opacity: 1;
      transform: translateY(0);
    }
  }

  .size-variants-container:not(.active) .size-option-btn {
    animation: none;
    opacity: 0;
    transform: translateY(20px);
  }

  .size-variants-container.active .size-option-btn {
    animation: sizeAppear 0.3s ease forwards;
    animation-delay: calc(0.1s * var(--animation-order));
  }

  .shop-all-button {
    display: inline-block;
    text-align: center;
    padding: 2px 5px;
    font-weight: bold;
    background-color: #000;
    color: #fff;
    text-decoration: none;
    border-radius: 4px;
    transition: background-color 0.3s ease;
  }

  .shop-all-button:hover {
    background-color: #555;
  }

  hr {
    border: 0;
    height: 1px;
    background: #ccc;
    margin: 10px 0;
  }

  .slider-container {
    position: relative;
    width: 100%;
    overflow-x: auto;
    overflow-y: hidden;
    -webkit-overflow-scrolling: touch;
    height: auto;
    padding-bottom: 12px;
  }

  .product-slider {
    display: flex;
    gap: 6px;
    overflow-y: hidden;
  }

  .product-card {
    flex-shrink: 0;
    height: auto;
    display: flex;
    flex-direction: column;
    justify-content: flex-start;
    overflow: hidden;
  }

  .product-slider::-webkit-scrollbar:vertical {
    display: none;
  }

  .cursor-grab {
    cursor: grab;
  }

  .cursor-grabbing {
    cursor: grabbing;
  }

  .custom-scrollbar::-webkit-scrollbar {
    height: 5px;
    background: transparent;
  }

  .custom-scrollbar::-webkit-scrollbar-track {
    background: transparent;
    padding-top: 10px;
    border-top: 1px solid black;
    border-bottom: 1px solid transparent;
  }

  .custom-scrollbar::-webkit-scrollbar-thumb {
    background-color: black;
    height: 3px;
    border: none;
  }

  .custom-scrollbar::-webkit-scrollbar-button:single-button {
    display: none;
    width: 0;
    height: 0;
  }

  #waitlist-modal-overlay {
    transition: opacity 0.3s ease;
  }

  #waitlist-modal-overlay.hidden {
    opacity: 0;
    pointer-events: none;
  }

  #waitlist-product-title {
    text-transform: uppercase;
    font-weight: bold;
  }

  #waitlist-email {
    border: 1px solid #ccc;
  }

  #get-notified-btn {
    white-space: nowrap;
    text-transform: uppercase;
  }

  .product-cart-container:hover .notify-me-btn[data-has-variants='true'] {
    opacity: 0 !important;
    visibility: hidden !important;
  }

  .product-cart-container:hover .size-variants-container {
    opacity: 1 !important;
    visibility: visible !important;
    transform: translateY(0);
  }

  .image-with-text-custom-button {
    position: relative;
    display: inline-block;
    padding: 2px 7px;
    background-color: white;
    color: black;
    border-radius: 4px;
    overflow: hidden;
    transition: background-color 0s, color 0s;
  }

  .image-with-text-custom-button:hover {
    background-color: black;
    color: white;
    border: 2px solid white;
  }

  .image-with-text-button-text-container {
    position: relative;
    width: 100%;
    overflow: hidden;
  }

  .image-with-text-button-text {
    display: flex;
    align-items: center;
    font-size: 24px;
    line-height: 1;
    text-transform: uppercase;
    letter-spacing: 0.05em;
    transition: transform 0.7s ease;
  }

  .image-with-text-custom-button:hover .image-with-text-button-text {
    transform: translateX(-100%);
  }

  .image-with-text-button-text-hover {
    position: absolute;
    top: 0;
    left: 0;
    display: flex;
    align-items: center;
    font-size: 24px;
    line-height: 1;
    text-transform: uppercase;
    letter-spacing: 0.05em;
    transform: translateX(100%);
    transition: transform 0.7s ease;
  }

  .image-with-text-custom-button:hover .image-with-text-button-text-hover {
    transform: translateX(0);
  }

  .image-with-text-custom-button:not(:hover) .image-with-text-button-text,
  .image-with-text-custom-button:not(:hover) .image-with-text-button-text-hover {
    transition: none;
  }

  .image-with-text-button-arrow {
    margin-left: 28px;
  }

  @media (max-width: 768px) {
    .collection-filters {
      gap: 5px;
      justify-content: left;
    }

    .collection-btn {
      padding: 0 6px !important;
      border: none !important;
      border-radius: 4px !important;
      background: #f4f4f4 !important;
      font-size: 14px !important;
      min-width: fit-content !important;
      height: 24px !important;
    }

    .collection-btn.active {
      background: #000 !important;
      color: #fff !important;
    }

    .collection-btn .svg-arrow-right {
      display: none !important;
    }
    .size-variants-container,
    .product-cart-container,
    .cart-options-wrapper {
      display: none !important;
      opacity: 0 !important;
      visibility: hidden !important;
    }
  }

  .product-image-wrapper:hover .product-image[data-index='0'] {
    display: none;
  }

  .product-image-wrapper:hover .product-image[data-index='1'] {
    display: block;
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', function () {
    let productCurrentIndex = {};

    // Add to cart functionality
    function addToCart(variantId, quantity) {
      const formData = {
        items: [
          {
            id: variantId,
            quantity: quantity,
          },
        ],
      };

      fetch('/cart/add.js', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(formData),
      })
        .then((response) => response.json())
        .then((data) => {
          // Show success notification
          const notification = document.createElement('div');
          notification.className =
            'fixed bottom-4 right-4 bg-black text-white px-6 py-3 rounded-lg z-50 opacity-0 transition-opacity duration-300';
          notification.textContent = 'Added to cart';
          document.body.appendChild(notification);

          setTimeout(() => (notification.style.opacity = '1'), 10);
          setTimeout(() => {
            notification.style.opacity = '0';
            setTimeout(() => notification.remove(), 300);
          }, 2000);

          // Update cart count immediately
          updateCartCount();

          // Open cart drawer if it exists
          const cartDrawerTrigger =
            document.querySelector('[data-cart-drawer-trigger]') ||
            document.querySelector('.cart-drawer-trigger') ||
            document.querySelector('#cart-icon-bubble');
          if (cartDrawerTrigger) {
            cartDrawerTrigger.click();
          }
        })
        .catch((error) => {
          console.error('Error:', error);
          // Show error notification
          const notification = document.createElement('div');
          notification.className =
            'fixed bottom-4 right-4 bg-red-500 text-white px-6 py-3 rounded-lg z-50 opacity-0 transition-opacity duration-300';
          notification.textContent = 'Error adding to cart';
          document.body.appendChild(notification);

          setTimeout(() => (notification.style.opacity = '1'), 10);
          setTimeout(() => {
            notification.style.opacity = '0';
            setTimeout(() => notification.remove(), 300);
          }, 2000);
        });
    }

    // Function to update cart count in all possible locations
    function updateCartCount() {
      fetch('/cart.js')
        .then((res) => res.json())
        .then((cart) => {
          // Target all possible cart count elements using various common selectors
          const cartCountSelectors = [
            '.cart-count',
            '[data-cart-count]',
            '.cart-count-bubble',
            '#cart-icon-bubble .visually-hidden',
            '.cart-item-count',
            '.js-cart-count',
            '.site-header__cart-count',
            '.cart-count-number',
            '[data-header-cart-count]',
          ];

          // Query all possible cart count elements
          cartCountSelectors.forEach((selector) => {
            const elements = document.querySelectorAll(selector);
            if (elements.length > 0) {
              elements.forEach((el) => {
                el.textContent = cart.item_count;
                el.classList.remove('hidden');

                // Handle potential span inside cart bubble
                if (el.querySelector('span')) {
                  el.querySelector('span').textContent = cart.item_count;
                }
              });
            }
          });

          // If there's a cart icon with count displayed as attribute
          const cartIcons = document.querySelectorAll('.cart-icon, [data-cart-icon]');
          cartIcons.forEach((icon) => {
            if (icon) {
              icon.setAttribute('data-count', cart.item_count);
            }
          });

          // Dispatch a custom event that theme might be listening for
          document.dispatchEvent(
            new CustomEvent('cart:updated', {
              detail: { cart: cart },
            })
          );
        })
        .catch((error) => {
          console.error('Error updating cart count:', error);
        });
    }

    function initializeCollection(container) {
      // Initialize product current index for each product
      const productImages = container.querySelectorAll('.product-image');
      productImages.forEach((img) => {
        const productId = img.getAttribute('data-product-id');
        if (productId && !productCurrentIndex[productId]) {
          productCurrentIndex[productId] = 0;
        }
      });

      // Image hover functionality - improved to work with navigation arrows
      const imageContainers = container.querySelectorAll('.product-image-wrapper'); // Updated selector
      imageContainers.forEach((wrapper) => {
        const images = Array.from(wrapper.querySelectorAll('.product-image'));
        const productId = images[0]?.getAttribute('data-product-id');

        if (!productId || images.length <= 1) return;

        // Track if mouse is over the container
        let isHovering = false;

        wrapper.addEventListener('mouseenter', (e) => {
          // if (e.target.closest('.add-to-cart-btn, .notify-me-btn')) // Prevent hover effect on buttons
          isHovering = true;
          if (images.length >= 2 && productCurrentIndex[productId] === 0) {
            updateProductImage(productId, 1, images);
          }
        });

        wrapper.addEventListener('mouseleave', () => {
          if (isHovering && productCurrentIndex[productId] === 1) {
            updateProductImage(productId, 0, images);
          }
          isHovering = false;
        });

        // Helper function to update product image
        function updateProductImage(productId, newIndex, imageElements) {
          // Save the new index
          productCurrentIndex[productId] = newIndex;

          // Update the display
          imageElements.forEach((img, i) => {
            if (i === newIndex) {
              img.classList.remove('hidden');
              img.classList.add('active');
            } else {
              img.classList.add('hidden');
              img.classList.remove('active');
            }
          });
        }
      });

      // Image navigation arrows - improved implementation
      const prevButtons = container.querySelectorAll('.image-nav-prev');
      const nextButtons = container.querySelectorAll('.image-nav-next');

      function navigateImage(productId, direction, event) {
        // Stop event propagation to prevent conflicts with other handlers
        if (event) {
          event.preventDefault();
          event.stopPropagation();
        }

        const imageContainer = container.querySelector(
          `.product-images-container:has(.product-image[data-product-id="${productId}"])`
        );
        if (!imageContainer) return;

        const images = Array.from(imageContainer.querySelectorAll(`.product-image[data-product-id="${productId}"]`));
        if (images.length <= 1) return;

        // Calculate new index
        const currentIndex = productCurrentIndex[productId] || 0;
        const newIndex =
          direction === 'next'
            ? (currentIndex + 1) % images.length
            : (currentIndex - 1 + images.length) % images.length;

        // Update display
        images.forEach((img, i) => {
          if (i === newIndex) {
            img.classList.remove('hidden');
            img.classList.add('active');
          } else {
            img.classList.add('hidden');
            img.classList.remove('active');
          }
        });

        // Update stored index
        productCurrentIndex[productId] = newIndex;
      }

      prevButtons.forEach((button) => {
        button.addEventListener('click', (e) => {
          const productId = button.getAttribute('data-product-id');
          navigateImage(productId, 'prev', e);
        });
      });

      nextButtons.forEach((button) => {
        button.addEventListener('click', (e) => {
          const productId = button.getAttribute('data-product-id');
          navigateImage(productId, 'next', e);
        });
      });

      // Slider drag functionality
      const slider = container.querySelector('.product-slider');
      if (!slider) return;

      let isDown = false;
      let startX;
      let scrollLeft;

      slider.addEventListener('mousedown', (e) => {
        if (e.target.closest('.image-nav-arrow') || e.target.closest('.size-option-btn')) return;
        isDown = true;
        slider.classList.add('cursor-grabbing');
        startX = e.pageX - slider.offsetLeft;
        scrollLeft = slider.scrollLeft;
      });

      slider.addEventListener('mouseleave', () => {
        isDown = false;
        slider.classList.remove('cursor-grabbing');
      });

      slider.addEventListener('mouseup', () => {
        isDown = false;
        slider.classList.remove('cursor-grabbing');
      });

      slider.addEventListener('mousemove', (e) => {
        if (!isDown) return;
        e.preventDefault();
        const x = e.pageX - slider.offsetLeft;
        const walk = (x - startX) * 2;
        slider.scrollLeft = scrollLeft - walk;
      });

      // Initialize variant hover functionality
      const productCards = container.querySelectorAll('.product-card');
      productCards.forEach((card) => {
        const cartContainer = card.querySelector('.product-cart-container');
        const sizeContainer = card.querySelector('.size-variants-container');

        if (cartContainer && sizeContainer) {
          cartContainer.addEventListener('mouseenter', () => {
            sizeContainer.style.opacity = '1';
            sizeContainer.style.visibility = 'visible';
          });

          cartContainer.addEventListener('mouseleave', () => {
            sizeContainer.style.opacity = '0';
            sizeContainer.style.visibility = 'hidden';
          });
        }
      });

      // Initialize size buttons and waitlist functionality
      const sizeButtons = container.querySelectorAll('.size-option-btn');
      sizeButtons.forEach((button) => {
        button.addEventListener('click', (e) => {
          e.preventDefault();
          e.stopPropagation();

          if (button.hasAttribute('data-waitlist')) {
            openWaitlistModal(button.getAttribute('data-product-title'), button.getAttribute('data-variant-size'));
          } else {
            const variantId = button.getAttribute('data-variant-id');
            if (variantId) {
              addToCart(variantId, 1);
            }
          }
        });
      });

      // Direct add to cart buttons (non-size variant products)
      const addToCartButtons = container.querySelectorAll('.add-to-cart-btn[data-has-variants="false"]');
      addToCartButtons.forEach((button) => {
        button.addEventListener('click', (e) => {
          e.preventDefault();
          e.stopPropagation();
          const variantId = button.getAttribute('data-variant-id');
          if (variantId) {
            addToCart(variantId, 1);
          }
        });
      });

      // Initialize notify me buttons
      const notifyButtons = container.querySelectorAll('.notify-me-btn');
      notifyButtons.forEach((button) => {
        button.addEventListener('click', (e) => {
          e.preventDefault();
          e.stopPropagation();
          openWaitlistModal(button.getAttribute('data-product-title'), null);
        });
      });
    }

    // Waitlist Modal Functions
    const waitlistModal = document.getElementById('waitlist-modal-overlay');
    const closeModalBtn = document.getElementById('close-waitlist-modal');
    const waitlistEmail = document.getElementById('waitlist-email');
    const getNotifiedBtn = document.getElementById('get-notified-btn');

    function openWaitlistModal(productTitle, variantSize) {
      const titleElement = document.getElementById('waitlist-product-title');
      const variantElement = document.getElementById('waitlist-product-variant');

      if (titleElement) titleElement.textContent = productTitle || 'Product';

      if (variantElement) {
        if (variantSize) {
          variantElement.textContent = `Size: ${variantSize}`;
          variantElement.style.display = 'block';
        } else {
          variantElement.style.display = 'none';
        }
      }

      waitlistModal.classList.remove('hidden');
      waitlistModal.style.display = 'flex';

      // Reset form
      if (waitlistEmail) waitlistEmail.value = '';
    }

    if (closeModalBtn) {
      closeModalBtn.addEventListener('click', () => {
        waitlistModal.classList.add('hidden');
        setTimeout(() => {
          waitlistModal.style.display = 'none';
        }, 300);
      });
    }

    if (waitlistModal) {
      waitlistModal.addEventListener('click', (e) => {
        if (e.target === waitlistModal) {
          closeModalBtn.click();
        }
      });
    }

    if (getNotifiedBtn) {
      getNotifiedBtn.addEventListener('click', () => {
        const email = waitlistEmail.value.trim();
        if (!email || !/\S+@\S+\.\S+/.test(email)) {
          waitlistEmail.style.borderColor = 'red';
          return;
        }

        // Reset validation
        waitlistEmail.style.borderColor = '';
        getNotifiedBtn.textContent = 'Submitting...';
        getNotifiedBtn.disabled = true;

        // Here you would typically make an API call to your waitlist service
        setTimeout(() => {
          getNotifiedBtn.textContent = 'Thank you!';
          setTimeout(() => {
            closeModalBtn.click();
            setTimeout(() => {
              getNotifiedBtn.textContent = 'GET NOTIFIED';
              getNotifiedBtn.disabled = false;
            }, 300);
          }, 1500);
        }, 1000);
      });
    }

    // Collection switching functionality
    const collectionButtons = document.querySelectorAll('.collection-btn');
    const collectionContainers = document.querySelectorAll('.collection-products-container');

    collectionButtons.forEach((button) => {
      button.addEventListener('click', () => {
        const collectionId = button.getAttribute('data-collection');

        collectionButtons.forEach((btn) => {
          btn.classList.remove('active');
          btn.setAttribute('aria-pressed', 'false');
        });
        button.classList.add('active');
        button.setAttribute('aria-pressed', 'true');

        collectionContainers.forEach((container) => {
          if (container.getAttribute('data-collection-id') === collectionId) {
            container.classList.remove('hidden');
            // Initialize functionality for newly shown collection
            initializeCollection(container);
          } else {
            container.classList.add('hidden');
          }
        });
      });
    });

    // Update cart count on page load to ensure synchronization
    updateCartCount();

    // Initialize functionality for initially visible collection
    const initialContainer = document.querySelector('.collection-products-container:not(.hidden)');
    if (initialContainer) {
      initializeCollection(initialContainer);
    }
  });
</script>

{% schema %}
{
  "name": "Featured Collection",
  "tag": "section",
  "class": "section",
  "settings": [
    {
      "type": "text",
      "id": "heading",
      "label": "Heading",
      "default": "Featured Collections"
    },
    {
      "type": "richtext",
      "id": "description",
      "label": "Description",
      "default": "<p>Browse our featured products</p>"
    },
    {
      "type": "checkbox",
      "id": "show_shop_all",
      "label": "Show 'Shop All' button",
      "default": true
    },
    {
      "type": "text",
      "id": "button_text",
      "label": "Button text",
      "default": "SHOP ALL",
      "info": "Text for the 'Shop All' button"
    },
    {
      "type": "collection",
      "id": "main_collection",
      "label": "Main collection for 'Shop All'",
      "info": "Collection to link when 'Shop All' is clicked"
    }
  ],
  "blocks": [
    {
      "type": "collection",
      "name": "Collection",
      "limit": 10,
      "settings": [
        {
          "type": "text",
          "id": "label",
          "label": "Collection Name",
          "default": "Collection"
        },
        {
          "type": "collection",
          "id": "collection",
          "label": "Collection",
          "info": "Select a collection to display"
        }
      ]
    }
  ],
  "presets": [
    {
      "name": "Featured Collection",
      "blocks": [
        {
          "type": "collection"
        },
        {
          "type": "collection"
        },
        {
          "type": "collection"
        }
      ]
    }
  ]
}
{% endschema %}
