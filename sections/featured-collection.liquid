<div class="featured-collection-page-width py-10">
  {% if section.settings.heading != blank %}
    <h2 class="!text-9xl font-bold mb-4">{{ section.settings.heading }}</h2>
  {% endif %}

  <div class="flex justify-end items-center mb-6">
    {% if section.settings.description != blank %}
      <p class="text-4xl p-2 text-gray-700 mr-auto">{{ section.settings.description }}</p>
    {% endif %}

    {% if section.settings.collection %}
      <a
        href="{{ section.settings.collection.url }}"
        class="shop-all-button text-base font-semibold py-2 px-4 border rounded bg-black text-white hover:bg-gray-800"
      >
        {{ section.settings.button_text }}
      </a>
    {% endif %}
  </div>

  <hr class="border-gray-300 my-6">

  <div class="flex gap-6">
    <!-- Filters Section (Left Side) -->
    <div class="filters-container w-1/4">
      <div class="gender-filters flex flex-col gap-4">
        {% for block in section.blocks %}
          <button
            class="filter-btn {% if forloop.first %}active{% endif %}"
            data-filter="{{ block.settings.tag | downcase }}"
            aria-label="Filter by {{ block.settings.label }}"
            aria-pressed="{% if forloop.first %}true{% else %}false{% endif %}"
          >
            <span class="label-text">{{ block.settings.label }}</span>
            <svg class="svg-arrow-right" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 37 36" width="18" height="18">
              <path fill="currentColor" d="M26.79,9.21A35.06,35.06,0,0,0,37,16.2v3.66a35.34,35.34,0,0,0-10.21,7A12.84,12.84,0,0,0,23.21,36H17.56q0-6.22,3-10a15.4,15.4,0,0,1,8.06-5.2V20.6H0V15.43H28.63v-.3A15.16,15.16,0,0,1,20.57,10q-3-3.77-3-10h5.65a13,13,0,0,0,.87,5A12.79,12.79,0,0,0,26.79,9.21Z"/>
            </svg>
          </button>
        {% endfor %}
      </div>
    </div>

    <!-- Products Section (Right Side) -->
    <div class="products-container w-3/4">
      {% if section.settings.collection %}
        <div class="slider-container relative">
          <div
            id="product-slider"
            class="product-slider flex gap-6 cursor-grab overflow-x-auto custom-scrollbar"
          >
            {% for product in section.settings.collection.products %}
              <div
                class="product-card flex-none w-64"
                data-tag="{% for tag in product.tags %}{{ tag | downcase }} {% endfor %}"
              >
                <div class="product-image-wrapper relative group">
                  <!-- SOLD OUT LABEL -->
                  {% unless product.available %}
                    <div class="absolute top-3 right-0 z-10">
                      <span class="inline-block rounded-xl px-4 text-[12px] tracking-wide font-medium bg-zinc-800 text-white">
                        SOLD OUT
                      </span>
                    </div>
                  {% endunless %}

                  <a href="{{ product.url }}" class="product-image-link block relative">
                    <div class="product-images-container relative">
                      {% if product.images.size > 1 %}
                        {% for image in product.images %}
                          <img
                            src="{{ image | img_url: '450x544', crop: 'center' }}"
                            alt="{{ product.title }}{% if forloop.index > 1 %} image {{ forloop.index }}{% endif %}"
                            class="w-full h-auto rounded product-image {% if forloop.first %}active{% else %}hidden{% endif %}"
                            data-index="{{ forloop.index0 }}"
                            data-product-id="{{ product.id }}"
                          >
                        {% endfor %}

                        <!-- Navigation Arrows (only visible when multiple images) -->
                        <button
                          class="image-nav-arrow image-nav-prev"
                          data-product-id="{{ product.id }}"
                          aria-label="Previous image"
                          aria-controls="product-images-{{ product.id }}"
                        >
                          <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="24" height="24">
                            <path fill="currentColor" d="M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z"/>
                          </svg>
                        </button>
                        <button
                          class="image-nav-arrow image-nav-next"
                          data-product-id="{{ product.id }}"
                          aria-label="Next image"
                          aria-controls="product-images-{{ product.id }}"
                        >
                          <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="24" height="24">
                            <path fill="currentColor" d="M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z"/>
                          </svg>
                        </button>
                      {% else %}
                        <img
                          src="{{ product.featured_image | img_url: '450x544', crop: 'center' }}"
                          alt="{{ product.title }}"
                          class="w-full h-auto rounded"
                        >
                      {% endif %}
                    </div>
                  </a>

                  <!-- Add to Cart Button & Size Variants -->
                  <div class="product-cart-container absolute bottom-4 left-1/2 transform -translate-x-1/2 w-full px-4">
                    <div class="cart-options-wrapper relative">
                      {% assign has_size_variants = false %}
                      {% unless product.has_only_default_variant %}
                        {% for option in product.options_with_values %}
                          {% if option.name == 'Size' or option.name == 'size' %}
                            {% assign has_size_variants = true %}
                          {% endif %}
                        {% endfor %}
                      {% endunless %}

                      <!-- Size variants container (positioned on top) -->
                      {% if has_size_variants and product.available %}
                        <div class="size-variants-container bg-white rounded p-2 mb-0 opacity-0 invisible">
                          {% for option in product.options_with_values %}
                            {% if option.name == 'Size' or option.name == 'size' %}
                              {% assign size_option_index = forloop.index0 %}
                              <div class="size-label-wrapper flex items-center w-full">
                                <span class="size-label text-m font-semibold px-2 mr-auto">SELECT SIZE</span>
                                <div
                                  class="size-options-wrapper flex flex-wrap gap-4 justify-end"
                                  data-option-index="{{ size_option_index }}"
                                >
                                  {% for value in option.values %}
                                    {% assign variant_available = false %}
                                    {% for variant in product.variants %}
                                      {% if variant.options[size_option_index] == value and variant.available %}
                                        {% assign variant_available = true %}
                                        {% assign variant_id = variant.id %}
                                        {% break %}
                                      {% endif %}
                                    {% endfor %}

                                    <button
                                      class="size-option-btn p-5 bg-gray-200 text-s rounded size-animate {% if variant_available %}hover:bg-black hover:text-white{% else %}opacity-50 cursor-not-allowed{% endif %}"
                                      {% if variant_available %}
                                        data-variant-id="{{ variant_id }}"
                                        data-product-id="{{ product.id }}"
                                      {% endif %}
                                      style="--animation-order: {{ forloop.index }}"
                                      aria-label="Select size {{ value }}"
                                      {% unless variant_available %}
                                        aria-disabled="true"
                                      {% endunless %}
                                    >
                                      {{ value }}
                                    </button>
                                  {% endfor %}
                                </div>
                              </div>
                            {% endif %}
                          {% endfor %}
                        </div>
                      {% endif %}

                      <!-- Button - Different based on availability -->
                      {% if product.available %}
                        <!-- Regular add to cart button -->
                        <button
                          class="add-to-cart-btn w-90 bg-black text-white py-2 px-4 rounded opacity-0 group-hover:opacity-100 transition-opacity duration-300"
                          data-product-id="{{ product.id }}"
                          {% if product.has_only_default_variant %}
                            data-variant-id="{{ product.variants.first.id }}"
                            data-has-variants="false"
                          {% elsif has_size_variants %}
                            data-has-variants="true"
                          {% else %}
                            data-variant-id="{{ product.variants.first.id }}"
                            data-has-variants="false"
                          {% endif %}
                          aria-label="Add {{ product.title }} to cart"
                        >
                          Add to Cart
                        </button>
                      {% else %}
                        <!-- Notify me button for sold out products -->
                        <button
                          class="notify-me-btn w-90 bg-black text-white py-2 px-4 rounded opacity-0 group-hover:opacity-100 transition-opacity duration-300"
                          data-product-id="{{ product.id }}"
                          data-product-title="{{ product.title | escape }}"
                          data-has-variants="true"
                          aria-label="Get notified when {{ product.title }} is back in stock"
                          aria-haspopup="dialog"
                        >
                          Notify Me When In Stock
                        </button>
                      {% endif %}
                    </div>
                  </div>
                </div>

                <div class="product-details mt-3">
                  <a href="{{ product.url }}">
                    <h3 class="!text-[1.6rem] uppercase font-medium leading-tight">
                      {{ product.title | escape }}
                    </h3>
                    <div class="flex gap-2 items-baseline">
                      <span class="!text-[1.6rem] uppercase font-medium"> {{ product.price | money }} </span>
                      {%- if product.compare_at_price > product.price -%}
                        |<span class="!text-[1.6rem] uppercase text-red-600">
                          {{- product.compare_at_price | money }} FOR MEMBERS</span
                        >
                      {%- endif -%}
                    </div>
                  </a>
                </div>
              </div>
            {% endfor %}
          </div>
        </div>
      {% else %}
        <p>No collection selected.</p>
      {% endif %}
    </div>
  </div>
</div>

<!-- Waitlist Modal Overlay -->
<div
  id="waitlist-modal-overlay"
  class="fixed inset-0 z-50 bg-black/50 hidden items-center justify-center"
>
  <!-- Modal Container -->
  <div class="bg-white !w-[50vw]  rounded p-10 shadow-lg mx-4">
    <!-- Close Button -->
    <div class="flex justify-end p-4">
      <button
        id="close-waitlist-modal"
        class="text-black hover:text-gray-700 font-medium"
        aria-label="Close waitlist form"
      >
        CLOSE
      </button>
    </div>

    <!-- Product Title -->
    <h2 class="text-2xl font-bold mb-2" id="waitlist-product-title">PRODUCT TITLE</h2>

    <!-- Product Variant -->
    <div class="text-gray-600 mb-4" id="waitlist-product-variant">XS / PORT</div>

    <hr class="border-gray-300 mx-6">

    <!-- Waitlist Form -->
    <div class="my-6">
      <p class="font-medium mb-4">
        Waitlist: Enter your email to get notified when this product becomes available again.
      </p>

      <div class="flex flex-col sm:flex-row gap-3 mb-4">
        <input
          type="email"
          id="waitlist-email"
          placeholder="Your email"
          class="flex-grow border border-gray-300 p-3 rounded"
        >
        <button
          id="get-notified-btn"
          class="bg-black text-white py-3 px-6 font-medium hover:bg-gray-800 rounded"
          aria-label="Submit waitlist request"
        >
          GET NOTIFIED
        </button>
      </div>
    </div>
  </div>
</div>

<style>
                .featured-collection-page-width {
                  margin: 0 10px;
                  overflow-y: hidden;
                }

                .gender-filters .filter-btn {
                  padding: 0.5rem 1.2rem;
                  border-bottom: 2px solid black;
                  text-align: left;
                  background: #fff;
                  color: #000;
                  text-decoration: none;
                  transition: all 0.3s ease;
                  cursor: pointer;
                  display: flex;
                  align-items: center;
                  justify-content: space-between;
                  gap: 8px;
                  position: relative;
                }

                .svg-arrow-right {
                  opacity: 0;
                  transition: opacity 0.3s ease, transform 0.3s ease;
                  transform: translateX(-4px);
                }
                .filter-btn:hover .svg-arrow-right,
                .filter-btn.active .svg-arrow-right {
                  opacity: 1;
                  transform: translateX(0);
                }

                .gender-filters .filter-btn:hover,
                .gender-filters .filter-btn.active {
                  background: #000;
                  color: #fff;
                }

                .product-image-wrapper {
                  position: relative;
                  overflow: hidden;
                }

                .product-images-container {
                  position: relative;
                }

                .product-image {
                  transition: opacity 0.3s ease;
                }

                .product-image.hidden {
                  display: none;
                }

                .product-image.active {
                  display: block;
                }

                /* Hover functionality to show second image */
                .product-images-container:hover .product-image[data-index='0'] {
                  display: none;
                }

                .product-images-container:hover .product-image[data-index='1'] {
                  display: block;
                }

                /* Image Navigation Arrows */
                .image-nav-arrow {
                  position: absolute;
                  top: 50%;
                  transform: translateY(-50%);
                  z-index: 15;
                  background-color: rgba(255, 255, 255, 0.7);
                  border-radius: 50%;
                  width: 32px;
                  height: 32px;
                  display: flex;
                  align-items: center;
                  justify-content: center;
                  opacity: 0;
                  transition: opacity 0.3s ease, background-color 0.3s ease;
                  cursor: pointer;
                  border: none;
                }

                .product-image-wrapper:hover .image-nav-arrow {
                  opacity: 1;
                }

                .image-nav-arrow:hover {
                  background-color: rgba(255, 255, 255, 0.9);
                }

                .image-nav-prev {
                  left: 8px;
                }

                .image-nav-next {
                  right: 8px;
                }

                .product-cart-container {
                  z-index: 10;
                  width: 90%;
                }

                .cart-options-wrapper {
                  position: relative;
                }

                .add-to-cart-btn,
                .notify-me-btn {
                  transition: all 0.3s ease;
                  width: 100%;
                  height: 40px;
                  position: relative;
                  z-index: 5;
                }

                .add-to-cart-btn:hover,
                .notify-me-btn:hover {
                  background-color: #333;
                }

                /* Size variants container - Updated positioning */
                .size-variants-container {
                  position: absolute;
                  bottom: 0;
                  left: 0;
                  width: 100%;
                  height: 100%;
                  z-index: 10; /* Higher than add to cart button */
                  transition: all 0.3s ease;
                  transform: translateY(0);
                  display: flex;
                  justify-content: center;
                  padding: 2px;
                }

                /* Size label styling */
                .size-label-wrapper {
                  display: flex;
                  width: 100%;
                  align-items: center;
                }

                .size-label {
                  margin-right: auto;
                  font-weight: 600;
                  color: #000;
                }

                /* Only show variants on hover if product has variants */
                .product-cart-container:hover .size-variants-container,
                .size-variants-container.active {
                  opacity: 1 !important;
                  visibility: visible !important;
                  transform: translateY(0);
                }

                /* Only hide the add to cart button when size variants are shown */
                .product-cart-container:hover .add-to-cart-btn[data-has-variants='true'] {
                  opacity: 0 !important;
                  visibility: hidden;
                }

                /* Keep normal button hover state for products without variants */
                .product-cart-container:hover .add-to-cart-btn[data-has-variants='false'],
                .product-cart-container:hover .notify-me-btn {
                  opacity: 1 !important;
                  visibility: visible !important;
                }

                .size-option-btn {
                  transition: all 0.2s ease;
                  width:30px;
                  border: 1px solid #000;
                  padding: 2px;
                }

                .size-option-btn:hover {
                  transform: translateY(-2px);
                }

                /* Size button animation styles */
                .size-option-btn.size-animate {
                  opacity: 0;
                  transform: translateY(20px);
                  animation: sizeAppear 0.3s ease forwards;
                  animation-delay: calc(0.1s * var(--animation-order));
                }

                @keyframes sizeAppear {
                  0% {
                    opacity: 0;
                    transform: translateY(20px);
                  }
                  100% {
                    opacity: 1;
                    transform: translateY(0);
                  }
                }

                /* Reset animation when container is not visible */
                .size-variants-container:not(.active) .size-option-btn {
                  animation: none;
                  opacity: 0;
                  transform: translateY(20px);
                }

                .size-variants-container.active .size-option-btn {
                  animation: sizeAppear 0.3s ease forwards;
                  animation-delay: calc(0.1s * var(--animation-order));
                }

                .shop-all-button {
                  display: inline-block;
                  text-align: center;
                  padding: 2px 5px;
                  font-weight: bold;
                  background-color: #000;
                  color: #fff;
                  text-decoration: none;
                  border-radius: 4px;
                  transition: background-color 0.3s ease;
                }

                .shop-all-button:hover {
                  background-color: #555;
                }

                hr {
                  border: 0;
                  height: 1px;
                  background: #ccc;
                  margin: 10px 0;
                }

                .slider-container {
                  position: relative;
                  width: 100%;
                  overflow-x: auto;
                  overflow-y: hidden;
                  -webkit-overflow-scrolling: touch;
                  height: auto;
                  padding-bottom: 12px; /* Add padding to show scrollbar */
                }

                .product-slider {
                  display: flex;
                  gap: 6px;
                  overflow-y: hidden;
                }

                .product-card {
                  flex-shrink: 0;
                  width: 450px;
                  height: auto;
                  display: flex;
                  flex-direction: column;
                  justify-content: flex-start;
                  overflow: hidden;
                }

                /* Hide only vertical scrollbar */
                .product-slider::-webkit-scrollbar:vertical {
                  display: none;
                }

                .cursor-grab {
                  cursor: grab;
                }

                .cursor-grabbing {
                  cursor: grabbing;
                }
    /* Main scrollbar styles */
  .custom-scrollbar::-webkit-scrollbar {
    height: 5px; /* enough space for thumb to float */
    background: transparent;
  }

  /* Track: just a thin black line centered vertically */
  .custom-scrollbar::-webkit-scrollbar-track {
    background: transparent;
    padding-top: 10px;
    border-top: 1px solid black;
    border-bottom: 1px solid transparent; /* optional, to visually center */
  }

  /* Thumb: white rectangle floating above the black line */
  .custom-scrollbar::-webkit-scrollbar-thumb {
    background-color: black;
    height: 3px;
    border: none;
  }

  /* Hide arrows */
  .custom-scrollbar::-webkit-scrollbar-button:single-button {
    display: none;
    width: 0;
    height: 0;
  }


                /* Waitlist Modal Styles */
                #waitlist-modal-overlay {
                  transition: opacity 0.3s ease;
                }

                #waitlist-modal-overlay.hidden {
                  opacity: 0;
                  pointer-events: none;
                }

                #waitlist-product-title {
                  text-transform: uppercase;
                  font-weight: bold;
                }

                #waitlist-email {
                  border: 1px solid #ccc;
                }

                #get-notified-btn {
                  white-space: nowrap;
                  text-transform: uppercase;
                }
</style>

<script>
  document.addEventListener('DOMContentLoaded', function () {
    const productSlider = document.querySelector('#product-slider');
    // Track current image for each product
    const productCurrentIndex = {};

    let isMouseDown = false;
    let startX, scrollLeft;

    // Initialize image trackers
    document.querySelectorAll('.product-image').forEach((img) => {
      const productId = img.getAttribute('data-product-id');
      if (img.classList.contains('active')) {
        productCurrentIndex[productId] = parseInt(img.getAttribute('data-index'));
      }
    });

    productSlider.addEventListener('mousedown', (e) => {
      // Prevent slider drag if clicking on arrow buttons or size buttons
      if (e.target.closest('.image-nav-arrow') || e.target.closest('.size-option-btn')) {
        return;
      }

      isMouseDown = true;
      productSlider.classList.add('cursor-grabbing');
      startX = e.pageX - productSlider.offsetLeft;
      scrollLeft = productSlider.scrollLeft;
    });

    productSlider.addEventListener('mouseleave', () => {
      isMouseDown = false;
      productSlider.classList.remove('cursor-grabbing');
      productSlider.classList.add('cursor-grab');
    });

    productSlider.addEventListener('mouseup', () => {
      isMouseDown = false;
      productSlider.classList.remove('cursor-grabbing');
      productSlider.classList.add('cursor-grab');
    });

    productSlider.addEventListener('mousemove', (e) => {
      if (!isMouseDown) return;
      const x = e.pageX - productSlider.offsetLeft;
      const walk = (x - startX) * 2;
      productSlider.scrollLeft = scrollLeft - walk;
    });

    // Handle hover image changes
    const productImageContainers = document.querySelectorAll('.product-images-container');

    productImageContainers.forEach((container) => {
      const images = Array.from(container.querySelectorAll('.product-image'));
      const productId = images[0]?.getAttribute('data-product-id');

      if (images.length > 1) {
        // Add mouseenter event to show second image
        container.addEventListener('mouseenter', () => {
          if (images.length >= 2) {
            // Hide all images
            images.forEach((img) => {
              img.classList.add('hidden');
              img.classList.remove('active');
            });

            // Show second image
            images[1].classList.remove('hidden');
            images[1].classList.add('active');
          }
        });

        // Add mouseleave event to return to current tracked image
        container.addEventListener('mouseleave', () => {
          // Get current tracked index (or default to 0)
          const currentIndex = productCurrentIndex[productId] || 0;

          // Hide all images
          images.forEach((img) => {
            img.classList.add('hidden');
            img.classList.remove('active');
          });

          // Show the tracked image
          if (images[currentIndex]) {
            images[currentIndex].classList.remove('hidden');
            images[currentIndex].classList.add('active');
          }
        });
      }
    });

    // Image Navigation Functionality
    const prevButtons = document.querySelectorAll('.image-nav-prev');
    const nextButtons = document.querySelectorAll('.image-nav-next');

    // Function to change image
    function changeImage(productId, direction) {
      const images = document.querySelectorAll(`.product-image[data-product-id="${productId}"]`);
      if (images.length <= 1) return;

      // Get current index (either from tracker or by finding active image)
      let currentIndex = productCurrentIndex[productId];
      if (currentIndex === undefined) {
        images.forEach((img, index) => {
          if (!img.classList.contains('hidden')) {
            currentIndex = index;
          }
        });
      }

      if (currentIndex === undefined) currentIndex = 0;

      // Calculate next index based on direction
      let nextIndex;
      if (direction === 'prev') {
        nextIndex = (currentIndex - 1 + images.length) % images.length;
      } else {
        nextIndex = (currentIndex + 1) % images.length;
      }

      // Hide current image and show next image
      images.forEach((img) => {
        img.classList.add('hidden');
        img.classList.remove('active');
      });

      images[nextIndex].classList.remove('hidden');
      images[nextIndex].classList.add('active');

      // Update tracker
      productCurrentIndex[productId] = nextIndex;
    }

    // Add event listeners to prev buttons
    prevButtons.forEach((button) => {
      button.addEventListener('click', (e) => {
        e.preventDefault();
        e.stopPropagation(); // Prevent slider drag
        const productId = button.getAttribute('data-product-id');
        changeImage(productId, 'prev');
      });
    });

    // Add event listeners to next buttons
    nextButtons.forEach((button) => {
      button.addEventListener('click', (e) => {
        e.preventDefault();
        e.stopPropagation(); // Prevent slider drag
        const productId = button.getAttribute('data-product-id');
        changeImage(productId, 'next');
      });
    });

    // Filter Functionality
    const filterButtons = document.querySelectorAll('.filter-btn');
    const productCards = document.querySelectorAll('.product-card');

    filterButtons.forEach((button) => {
      button.addEventListener('click', () => {
        filterButtons.forEach((btn) => btn.classList.remove('active'));
        button.classList.add('active');

        const filter = button.getAttribute('data-filter');

        productCards.forEach((card) => {
          const tag = card.getAttribute('data-tag');
          if (filter === 'all') {
            card.style.display = 'block';
          } else if (tag && tag.includes(filter)) {
            card.style.display = 'block';
          } else {
            card.style.display = 'none';
          }
        });
      });
    });

    // Size variant selection and Add to Cart functionality
    const sizeOptionButtons = document.querySelectorAll('.size-option-btn');
    const addToCartButtons = document.querySelectorAll('.add-to-cart-btn');
    const notifyMeButtons = document.querySelectorAll('.notify-me-btn');

    // Size option button click handler
    sizeOptionButtons.forEach((button) => {
      button.addEventListener('click', (e) => {
        e.preventDefault();
        e.stopPropagation();

        const variantId = button.getAttribute('data-variant-id');
        const productId = button.getAttribute('data-product-id');

        if (variantId) {
          // Add the selected variant to cart
          addToCart(variantId, 1, productId);

          // Visual feedback for selection
          const sizeContainer = button.closest('.size-options-wrapper');
          sizeContainer.querySelectorAll('.size-option-btn').forEach((btn) => {
            btn.classList.remove('bg-black', 'text-white');
          });
          button.classList.add('bg-black', 'text-white');
        }
      });
    });

    // Direct add to cart for products with only default variant
    addToCartButtons.forEach((button) => {
      button.addEventListener('click', (e) => {
        e.preventDefault();
        e.stopPropagation();

        const productId = button.getAttribute('data-product-id');
        const variantId = button.getAttribute('data-variant-id');
        const hasVariants = button.getAttribute('data-has-variants') === 'true';

        // Only add to cart if it has a variant ID (meaning it's a product with no size options)
        if (variantId && !hasVariants) {
          addToCart(variantId, 1, productId);
        }
      });
    });

    // Notify Me button functionality
    notifyMeButtons.forEach((button) => {
      button.addEventListener('click', (e) => {
        e.preventDefault();
        e.stopPropagation();

        const productId = button.getAttribute('data-product-id');
        // Add this inside your existing DOMContentLoaded event listener
        // Waitlist Modal Functionality
        const waitlistModal = document.getElementById('waitlist-modal-overlay');
        const closeModalBtn = document.getElementById('close-waitlist-modal');
        const waitlistProductTitle = document.getElementById('waitlist-product-title');
        const waitlistProductVariant = document.getElementById('waitlist-product-variant');
        const waitlistEmail = document.getElementById('waitlist-email');
        const getNotifiedBtn = document.getElementById('get-notified-btn');

        // Open modal when clicking "Notify Me" buttons
        notifyMeButtons.forEach((button) => {
          button.addEventListener('click', (e) => {
            e.preventDefault();
            e.stopPropagation();

            const productId = button.getAttribute('data-product-id');
            const productTitle = button.getAttribute('data-product-title');

            // Set the product information in the modal
            waitlistProductTitle.textContent = productTitle;

            // For products with variants, you might want to show the selected variant
            // For now, we'll hide this element if there's no variant information
            waitlistProductVariant.style.display = 'none';

            // Show the modal
            waitlistModal.classList.remove('hidden');
            waitlistModal.style.display = 'flex';

            // Store the product ID for submission
            getNotifiedBtn.setAttribute('data-product-id', productId);
          });
        });

        // Close modal when clicking the close button
        closeModalBtn.addEventListener('click', () => {
          waitlistModal.classList.add('hidden');
          setTimeout(() => {
            waitlistModal.style.display = 'none';
          }, 300); // Match the transition duration
        });

        // Close modal when clicking outside the modal content
        waitlistModal.addEventListener('click', (e) => {
          if (e.target === waitlistModal) {
            closeModalBtn.click();
          }
        });

        // Handle the form submission
        getNotifiedBtn.addEventListener('click', () => {
          const email = waitlistEmail.value.trim();
          const productId = getNotifiedBtn.getAttribute('data-product-id');

          // Validate email
          if (!email || !/\S+@\S+\.\S+/.test(email)) {
            waitlistEmail.style.borderColor = 'red';
            return;
          }

          // Reset validation
          waitlistEmail.style.borderColor = '';

          // Submit the waitlist request
          submitWaitlistRequest(email, productId);
        });

        function submitWaitlistRequest(email, productId) {
          getNotifiedBtn.textContent = 'Submitting...';
          getNotifiedBtn.disabled = true;

          fetch('/api/waitlist/subscribe', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({
              email: email,
              productId: productId,
            }),
          })
            .then((response) => {
              waitlistEmail.value = '';
              getNotifiedBtn.textContent = 'Thank you!';

              setTimeout(() => {
                closeModalBtn.click();

                setTimeout(() => {
                  getNotifiedBtn.textContent = 'GET NOTIFIED';
                  getNotifiedBtn.disabled = false;
                }, 300);
              }, 1500);
            })
            .catch((error) => {
              console.error('Error submitting waitlist request:', error);
              getNotifiedBtn.textContent = 'Error. Try again';
              getNotifiedBtn.disabled = false;
            });
        }
        setTimeout(() => {
          button.textContent = 'Notify Me When In Stock';
        }, 2000);

        console.log('Notify requested for product ID:', productId);
      });
    });

    // Function to add product to cart
    function addToCart(variantId, quantity, productId) {
      // Create the item data
      const formData = {
        items: [
          {
            id: variantId,
            quantity: quantity,
          },
        ],
      };

      // Add loading state to relevant buttons
      const productCard = document
        .querySelector(`.product-card [data-product-id="${productId}"]`)
        .closest('.product-card');
      const addButton = productCard.querySelector('.add-to-cart-btn');
      addButton.textContent = 'Adding...';
      addButton.disabled = true;

      // Make the Ajax request to add to cart
      fetch('/cart/add.js', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(formData),
      })
        .then((response) => response.json())
        .then((data) => {
          // Update UI to show success
          addButton.textContent = 'Added!';

          // Reset after a delay
          setTimeout(() => {
            addButton.textContent = 'Add to Cart';
            addButton.disabled = false;
          }, 2000);

          // Optional: Update mini cart or show cart drawer
          // updateMiniCart();

          console.log('Added to cart:', data);
        })
        .catch((error) => {
          console.error('Error adding to cart:', error);
          addButton.textContent = 'Error';

          // Reset after a delay
          setTimeout(() => {
            addButton.textContent = 'Add to Cart';
            addButton.disabled = false;
          }, 2000);
        });
    }

    // Add animation reset when hiding size variants
    function resetSizeButtonAnimations(container) {
      const buttons = container.querySelectorAll('.size-option-btn');
      buttons.forEach(button => {
        button.style.animation = 'none';
        button.offsetHeight; // Trigger reflow
        button.style.animation = null;
      });
    }

    // Update product hover handler
    document.querySelectorAll('.product-cart-container').forEach(container => {
      const sizeContainer = container.querySelector('.size-variants-container');

      container.addEventListener('mouseenter', () => {
        if (sizeContainer) {
          sizeContainer.classList.add('active');
        }
      });

      container.addEventListener('mouseleave', () => {
        if (sizeContainer) {
          sizeContainer.classList.remove('active');
          resetSizeButtonAnimations(sizeContainer);
        }
      });
    });
  });
</script>

{% schema %}
{
  "name": "Featured Collection",
  "settings": [
    {
      "type": "collection",
      "id": "collection",
      "label": "Collection"
    },
    {
      "type": "text",
      "id": "heading",
      "label": "Heading",
      "default": "Featured Collection"
    },
    {
      "type": "textarea",
      "id": "description",
      "label": "Description",
      "default": "Discover the best products in our featured collection."
    },
    {
      "type": "text",
      "id": "button_text",
      "label": "Shop All Button Text",
      "default": "Shop All"
    }
  ],
  "blocks": [
    {
      "type": "filter_tag",
      "name": "Filter Button",
      "settings": [
        {
          "type": "text",
          "id": "label",
          "label": "Button Label",
          "default": "New Arrivals"
        },
        {
          "type": "text",
          "id": "tag",
          "label": "Product Tag (lowercase)",
          "default": "new"
        }
      ]
    }
  ],
  "presets": [
    {
      "name": "Featured Collection",
      "blocks": [
        {
          "type": "filter_tag",
          "settings": {
            "label": "All",
            "tag": "all"
          }
        },
        {
          "type": "filter_tag",
          "settings": {
            "label": "New Arrivals",
            "tag": "new"
          }
        },
        {
          "type": "filter_tag",
          "settings": {
            "label": "Sale",
            "tag": "sale"
          }
        }
      ]
    }
  ]
}
{% endschema %}
