{% comment %}
  Renders a product card

  Accepts:
  - card_product: {Object} Product Liquid object (optional)
  - media_aspect_ratio: {String} Size of the product image card. Values are "square" and "portrait". Default is "square" (optional)
  - image_shape: {String} Image mask to apply to the product image card. Values are "arch", "blob", "chevronleft", "chevronright", "diamond", "parallelogram", and "round". (optional)
  - show_secondary_image: {Boolean} Show the secondary image on hover. Default: false (optional)
  - show_vendor: {Boolean} Show the product vendor. Default: false
  - show_rating: {Boolean} Show the product rating. Default: false
  - extend_height: {Boolean} Card height extends to available container space. Default: true (optional)
  - lazy_load: {Boolean} Image should be lazy loaded. Default: true (optional)
  - skip_styles: {Boolean} Don't include component styles. Useful when rendering multiple product cards in a loop. Default: false (optional)
  - quick_add: {Boolean} Show the quick add button.
  - section_id: {String} The ID of the section that contains this card.
  - horizontal_class: {Boolean} Add a card--horizontal class if set to true. Default: false (optional)
  - horizontal_quick_add: {Boolean} Changes the quick add button styles when set to true. Default: false (optional)
  - placeholder_image: {String} The placeholder image to use when no product exists. Default: 'product-apparel-2' (optional)

  Usage:
  {% render 'card-product', show_vendor: section.settings.show_vendor %}
{% endcomment %}

<style>
  #product-grid {
    column-gap: 6px !important;
  }
  [x-cloak] {
    display: none !important;
  }
  .card-wrapper {
    margin-bottom: 40px;
    /* Remove transform-origin and transform for scaling */
  }
  .add-to-cart-btn {
    position: relative;
    z-index: 1000 !important;
    border-radius: 5px !important; /* Add border radius */
    cursor: pointer;
    font-size: 20px;
  }

  /* CSS hover effects to replace inline event handlers */
  .notify-when-available-btn:hover {
    background-color: var(--hovered_button_label) !important;
    color: var(--hovered_button_text_color) !important;
  }

  .add-to-cart-btn:not(.no-hover-css-product-card):hover {
    background-color: var(--hovered_button_label) !important;
    color: var(--hovered_button_text_color) !important;
  }
  .slider-arrow {
    background: transparent;
    transition: background 0.2s;
  }
  .slider-arrow:hover {
    background: #e5e5e5;
    box-shadow: 0 2px 8px rgba(68, 68, 68, 0.1);
  }
  .slider-arrow svg {
    display: block;
    margin: auto;
    color: var(--text);
    stroke-width: 1px;
  }
  .slider-arrow {
    width: 40px;
    height: 40px;
  }


  /* Product Card Border Radius */
  .card-wrapper {
    border-radius: {{ settings.product_card_border_radius }}px;
    overflow: hidden;
  }

  .card-wrapper .card__inner {
    border-radius: {{ settings.product_card_border_radius }}px;
    overflow: hidden;
  }

  .card-wrapper .card__media {
    border-radius: {{ settings.product_card_border_radius }}px;
    overflow: hidden;
  }

  .card-wrapper .card__media img {
    border-radius: {{ settings.product_card_border_radius }}px;
  }
</style>
{%- unless skip_styles -%}
  {{ 'component-rating.css' | asset_url | stylesheet_tag }}
  {{ 'component-volume-pricing.css' | asset_url | stylesheet_tag }}

  {{ 'quick-order-list.css' | asset_url | stylesheet_tag }}
  {{ 'quantity-popover.css' | asset_url | stylesheet_tag }}
{%- endunless -%}
{%- if card_product and card_product != empty -%}
  {%- liquid
    assign ratio = 1
    if card_product.featured_media and media_aspect_ratio == 'portrait'
      assign ratio = 0.8
    elsif card_product.featured_media and media_aspect_ratio == 'adapt'
      assign ratio = card_product.featured_media.aspect_ratio
    endif
    if ratio == 0 or ratio == null
      assign ratio = 1
    endif
  -%}
  <div class="card-wrapper product-card-wrapper group">
    <div class="block card-inner-wrapper w-full">
      <div
        class="relative w-full product-card-height transition-all duration-300 overflow-hidden"
        style="background-color: var(--background);"
      >
        {%- if card_product.featured_media -%}
          <div class="absolute card-inner-wrapper-product inset-0 w-full  overflow-hidden product-images-slider">
            {% for media in card_product.media %}
              <img
                srcset="
                  {%- if media.width >= 360 -%}{{ media | image_url: width: 360 }} 360w,{%- endif -%}
                  {%- if media.width >= 533 -%}{{ media | image_url: width: 533 }} 533w,{%- endif -%}
                  {%- if media.width >= 720 -%}{{ media | image_url: width: 720 }} 720w,{%- endif -%}
                  {%- if media.width >= 940 -%}{{ media | image_url: width: 940 }} 940w,{%- endif -%}
                  {%- if media.width >= 1066 -%}{{ media | image_url: width: 1066 }} 1066w,{%- endif -%}
                  {%- if media.width >= 1200 -%}{{ media | image_url: width: 1200 }} 1200w,{%- endif -%}
                  {%- if media.width >= 1500 -%}{{ media | image_url: width: 1500 }} 1500w,{%- endif -%}
                  {%- if media.width >= 1800 -%}{{ media | image_url: width: 1800 }} 1800w,{%- endif -%}
                  {{ media | image_url }} {{ media.width }}w
                "
                sizes="(max-width: 600px) 100vw, (max-width: 1200px) 50vw, 33vw"
                src="{{ media | image_url: width: 1200 }}"
                class="w-full h-full card-inner-wrapper-product p-0 absolute inset-0 opacity-0 image-config"
                {% if forloop.first %}
                  loading="eager"
                  fetchpriority="high"
                  style="opacity: 1;"
                {% else %}
                  loading="lazy"
                {% endif %}
                decode="async"
                width="{{ media.width }}"
                height="{{ media.height }}"
                alt="{{ card_product.title | escape }}"
                data-index="{{ forloop.index0 }}"
              >
            {% endfor %}
            <button
              aria-label="prev-btn"
              class="slider-arrow prev absolute left-0 top-1/2  -translate-y-1/2  cursor-pointer flex items-center justify-center z-[50] opacity-0 group-hover:opacity-100 transition-opacity duration-200"
            >
              <svg
                fill="none"
                width="30"
                height="30"
                viewBox="5 8 14 8"
                style="transform: rotate(90deg);"
              >
                <path d="M6 9L12 15L18 9" stroke="currentColor" stroke-width="1" stroke-linecap="round" stroke-linejoin="round"/>
              </svg>
            </button>
            <button
              aria-label="next-btn"
              class="slider-arrow next absolute right-0 top-1/2  -translate-y-1/2  cursor-pointer flex items-center justify-center z-[50] opacity-0 group-hover:opacity-100 transition-opacity duration-200"
            >
              <svg
                fill="none"
                width="30"
                height="30"
                viewBox="5 8 14 8"
                style="transform: rotate(-90deg);"
              >
                <path d="M6 9L12 15L18 9" stroke="currentColor" stroke-width="1" stroke-linecap="round" stroke-linejoin="round"/>
              </svg>
            </button>
          </div>
        {%- endif -%}

        {%- liquid
          assign is_best_seller = false
          if card_product.tags contains 'best-seller' or card_product.tags contains 'bestseller' or card_product.tags contains 'best seller'
            assign is_best_seller = true
          endif
        -%}

        <!-- Best Seller Badge - Always shows first if product is a best seller -->
        {% if is_best_seller %}
          <div class="absolute top-0 z-2 badge-best-seller">
            {% render 'best-seller-badge', class: 'best-seller-tag tracking-wide font-medium' %}
          </div>
        {% endif %}

        <!-- Status Badges - Sold Out or Low Stock -->
        {% if card_product.available == false %}
          <div class="absolute z-2 badge-status" style="top: {% if is_best_seller %}30px{% else %}0{% endif %};">
            {% render 'sold-out-badge', class: 'sold-out-tag tracking-wide font-medium' %}
          </div>
        {% elsif card_product.available
          and card_product.variants.first.inventory_quantity <= 5
          and card_product.variants.first.inventory_quantity > 0
        %}
          <div class="absolute z-2 badge-status" style="top: {% if is_best_seller %}30px{% else %}0{% endif %};">
            {% render 'low-stock-badge',
              quantity: card_product.variants.first.inventory_quantity,
              class: 'low-stock-tag tracking-wide font-medium'
            %}
          </div>
        {% endif %}

        {% if card_product.available == false %}
          <div class="rounded-[5px] absolute inset-x-0 bottom-0 p-4 opacity-0 translate-y-10 transition-all duration-300 group-hover:opacity-100 group-hover:-translate-y-0">
            <div class="w-[93%] rounded-[5px] mx-auto text-center" style="background-color: var(--background);">
              <button
                type="button"
                class="notify-when-available-btn w-full py-4  font-medium cursor-pointer transition-colors duration-200 uppercase tracking-wider"
                style="color:var(--button_label); background-color: var(--button);"
                data-product-id="{{ card_product.id }}"
                data-product-title="{{ card_product.title | escape }}"
              >
                <span class="notify-text">Notify Me When Available</span>
                <span class="notifying-text hidden">Submitting...</span>
                <span class="notified-text hidden">We'll Notify You!</span>
              </button>
            </div>
          </div>

          <!-- Notify Me Modal -->
          <div id="notify-modal-{{ card_product.id }}" class="notify-modal" style="display: none;">
            <div class="notify-modal-overlay"></div>
            <div class="notify-modal-content">
              <button class="notify-modal-close" aria-label="Close">&times;</button>
              <h3 class="notify-modal-title">Notify Me When Available</h3>
              <p class="notify-modal-description">
                Enter your email and we'll let you know when <strong>{{ card_product.title }}</strong> is back in stock.
              </p>

              <form
                class="notify-form"
                data-product-id="{{ card_product.id }}"
                data-product-title="{{ card_product.title | escape }}"
              >
                <div class="notify-form-group">
                  <label for="notify-email-{{ card_product.id }}" class="sr-only">Email Address</label>
                  <input
                    type="email"
                    id="notify-email-{{ card_product.id }}"
                    name="email"
                    placeholder="Your email address"
                    required
                    class="notify-email-input"
                    aria-required="true"
                  >
                </div>

                <!-- Error message container -->
                <div class="notify-error-message" role="alert" aria-live="assertive" style="display: none;"></div>

                <!-- Success message container -->
                <div class="notify-success-message" role="status" aria-live="polite" style="display: none;"></div>

                <button type="submit" class="notify-submit-btn">
                  <span class="notify-submit-text">Notify Me</span>
                  <span class="notify-submit-loading" style="display: none;">Sending...</span>
                </button>
              </form>
            </div>
          </div>
        {% else %}
          <div class="rounded-[5px] absolute inset-x-0 bottom-0 p-4 opacity-0 translate-y-10 transition-all duration-300 group-hover:opacity-100 group-hover:-translate-y-0">
            <div
              class="w-[93%] rounded-[5px] mx-auto text-center product-sizes-container"
              style="background-color: var(--background);"
            >
              {%- liquid
                assign has_size_variant = false
                for option in card_product.options_with_values
                  if option.name contains 'Size' or option.name contains 'size'
                    assign has_size_variant = true
                    break
                  endif
                endfor
              -%}

              <button
                type="button"
                class="add-to-cart-btn new-add-to-cart-btn {% if has_size_variant %}no-hover-css-product-card{% endif %} w-full py-4 z-[100] !text-[1.6rem] font-medium transition-colors duration-200 uppercase tracking-wider quick-add-button"
                style="color:var(--button_label); background-color: var(--button);"
                {% if has_size_variant %}
                  data-has-sizes="true"
                {% else %}
                  data-single-variant="{{ card_product.first_available_variant.id }}"
                {% endif %}
              >
                <span class="add-to-cart-text">{{ 'products.product.add_to_cart' | t }}</span>
                <span class="adding-to-cart-text hidden">Adding...</span>
                <span class="added-to-cart-text hidden">Added!</span>
              </button>

              {% if has_size_variant %}
                <div class="new-size-variants-container hidden">
                  <div class="new-size-label-wrapper">
                    <span class="new-size-label">Select Size</span>
                    <div class="new-size-options-wrapper" style="display: flex; gap: 5px;">
                      {% render 'size-variant-picker',
                        product: card_product,
                        mobile: false,
                        show_label: false,
                        size_only: true,
                        buttons_only: true
                      %}
                    </div>
                  </div>
                </div>
              {% endif %}

              <form
                method="post"
                action="{{ routes.cart_add_url }}"
                id="quick-add-{{ card_product.id }}"
                accept-charset="UTF-8"
                class="form quick-add__form"
              >
                <input
                  type="hidden"
                  name="id"
                  value="{{ card_product.selected_or_first_available_variant.id }}"
                  class="!text-black"
                >
                <input type="hidden" name="quantity" value="1">
              </form>
            </div>
          </div>
        {% endif %}
      </div>

      <div class="mt-3 space-y-1">
        <a href="{{ card_product.url }}" class="block hover:opacity-75 transition-opacity duration-200">
          <h3
            class="card-product-typegraphy product-card-text uppercase font-medium leading-tight"
            style="color: var(--text);"
          >
            {{ card_product.title | escape }}
          </h3>
          <div class="card-product-price-wrapper">
            {% render 'price',
              product: card_product,
              price_class: 'card-product-price',
              show_compare_at_price: true,
              font_size_desktop: 'var(--t-b-3-size)',
              font_size_mobile: 'var(--tm-b-3-size)',
              font_weight_desktop: 'var(--t-b-3-weight)',
              font_weight_mobile: 'var(--tm-b-3-weight)',
              line_height_desktop: 'var(--t-b-3-line-height)',
              line_height_mobile: 'var(--tm-b-3-line-height)'
            %}
          </div>
        </a>
      </div>
    </div>
  </div>
{%- else -%}
  {%- liquid
    assign ratio = 1
    assign placeholder = true
    if media_aspect_ratio == 'portrait'
      assign ratio = 0.8
    endif
  -%}
  <div class="card-wrapper product-card-wrapper underline-links-hover">
    <div
      class="
        card card--{{ settings.card_style }}
        {% if extend_height %} card--extend-height{% endif %}
        {% if image_shape and image_shape != 'default' %} card--shape{% endif %}
        {% if settings.card_style == 'card' %} color-{{ settings.card_color_scheme }} gradient{% endif %}
      "
      style="--ratio-percent: {{ 1 | divided_by: ratio | times: 100 }}%;"
    >
      <div
        class="card__inner{% if settings.card_style == 'standard' %} color-{{ settings.card_color_scheme }} gradient{% endif %} ratio"
      >
        <div
          class="card__media {% if image_shape and image_shape != 'default' %} shape--{{ image_shape }} color-{{ settings.card_color_scheme }} gradient{% endif %}"
        >
          <div
            class="media media--transparent"
          >
            {%- if placeholder_image -%}
              {{ placeholder_image | placeholder_svg_tag: 'placeholder-svg' }}
            {%- else -%}
              {{ 'product-apparel-2' | placeholder_svg_tag: 'placeholder-svg' }}
            {% endif %}
          </div>
        </div>
      </div>
      <div class="card__content">
        <div class="card__information">
          <h3 class="card__heading card__heading--placeholder{% if settings.card_style == 'standard' %} h5{% endif %}">
            <a role="link" aria-disabled="true" class="full-unstyled-link">
              {{ 'onboarding.product_title' | t }}
            </a>
          </h3>
          <div class="card-information">
            {%- if show_vendor -%}
              <span class="visually-hidden">{{ 'accessibility.vendor' | t }}</span>
              <div class="caption-with-letter-spacing light">{{ 'products.product.vendor' | t }}</div>
            {%- endif -%}
            {% render 'price', placeholder: placeholder, show_compare_at_price: true %}
          </div>
        </div>
      </div>
    </div>
  </div>
{%- endif -%}

<style>
  /* Badge positioning and styling */
  .sold-out-tag,
  .best-seller-tag,
  .low-stock-tag {
    position: absolute;
    top: 10px;
    left: 10px;
    z-index: 10;
    padding: 0px 6px;
    border-radius: var(--sold-out-badge-radius, 5px);
    font-size: var(--t-b-3-size);
    font-weight: var(--t-b-3-weight);
    line-height: var(--t-b-3-line-height);
    text-transform: uppercase;
    white-space: nowrap;
    letter-spacing: 0.5px;
    text-align: center;
    display: inline-block;
  }

  /* Sold Out Badge Styles */
  .sold-out-badge-filled.sold-out-tag {
    background-color: var(--sold-out-filled-bg, #000000);
    color: var(--sold-out-filled-text, #FFFFFF);
    border: none;
  }

  .sold-out-badge-transparent.sold-out-tag {
    background-color: transparent;
    color: var(--sold-out-transparent-text, #000000);
    border: var(--sold-out-badge-border-thickness, 1px) solid var(--sold-out-transparent-border, #000000);
  }

  /* Best Seller Badge Styles */
  .sold-out-badge-filled.best-seller-tag {
    background-color: var(--sold-out-filled-bg, #000000);
    color: var(--sold-out-filled-text, #FFFFFF);
    border: none;
  }

  .sold-out-badge-transparent.best-seller-tag {
    background-color: transparent;
    color: var(--sold-out-transparent-text, #000000);
    border: var(--sold-out-badge-border-thickness, 1px) solid var(--sold-out-transparent-border, #000000);
  }

  /* Low Stock Badge Styles */
  .sold-out-badge-filled.low-stock-tag {
    background-color: var(--sold-out-filled-bg, #000000);
    color: var(--sold-out-filled-text, #FFFFFF);
    border: none;
  }

  .sold-out-badge-transparent.low-stock-tag {
    background-color: transparent;
    color: var(--sold-out-transparent-text, #000000);
    border: var(--sold-out-badge-border-thickness, 1px) solid var(--sold-out-transparent-border, #000000);
  }
  .image-config {
    object-fit: cover;
  }
  .card-product-typegraphy {
    font-size: 14px !important;
  }
  /* Responsive fixed height for image container */
  .product-card-height {
    height: 500px;
    width: 100%;
    max-width: 100%;
    background: var(--background);
    position: relative;
    overflow: hidden;
  }
  @media screen and (min-width: 1500px) {
    .product-card-height {
      height: 380px !important;
    }
  }
  /* Badge stacking - when best seller badge is present */
  .badge-best-seller {
    left: 10px;
  }

  .badge-status {
    left: 10px;
  }

  @media only screen and (max-width: 768px) {
    /* Smaller badges for 2-column mobile layout */
    .mobile-columns-2 .sold-out-tag,
    .mobile-columns-2 .best-seller-tag,
    .mobile-columns-2 .low-stock-tag {
      font-size: 10px !important;
      line-height: 12px !important;
      padding: 0px 4px !important;
      border-radius: 3px !important;
    }

    /* Adjust stacking distance for 2-column layout */
    .mobile-columns-2 .badge-status[style*="30px"] {
      top: 22px !important;
    }

    /* Reduce spacing between image and title for 2-column layout */
    .mobile-columns-2 .mt-3 {
      margin-top: 0.5rem !important;
    }

    /* Reduce spacing between title and price for 2-column layout */
    .mobile-columns-2 .space-y-1 > * + * {
      margin-top: 0.125rem !important;
    }

    /* Reduce line-height on price div for 2-column layout */
    .mobile-columns-2 .leading-tight {
      line-height: 1 !important;
    }
  }

  @media only screen and (max-width: 600px) {

    .sold-out-tag,
    .best-seller-tag,
    .low-stock-tag {
      font-size: var(--tm-b-3-size) !important;
      line-height: var(--tm-b-3-line-height) !important;
    }

    /* Even smaller for 2-column mobile layout */
    .mobile-columns-2 .sold-out-tag,
    .mobile-columns-2 .best-seller-tag,
    .mobile-columns-2 .low-stock-tag {
      font-size: 9px !important;
      line-height: 11px !important;
      padding: 0px 3px !important;
      border-radius: 2px !important;
    }

    /* Tighter stacking on mobile 2-column */
    .mobile-columns-2 .badge-status[style*="30px"] {
      top: 18px !important;
    }

    /* Further reduce spacing for very small screens in 2-column */
    .mobile-columns-2 .mt-3 {
      margin-top: 0.375rem !important;
    }

    /* Even tighter spacing between title and price on small screens */
    .mobile-columns-2 .space-y-1 > * + * {
      margin-top: 0.0625rem !important;
    }

    /* Keep tight line-height on price for very small screens */
    .mobile-columns-2 .leading-tight {
      line-height: 0.5 !important;
    }

    .card-product-typegraphy {
      font-size: 12px !important;
    }
    .product-card-text {
      font-size: 12px;
    }

    /* Disable all hover effects on mobile except images */

    /* Keep images always visible on mobile */
    .group:hover .image-config {
      opacity: 1 !important;
    }

    /* Keep first image visible */
    .image-config[style*="opacity: 1"] {
      opacity: 1 !important;
    }

    /* Hide slider arrows on mobile hover */
    .group:hover .slider-arrow {
      opacity: 0 !important;
    }

    .group:hover .translate-y-10 {
      transform: translateY(2.5rem) !important;
    }

    /* Keep add to cart button hidden on mobile hover */
    .group:hover .group-hover\:opacity-100:not(.image-config) {
      opacity: 0 !important;
    }

    .group:hover .group-hover\:-translate-y-0 {
      transform: translateY(2.5rem) !important;
    }

  /* Disable slider arrow hover effects on mobile */
  .slider-arrow:hover {
    background: transparent !important;
    box-shadow: none !important;
  }

  /* Ensure images stay visible */
  .group:hover .image-config {
    opacity: 1 !important;
  }

  .group:hover .translate-y-10 {
    transform: translateY(2.5rem) !important;
  }

  .group:hover .group-hover\:opacity-100:not(.image-config) {
    opacity: 0 !important;
  }

  .group:hover .group-hover\:-translate-y-0 {
    transform: translateY(2.5rem) !important;
  }

  .slider-arrow:hover {
    background: transparent !important;
    box-shadow: none !important;
  }

  .new-size-variants-container .size-btn:hover {
    transform: none !important;
  }

  .new-add-to-cart-btn:hover,
  .new-sold-out-btn:hover {
    background-color: var(--button) !important;
    color: var(--button_label) !important;
  }

  .no-hover-css-product-card:hover {
    color: var(--button_label) !important;
    background-color: var(--button) !important;
  }

  .new-add-to-cart-btn:hover + .new-size-variants-container,
  .new-size-variants-container:hover {
    opacity: 0 !important;
    visibility: hidden !important;
  }
  }

  /* Additional mobile-only hover disabling using touch detection */
  @media (hover: none) and (pointer: coarse) {

    /* CRITICAL: Keep ONLY first image visible, hide all others */
    .image-config {
      opacity: 0 !important;
    }

    /* Show only the first image */
    .image-config[style*="opacity: 1"],
    .image-config:first-of-type {
      opacity: 1 !important;
    }

    /* Prevent hover from changing any image opacity */
    .group:hover .image-config,
    .card-wrapper:hover .image-config {
      opacity: 0 !important;
    }

    /* But keep first image visible even on hover */
    .group:hover .image-config[style*="opacity: 1"],
    .group:hover .image-config:first-of-type,
    .card-wrapper:hover .image-config[style*="opacity: 1"],
    .card-wrapper:hover .image-config:first-of-type {
      opacity: 1 !important;
    }

    /* Disable all image transforms */
    .group:hover .image-config,
    .card-wrapper:hover .image-config {
      transform: none !important;
      scale: 1 !important;
    }

    /* Hide all interactive elements on mobile */
    .slider-arrow,
    .group:hover .slider-arrow,
    .card-wrapper:hover .slider-arrow {
      display: none !important;
      opacity: 0 !important;
    }

    /* Disable all transform effects */
    .group:hover *:not(.image-config),
    .card-wrapper:hover *:not(.image-config) {
      transform: none !important;
    }

    /* Keep buttons hidden */
    .group:hover .group-hover\:opacity-100:not(.image-config),
    .card-wrapper:hover .opacity-0:not(.image-config) {
      opacity: 0 !important;
    }
  }

  /* Make images fill the card completely */
  .product-card-height img {
    width: 100%;
    height: 100%;
    /* Stretch image to fill container */
    position: absolute;
    top: 0;
    left: 0;
    background: transparent;
  }

  /* Only add transitions to non-first images */
  .product-card-height img:not([style*='opacity: 1']) {
    transition: opacity 0.3s;
  }

  /* Size variant picker container for card products - same size as add to cart button */
  .new-size-variants-container {
    border-radius: 5px;
    position: absolute;
    bottom: 10px;
    right: 21px;
    left: 26px;
    width: calc(100% - 52px);
    min-height: 50px;
    z-index: 10;
    transition: all 0.3s ease;
    display: flex;
    justify-content: center;
    padding: 5px 10px;
    font-size: 20px;
    color: var(--text);
    background-color: var(--background);
    opacity: 0;
    visibility: hidden;
    transform: translateY(10px);
  }

  .product-sizes-container.variant-selector-active .add-to-cart-btn {
    display: none !important;
  }

  .product-sizes-container {
    border-radius: 5px;
  }

  .new-size-label-wrapper {
    display: flex;
    flex-wrap: wrap;
    width: 100%;
    align-items: center;
    justify-content: space-between;
    gap: 5px;
    border-radius: {{ settings.buttons_radius }}px;
  }

  .new-size-label {
    margin-right: auto;
    border-radius: {{ settings.buttons_radius }}px;
    color: var(--text);

  }

  .new-size-options-wrapper {
    display: flex !important;
    flex-direction: row !important;
    flex-wrap: wrap !important;
    gap: 5px !important;
    align-items: center;
    justify-content: flex-start;
  }

  /* Hide the fieldset legend since we're using custom label */
  .new-size-variants-container fieldset {
    padding: 0 !important;
    border: none !important;
    margin: 0 !important;
  }

  .new-size-variants-container legend {
    display: none !important;
  }

  /* Style size buttons to match new-product-card */
  .new-size-variants-container .size-btn {

    transform: translateY(10px);
  }

  .new-size-variants-container .size-btn:hover {
    transform: translateY(-2px);

    transition: background-color 0.3s ease, color 0.3s ease, transform 0.3s ease;
  }

  /* Animation for size buttons */
  .new-size-variants-container .size-btn.size-animate {
    animation: sizeOptionAppear 0.5s ease forwards;
    animation-delay: calc(0.15s * var(--animation-order));
  }

  @keyframes sizeOptionAppear {
    0% {
      opacity: 0;
      transform: translateY(10px);
      visibility: hidden;
    }
    100% {
      opacity: 1;
      transform: translateY(0);
      visibility: visible;
    }
  }

  .new-size-variants-container:not(.active) .size-btn {
    animation: none;
    opacity: 0;
    visibility: hidden;
    transform: translateY(10px);
  }

  .new-size-variants-container.active .size-btn,
  .new-add-to-cart-btn:hover + .new-size-variants-container .size-btn {
    animation: sizeOptionAppear 0.5s ease forwards;
    animation-delay: calc(0.15s * var(--animation-order));
  }

  /* Make unavailable sizes also animate in */
  .new-size-variants-container.active .unavailable-size,
  .new-add-to-cart-btn:hover + .new-size-variants-container .unavailable-size {
    animation: sizeOptionAppear 0.5s ease forwards;
    animation-delay: calc(0.15s * var(--animation-order));
  }

  .new-size-variants-container.active .size-btn:nth-child(1),
  .new-add-to-cart-btn:hover + .new-size-variants-container .size-btn:nth-child(1) {
    animation-delay: 0s;
  }
  .new-size-variants-container.active .size-btn:nth-child(2),
  .new-add-to-cart-btn:hover + .new-size-variants-container .size-btn:nth-child(2) {
    animation-delay: 0.1s;
  }
  .new-size-variants-container.active .size-btn:nth-child(3),
  .new-add-to-cart-btn:hover + .new-size-variants-container .size-btn:nth-child(3) {
    animation-delay: 0.2s;
  }
  .new-size-variants-container.active .size-btn:nth-child(4),
  .new-add-to-cart-btn:hover + .new-size-variants-container .size-btn:nth-child(4) {
    animation-delay: 0.3s;
  }
  .new-size-variants-container.active .size-btn:nth-child(5),
  .new-add-to-cart-btn:hover + .new-size-variants-container .size-btn:nth-child(5) {
    animation-delay: 0.4s;
  }

  .new-add-to-cart-btn:hover + .new-size-variants-container,
  .new-size-variants-container:hover,
  .new-size-variants-container.active {
    opacity: 1 !important;
    visibility: visible !important;
    transform: translateY(0) !important;
    transition: opacity 0.3s ease, visibility 0.3s ease !important;
  }

  /* Remove transition when hiding - instant disappearance */
  .new-size-variants-container:not(.active):not(:hover) {
    transition: none !important;
  }

  /* Button hover states matching new-product-card */
  .new-add-to-cart-btn:hover,
  .new-sold-out-btn:hover {
    background-color: var(--text) !important;
    color: rgb(var(--color-background)) !important;
  }

  .no-hover-css-product-card:hover{
    color: var(--text) !important;
    background-color: rgb(var(--color-background)) !important;
  }

  /* Hide add to cart button when size variants are shown */
  .product-sizes-container:hover .new-add-to-cart-btn[data-has-sizes='true'],
  .product-sizes-container.variant-selector-active .new-add-to-cart-btn[data-has-sizes='true'] {
    opacity: 0 !important;
    visibility: hidden !important;
  }

  /* Show add to cart button instantly when size variants are hidden */
  .product-sizes-container:not(:hover):not(.variant-selector-active) .new-add-to-cart-btn[data-has-sizes='true'] {
    opacity: 1 !important;
    visibility: visible !important;
    transition: none !important;
  }
</style>

<style>
  .secondary-image-hover-wrapper {
    position: relative;
    width: 100%;
    height: 100%;
  }
  .secondary-image-hover-wrapper .primary-image,
  .secondary-image-hover-wrapper .secondary-image {
    pointer-events: none;
  }
  .notify-when-available-btn {
    border-radius: 5px !important;
    font-size: 20px;
  }

  .add-to-cart-text,
  .adding-to-cart-text,
  .added-to-cart-text {
    font-size: 20px !important;
  }
  .select-size-option {
    font-size: 14px !important;
  }

  /* Screen reader only class */
  .sr-only {
    position: absolute;
    width: 1px;
    height: 1px;
    padding: 0;
    margin: -1px;
    overflow: hidden;
    clip: rect(0, 0, 0, 0);
    white-space: nowrap;
    border-width: 0;
  }

  /* Notify Me Modal Styles */
  .notify-modal {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: 9999;
    display: flex;
    align-items: center;
    justify-content: center;
    animation: fadeIn 0.3s ease;
  }

  .notify-modal-overlay {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.6);
    backdrop-filter: blur(4px);
  }

  .notify-modal-content {
    position: relative;
    background: white;
    border-radius: 12px;
    padding: 32px;
    max-width: 500px;
    width: 90%;
    box-shadow: 0 20px 60px rgba(0, 0, 0, 0.3);
    animation: slideUp 0.3s ease;
    z-index: 10000;
  }

  .notify-modal-close {
    position: absolute;
    top: 16px;
    right: 16px;
    background: transparent;
    border: none;
    font-size: 28px;
    line-height: 1;
    cursor: pointer;
    color: #999;
    padding: 0;
    width: 32px;
    height: 32px;
    transition: color 0.2s;
  }

  .notify-modal-close:hover {
    color: #333;
  }

  .notify-modal-title {
    font-size: 24px;
    font-weight: 600;
    margin: 0 0 12px 0;
    color: #333;
  }

  .notify-modal-description {
    font-size: 15px;
    color: #666;
    margin: 0 0 24px 0;
    line-height: 1.5;
  }

  .notify-form-group {
    margin-bottom: 16px;
  }

  .notify-email-input {
    width: 100%;
    padding: 14px 16px;
    font-size: 15px;
    border: 1px solid #ddd;
    border-radius: 6px;
    transition: border-color 0.2s;
    font-family: inherit;
  }

  .notify-email-input:focus {
    outline: none;
    border-color: #333;
    box-shadow: 0 0 0 3px rgba(0, 0, 0, 0.05);
  }

  .notify-email-input.error {
    border-color: #d32f2f;
  }

  .notify-error-message {
    padding: 12px 16px;
    background: #ffebee;
    color: #d32f2f;
    border: 1px solid #ef5350;
    border-radius: 6px;
    font-size: 14px;
    margin-bottom: 16px;
    display: none;
  }

  .notify-error-message.show {
    display: block;
    animation: shake 0.4s;
  }

  .notify-success-message {
    padding: 12px 16px;
    background: #e8f5e9;
    color: #2e7d32;
    border: 1px solid #4caf50;
    border-radius: 6px;
    font-size: 14px;
    margin-bottom: 16px;
    display: none;
  }

  .notify-success-message.show {
    display: block;
  }

  .notify-submit-btn {
    width: 100%;
    padding: 14px 24px;
    background: #333;
    color: white;
    border: none;
    border-radius: 6px;
    font-size: 16px;
    font-weight: 600;
    cursor: pointer;
    transition: background 0.2s;
    text-transform: uppercase;
    letter-spacing: 0.5px;
  }

  .notify-submit-btn:hover:not(:disabled) {
    background: #000;
  }

  .notify-submit-btn:disabled {
    background: #999;
    cursor: not-allowed;
  }

  .notify-submit-loading {
    display: none;
  }

  .notify-submit-btn.loading .notify-submit-text {
    display: none;
  }

  .notify-submit-btn.loading .notify-submit-loading {
    display: inline;
  }

  /* Modal Animations */
  @keyframes fadeIn {
    from {
      opacity: 0;
    }
    to {
      opacity: 1;
    }
  }

  @keyframes slideUp {
    from {
      transform: translateY(30px);
      opacity: 0;
    }
    to {
      transform: translateY(0);
      opacity: 1;
    }
  }

  @keyframes shake {
    0%,
    100% {
      transform: translateX(0);
    }
    25% {
      transform: translateX(-10px);
    }
    75% {
      transform: translateX(10px);
    }
  }

  /* Modal Mobile Responsive */
  @media (max-width: 600px) {
    .notify-modal-content {
      padding: 24px;
      max-width: 95%;
    }

    .notify-modal-title {
      font-size: 20px;
    }

    .notify-modal-description {
      font-size: 14px;
    }
  }

  /* Card Product Price Styles */
  .card-product-price {
    color: var(--text);
    padding-top: 0;
    text-transform: uppercase;
  }

  .card-product-price .price__container {
    display: flex;
    align-items: center;
    gap: 8px;
  }

  .card-product-price .price__regular,
  .card-product-price .price__sale {
    display: flex;
    align-items: center;
    gap: 8px;
  }

  .card-product-price .price-item {
    font-size: var(--t-b-3-size);
    font-weight: var(--t-b-3-weight);
    line-height: var(--t-b-3-line-height);
    color: var(--sale_badge);
    text-transform: uppercase;
  }

  .card-product-price .price-item--regular {
    color: var(--text);
  }

  /* Sale price styling - swap order: sale price first, then strikethrough original */
  .card-product-price .price__sale {
    flex-direction: row-reverse;
  }

  .card-product-price .price__sale .price-item--sale {
    color: var(--sale_badge);
    order: 2;
  }

  .card-product-price .price__sale .price-item--regular {
    text-decoration: line-through;
    color: var(--text);
    order: 1;
  }

  .card-product-price .price-separator {
    color: var(--text);
    order: 1.5;
  }

  /* Hide regular price section when on sale */
  .card-product-price.price--on-sale .price__regular {
    display: none !important;
  }

  /* Show sale price section when on sale */
  .card-product-price.price--on-sale .price__sale {
    display: flex !important;
  }

  /* Hide sale price section when not on sale */
  .card-product-price:not(.price--on-sale) .price__sale {
    display: none !important;
  }

  /* Show regular price section when not on sale */
  .card-product-price:not(.price--on-sale) .price__regular {
    display: flex !important;
  }

  .card-product-price .visually-hidden {
    position: absolute !important;
    width: 1px !important;
    height: 1px !important;
    padding: 0 !important;
    margin: -1px !important;
    overflow: hidden !important;
    clip: rect(0, 0, 0, 0) !important;
    white-space: nowrap !important;
    border: 0 !important;
  }

  .card-product-price .unit-price {
    display: none;
  }

  .card-product-price .badge {
    display: none;
  }

  /* Mobile Responsive Styles for card-product-price */
  @media screen and (max-width: 749px) {
    .card-product-price .price-item {
      font-size: var(--tm-b-3-size);
      font-weight: var(--tm-b-3-weight);
      line-height: var(--tm-b-3-line-height);
    }
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', function () {
    const containers = document.querySelectorAll('.product-sizes-container');

    // Check if device is mobile or touch device
    function isMobile() {
      return window.innerWidth <= 600 || window.matchMedia('(hover: none)').matches || 'ontouchstart' in window;
    }

    function updateButtonState(button, state) {
      const addText = button.querySelector('.add-to-cart-text');
      const addingText = button.querySelector('.adding-to-cart-text');
      const addedText = button.querySelector('.added-to-cart-text');

      [addText, addingText, addedText].forEach((el) => el.classList.add('hidden'));

      switch (state) {
        case 'adding':
          addingText.classList.remove('hidden');
          button.disabled = true;
          break;
        case 'added':
          addedText.classList.remove('hidden');
          button.disabled = true;
          setTimeout(() => {
            addText.classList.remove('hidden');
            addedText.classList.add('hidden');
            button.disabled = false;
          }, 2000);
          break;
        default:
          addText.classList.remove('hidden');
          button.disabled = false;
      }
    }

    async function addToCart(formData) {
      try {
        const response = await fetch(window.routes.cart_add_url, {
          method: 'POST',
          body: formData,
        });
        if (!response.ok) throw new Error('Network response was not ok');
        return await response.json();
      } catch (error) {
        throw error;
      }
    }

    containers.forEach((container) => {
      const addToCartBtn = container.querySelector('.add-to-cart-btn');
      const sizeVariantsContainer = container.querySelector('.new-size-variants-container');
      const form = container.querySelector('.quick-add__form');
      const singleVariantId = addToCartBtn?.dataset.singleVariant;
      const hasSizes = addToCartBtn?.dataset.hasSizes === 'true';

      if (hasSizes && sizeVariantsContainer && form) {
        // For products with size variants - disable hover on mobile
        if (!isMobile()) {
          addToCartBtn.addEventListener('mouseenter', () => {
            container.classList.add('variant-selector-active');
            sizeVariantsContainer.classList.remove('hidden');
            // Add active class to trigger staggering animation
            sizeVariantsContainer.classList.add('active');
          });

          container.addEventListener('mouseleave', () => {
            // Remove active class and hide instantly - no delay
            sizeVariantsContainer.classList.remove('active');
            sizeVariantsContainer.classList.add('hidden');
            container.classList.remove('variant-selector-active');
          });
        }

        // Handle size button clicks
        sizeVariantsContainer.querySelectorAll('.size-btn').forEach((sizeBtn) => {
          sizeBtn.addEventListener('click', async () => {
            if (sizeBtn.disabled) return;

            updateButtonState(addToCartBtn, 'adding');
            const variantId = sizeBtn.dataset.variantId;
            const formData = new FormData(form);
            formData.set('id', variantId);

            try {
              await addToCart(formData);
              updateButtonState(addToCartBtn, 'added');
              sizeVariantsContainer.classList.add('hidden');
              container.classList.remove('variant-selector-active');
            } catch (error) {
              updateButtonState(addToCartBtn, 'default');
            }
          });
        });
      } else if (singleVariantId) {
        // For products without size variants
        addToCartBtn.addEventListener('click', async () => {
          updateButtonState(addToCartBtn, 'adding');
          const formData = new FormData();
          formData.append('id', singleVariantId);
          formData.append('quantity', '1');

          try {
            await addToCart(formData);
            updateButtonState(addToCartBtn, 'added');
          } catch (error) {
            updateButtonState(addToCartBtn, 'default');
          }
        });
      }
    });

    // Handle notify me when available buttons
    const notifyButtons = document.querySelectorAll('.notify-when-available-btn');

    function updateNotifyButtonState(button, state) {
      const notifyText = button.querySelector('.notify-text');
      const notifyingText = button.querySelector('.notifying-text');
      const notifiedText = button.querySelector('.notified-text');

      [notifyText, notifyingText, notifiedText].forEach((el) => el.classList.add('hidden'));

      switch (state) {
        case 'submitting':
          notifyingText.classList.remove('hidden');
          button.disabled = true;
          break;
        case 'submitted':
          notifiedText.classList.remove('hidden');
          button.disabled = true;
          setTimeout(() => {
            notifyText.classList.remove('hidden');
            notifiedText.classList.add('hidden');
            button.disabled = false;
          }, 3000);
          break;
        default:
          notifyText.classList.remove('hidden');
          button.disabled = false;
      }
    }

    async function submitNotifyRequest(productId, productTitle, email) {
      // This would typically send data to your backend
      // For now, we'll simulate an API call
      return new Promise((resolve) => {
        setTimeout(() => {
          resolve({ success: true });
        }, 1000);
      });
    }

    // Open modal when clicking notify button
    notifyButtons.forEach((button) => {
      button.addEventListener('click', () => {
        const productId = button.dataset.productId;
        const modal = document.getElementById(`notify-modal-${productId}`);

        if (modal) {
          modal.style.display = 'flex';
          const emailInput = modal.querySelector('.notify-email-input');
          if (emailInput) {
            emailInput.focus();
          }
        }
      });
    });

    // Handle modal close buttons
    document.querySelectorAll('.notify-modal-close').forEach((closeBtn) => {
      closeBtn.addEventListener('click', () => {
        const modal = closeBtn.closest('.notify-modal');
        if (modal) {
          modal.style.display = 'none';
          resetModalForm(modal);
        }
      });
    });

    // Close modal when clicking overlay
    document.querySelectorAll('.notify-modal-overlay').forEach((overlay) => {
      overlay.addEventListener('click', () => {
        const modal = overlay.closest('.notify-modal');
        if (modal) {
          modal.style.display = 'none';
          resetModalForm(modal);
        }
      });
    });

    // Close modal with Escape key
    document.addEventListener('keydown', (e) => {
      if (e.key === 'Escape') {
        const openModal = document.querySelector('.notify-modal[style*="display: flex"]');
        if (openModal) {
          openModal.style.display = 'none';
          resetModalForm(openModal);
        }
      }
    });

    // Handle form submissions
    document.querySelectorAll('.notify-form').forEach((form) => {
      form.addEventListener('submit', async (e) => {
        e.preventDefault();

        const emailInput = form.querySelector('.notify-email-input');
        const email = emailInput.value.trim();
        const submitBtn = form.querySelector('.notify-submit-btn');
        const errorMsg = form.querySelector('.notify-error-message');
        const successMsg = form.querySelector('.notify-success-message');

        // Hide previous messages
        errorMsg.classList.remove('show');
        successMsg.classList.remove('show');
        emailInput.classList.remove('error');

        // Validate email
        if (!email || !email.includes('@') || !email.includes('.')) {
          showError(form, 'Please enter a valid email address');
          emailInput.classList.add('error');
          emailInput.focus();
          return;
        }

        // Show loading state
        submitBtn.disabled = true;
        submitBtn.classList.add('loading');

        try {
          const productId = form.dataset.productId;
          const productTitle = form.dataset.productTitle;

          await submitNotifyRequest(productId, productTitle, email);

          // Show success message
          showSuccess(form, "Thanks! We'll notify you when this product is back in stock.");

          // Close modal after 2 seconds
          setTimeout(() => {
            const modal = form.closest('.notify-modal');
            if (modal) {
              modal.style.display = 'none';
              resetModalForm(modal);
            }
          }, 2000);
        } catch (error) {
          // Show error message
          showError(form, 'Sorry, there was an error. Please try again later.');
        } finally {
          // Reset button state
          submitBtn.disabled = false;
          submitBtn.classList.remove('loading');
        }
      });
    });

    // Helper function to show error message
    function showError(form, message) {
      const errorMsg = form.querySelector('.notify-error-message');
      if (errorMsg) {
        errorMsg.textContent = message;
        errorMsg.classList.add('show');
      }
    }

    // Helper function to show success message
    function showSuccess(form, message) {
      const successMsg = form.querySelector('.notify-success-message');
      if (successMsg) {
        successMsg.textContent = message;
        successMsg.classList.add('show');
      }
    }

    // Helper function to reset modal form
    function resetModalForm(modal) {
      const form = modal.querySelector('.notify-form');
      if (form) {
        form.reset();
        const errorMsg = form.querySelector('.notify-error-message');
        const successMsg = form.querySelector('.notify-success-message');
        const emailInput = form.querySelector('.notify-email-input');

        if (errorMsg) errorMsg.classList.remove('show');
        if (successMsg) successMsg.classList.remove('show');
        if (emailInput) emailInput.classList.remove('error');
      }
    }

    const sliders = document.querySelectorAll('.product-images-slider');

    sliders.forEach((slider) => {
      const images = slider.querySelectorAll('img');
      const prevBtn = slider.querySelector('.prev');
      const nextBtn = slider.querySelector('.next');
      let currentIndex = 0;

      if (!prevBtn || !nextBtn) return;

      function showImage(index) {
        images.forEach((img, i) => {
          img.style.opacity = i === index ? '1' : '0';
        });
      }

      // Hover functionality for exactly 2 images - disable on mobile
      if (images.length === 2 && !isMobile()) {
        slider.addEventListener('mouseenter', () => {
          currentIndex = 1;
          showImage(currentIndex);
        });
        slider.addEventListener('mouseleave', () => {
          currentIndex = 0;
          showImage(currentIndex);
        });
      }

      prevBtn.addEventListener('click', (e) => {
        e.preventDefault();
        currentIndex = (currentIndex - 1 + images.length) % images.length;
        showImage(currentIndex);
      });

      nextBtn.addEventListener('click', (e) => {
        e.preventDefault();
        currentIndex = (currentIndex + 1) % images.length;
        showImage(currentIndex);
      });
    });

    // Quick add functionality is now handled above in the main container loop
  });
</script>
