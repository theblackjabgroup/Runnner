{%- liquid
  assign currency_symbol = cart.currency.symbol | default: '$'
  assign from_label = 'products.facets.from' | t | default: 'From'
  assign to_label = 'products.facets.to' | t | default: 'To'
  assign reset_label = 'products.facets.clear_all' | t | default: 'Clear All'
-%}

<div class="price-facet-container {% if filter_type == 'mobile' %}mobile-price-facet{% endif %}">
  <div class="price-facet-header">
    <span class="price-reset" onclick="resetPriceFilters(event)">{{ reset_label }}</span>
  </div>

  <div class="price-facet-inputs">
    <div class="price-facet-row">
      <div class="field">
        <div class="price-input-wrapper">
          <span class="currency-symbol">{{ currency_symbol }}</span>
          <input
            class="field__input price-input"
            name="{{ filter.min_value.param_name }}"
            id="{{ id_prefix }}{{ filter.label | escape }}-GTE"
            {%- if filter.min_value.value -%}
              value="{{ filter.min_value.value | money_without_currency }}"
            {%- endif -%}
            type="text"
            inputmode="decimal"
            placeholder="{{ from_label }}"
            onkeydown="handlePriceKeydown(event)"
          >
        </div>
      </div>
    </div>

    <div class="price-facet-row">
      <div class="field">
        <div class="price-input-wrapper">
          <span class="currency-symbol">{{ currency_symbol }}</span>
          <input
            class="field__input price-input"
            name="{{ filter.max_value.param_name }}"
            id="{{ id_prefix }}{{ filter.label | escape }}-LTE"
            {%- if filter.max_value.value -%}
              value="{{ filter.max_value.value | money_without_currency }}"
            {%- endif -%}
            type="text"
            inputmode="decimal"
            placeholder="{{ to_label }}"
            onkeydown="handlePriceKeydown(event)"
          >
        </div>
      </div>
    </div>
  </div>
</div>

<style>
  .price-facet-container {
    background-color: transparent;
    border-radius: 6px;
    padding: 12px;
    width: 200px;
    position: relative;
  }

  .price-facet-header {
    display: flex;
    justify-content: flex-end;
    margin-bottom: 10px;
  }

  .price-reset {
    font-family: var(--font-body-family);
    font-style: var(--font-body-style);
    font-weight: var(--font-body-weight);
    font-size: var(--tm-b-3-size);
    line-height: var(--tm-b-3-line-height);
    color: var(--text);
    padding: 0 0 var(--space-md) 0;
    cursor: pointer;
    text-transform: uppercase;
  }

  .price-facet-inputs {
    display: flex;
    flex-direction: column;
    gap: 4px;
    margin-bottom: 8px;
  }

  .price-facet-row {
    display: flex;
    width: 100%;
  }

  .field {
    width: 100%;
    position: relative;
    margin-bottom: 10px;
    outline: none;
    border: none !important;
  }

  .price-input-wrapper {
    position: relative;
    display: flex;
    align-items: center;
    width: 100%;
  }

  .currency-symbol {
    position: absolute;
    left: 10px;
    z-index: 5;
    font-family: var(--font-body-family);
    font-style: var(--font-body-style);
    font-weight: var(--font-body-weight);
    font-size: var(--tm-b-3-size);
    line-height: var(--tm-b-3-line-height);
    color: #999;
    pointer-events: none;
    top: 50%;
    transform: translateY(-50%);
  }

  .price-input {
    width: 100%;
    height: 40px;
    padding: 8px 10px 8px 25px;
    border: 1px solid #e0e0e0 !important;
    border-radius: 4px;
    font-family: var(--font-body-family);
    font-size: var(--font-body-size);
    background-color: var(--background);
    color: var(--text);
    box-sizing: border-box;
    outline: none;
  }

  .price-input:focus {
    outline: none;
    border: 1px solid #999 !important;
  }

  .price-input::placeholder {
    color: #999;
    opacity: 1;
  }
</style>

<script>
  function resetPriceFilters(event) {
    event.preventDefault();

    console.log('Reset button clicked'); // Debug log

    // Find all price inputs in the current price facet container
    const container = event.target.closest('.price-facet-container');
    if (!container) {
      console.log('No container found'); // Debug log
      return;
    }

    // Clear min and max price inputs
    const minInput = container.querySelector('input[name*="GTE"]');
    const maxInput = container.querySelector('input[name*="LTE"]');

    console.log('Min input found:', minInput); // Debug log
    console.log('Max input found:', maxInput); // Debug log

    if (minInput) {
      console.log('Clearing min input, current value:', minInput.value); // Debug log
      minInput.value = '';
      minInput.setAttribute('value', '');
      minInput.dispatchEvent(new Event('input', { bubbles: true }));
      minInput.dispatchEvent(new Event('change', { bubbles: true }));
      console.log('Min input cleared, new value:', minInput.value); // Debug log
    }

    if (maxInput) {
      console.log('Clearing max input, current value:', maxInput.value); // Debug log
      maxInput.value = '';
      maxInput.setAttribute('value', '');
      maxInput.dispatchEvent(new Event('input', { bubbles: true }));
      maxInput.dispatchEvent(new Event('change', { bubbles: true }));
      console.log('Max input cleared, new value:', maxInput.value); // Debug log
    }

    // Submit the form to apply the reset
    const form = container.closest('form');
    if (form) {
      console.log('Submitting form'); // Debug log
      form.submit();
    } else {
      console.log('No form found'); // Debug log
    }
  }

  function handlePriceKeydown(event) {
    // Submit form when Enter key is pressed
    if (event.key === 'Enter') {
      event.preventDefault();
      const form = event.target.closest('form');
      if (form) {
        form.submit();
      }
    }
  }
</script>
