{% comment %}
  Renders facets (filtering and sorting)

  Accepts:
  - results: {Object} Collection or Search object
  - enable_filtering: {Boolean} Show filtering when true
  - enable_sorting: {Boolean} Show sorting when true
  - filter_type: {String} Type of filter
  - paginate: {Object}

  Usage:
  {% render 'facets', results: collection, enable_filtering: true, enable_sorting: true, filter_type: 'vertical', paginate: paginate %}
{% endcomment %}

{{ 'component-show-more.css' | asset_url | stylesheet_tag }}
{{ 'component-swatch-input.css' | asset_url | stylesheet_tag }}
{{ 'component-swatch.css' | asset_url | stylesheet_tag }}

{%- liquid
  assign sort_by = results.sort_by | default: results.default_sort_by
  assign total_active_values = 0
  assign default_presentation = 'text'
  if results.url
    assign results_url = results.url
  else
    assign terms = results.terms | escape
    assign results_url = '?q=' | append: terms | append: '&options%5Bprefix%5D=last&sort_by=' | append: sort_by
  endif
-%}

<div
  class="facets-container-bg facets-container  md:border-b h-[40px]   {% if filter_type == 'drawer' %} facets-container-drawer{% endif %}{% if settings.animations_reveal_on_scroll %} scroll-trigger animate--fade-in{% endif %} facets-container-height"
>
  {% if filter_type == 'horizontal' %}
    <div class="w-full md:!flex items-center hidden">
      <h1 class="uppercase !font-light !text-[1.6rem] facets-text-color">Shop</h1>
      <span class="mx-2 facets-text-color">/</span>
      <h1 class="!text-[1.6rem] !font-light uppercase facets-text-color">
        <span class="visually-hidden">{{ 'sections.collection_template.title' | t }}: </span>
        {%- if results.terms -%}
          Search Results
        {%- else -%}
          {{- collection.title | escape -}}
        {%- endif -%}
      </h1>
      {%- if results.terms and results.results_count -%}
        <span class="mx-2 facets-text-color !text-[1.6rem] !font-light">[{{ results.results_count }}]</span>
      {%- endif -%}
    </div>
  {% endif %}
  {%- if filter_type == 'vertical' or filter_type == 'horizontal' -%}
    <facet-filters-form class="facets small-hide">
      <form
        id="FacetFiltersForm"
        class="{% if filter_type == 'horizontal' %}facets__form flex !gap-8 !w-fit{% else %}facets__form-vertical{% endif %}"
      >
        {%- if results.terms -%}
          <input type="hidden" name="q" value="{{ results.terms | escape }}">
          <input name="options[prefix]" type="hidden" value="last">
        {%- endif -%}

        {% if enable_filtering %}
          {% comment %} Heading is the first tabbable element on filter type horizontal {% endcomment %}
          <div
            id="FacetsWrapperDesktop"
            {% if filter_type == 'horizontal' %}
              class="facets__wrapper"
            {% endif %}
          >
            {% comment %} Pills are right below the title for filter type vertical {% endcomment %}
            {%- if filter_type == 'vertical' -%}
              <div class="active-facets active-facets-desktop">
                <div class="active-facets-vertical-filter">
                  {%- unless results.filters == empty -%}
                    <h2
                      class="facets__heading facets__heading--vertical caption-large text-body"
                      id="verticalTitle"
                      tabindex="-1"
                    >
                      {{ 'products.facets.filter_by_label' | t | default: 'Filter by' }}
                    </h2>
                  {%- endunless -%}
                  <facet-remove class="active-facets__button-wrapper">
                    <a href="{{ results_url }}" class="active-facets__button-remove underlined-link">
                      <span>{{ 'products.facets.clear_all' | t | default: 'Clear all' }}</span>
                    </a>
                  </facet-remove>
                </div>
                {%- for filter in results.filters -%}
                  {%- for value in filter.active_values -%}
                    <facet-remove>
                      <a href="{{ value.url_to_remove }}" class="active-facets__button active-facets__button--light">
                        <span class="active-facets__button-inner button button--tertiary">
                          {{ filter.label | escape }}: {{ value.label | escape }}
                          <span class="svg-wrapper">
                            {{- 'icon-close-small.svg' | inline_asset_content -}}
                          </span>
                          <span class="visually-hidden">
                            {{- 'products.facets.clear_filter' | t | default: 'Clear filter' -}}
                          </span>
                        </span>
                      </a>
                    </facet-remove>
                  {%- endfor -%}
                  {% if filter.type == 'price_range' %}
                    {% assign min = filter.min_value.value %}
                    {% assign max = filter.max_value.value %}
                    {%- if min != null or max != null -%}
                      <facet-remove>
                        <a href="{{ filter.url_to_remove }}" class="active-facets__button active-facets__button--light">
                          <span class="active-facets__button-inner button button--tertiary">
                            {{ min | default: 0 | money }} - {{ max | default: filter.range_max | money }}
                            <span class="svg-wrapper">
                              {{- 'icon-close-small.svg' | inline_asset_content -}}
                            </span>
                            <span class="visually-hidden">
                              {{- 'products.facets.clear_filter' | t | default: 'Clear filter' -}}
                            </span>
                          </span>
                        </a>
                      </facet-remove>
                    {%- endif -%}
                  {% endif %}
                {%- endfor -%}
              </div>
            {%- endif -%}

            <script src="{{ 'show-more.js' | asset_url }}" defer="defer"></script>
            {% comment %} Filters for both horizontal and vertical filter {% endcomment %}
            {%- for filter in results.filters -%}
              {% liquid
                assign total_active_values = total_active_values | plus: filter.active_values.size
                assign presentation = filter.presentation | default: default_presentation

                if presentation == 'image'
                  assign show_more_number = 12
                  assign visual_layout_class = 'facets-layout facets-layout-grid facets-layout-grid--' | append: presentation
                else
                  assign show_more_number = 10
                  assign visual_layout_class = 'facets-layout facets-layout-list facets-layout-list--' | append: presentation
                endif
              %}

              {% case filter.type %}
                {% when 'boolean', 'list' %}
                  <details
                    id="Details-{{ filter.param_name | escape }}-{{ section.id }}"
                    class="{% if filter_type == 'horizontal' %}!m-0 disclosure-has-popup facets__disclosure{% else %} facets__disclosure-vertical{% endif %} js-filter"
                    data-index="{{ forloop.index }}"
                    {% if filter_type == 'vertical' and forloop.index == 1 %}
                      open
                    {% endif %}
                  >
                    <summary
                      class="facets__summary caption-large focus-offset !p-0"
                      aria-label="{{ filter.label | escape }} ({{ 'products.facets.filters_selected.one' | t: count: filter.active_values.size | default: 'selected' }})"
                    >
                      <div class="flex items-center">
                        <h1
                          class="facets__summary-label uppercase !text-[16px] !font-[500] facets-text-color"
                        >
                          {{- filter.label | escape }}
                          {%- if filter_type == 'vertical' -%}
                            <span class="facets__selected{% if filter.active_values.size == 0 %} hidden{% endif %}">
                              ({{ filter.active_values.size }})</span
                            >
                          {%- endif -%}
                        </h1>
                        {%- if filter_type == 'vertical' and filter.operator == 'AND' -%}
                          <span class="facets__and-helptext">
                            {{ 'products.facets.filter_and_operator_subtitle' | t | default: 'All selected' }}
                          </span>
                        {%- endif -%}
                        {% if facet_custom_icon_collapsed %}
                          <span class="custom-facet-icon" aria-hidden="true" data-icon-type="custom">
                            <img
                              src="{{ facet_custom_icon_collapsed | image_url: width: 48 }}"
                              alt=""
                              width="48"
                              height="48"
                              class="custom-icon-collapsed"
                              style="width: var(--size); height: var(--size); display: block;"
                            >
                            {% if facet_custom_icon_expanded %}
                              <img
                                src="{{ facet_custom_icon_expanded | image_url: width: 48 }}"
                                alt=""
                                width="48"
                                height="48"
                                class="custom-icon-expanded"
                                style="width: var(--size); height: var(--size); display: none;"
                              >
                            {% endif %}
                          </span>
                        {% else %}
                          <span class="pmorph__icon" aria-hidden="true"></span>
                        {% endif %}
                      </div>
                    </summary>
                    <div
                      id="Facet-{{ forloop.index }}-{{ section.id }}"
                      class="parent-display -translate-y-[15px] {% if filter_type == 'horizontal' %} !w-auto !rounded-lg facets__display{% else %}facets__display-vertical{% endif %} facets-display-transform"
                    >
                      {%- if filter_type != 'vertical' -%}
                      {%- endif -%}
                      <fieldset class="facets-wrap parent-wrap {% if filter_type == 'vertical' %} facets-wrap-vertical{% endif %}">
                        <legend class="visually-hidden">{{ filter.label | escape }}</legend>
                        {%- liquid
                          assign sorted_values = filter.values
                          # Keep the selected values grouped together when operator is AND
                          if filter.operator == 'AND'
                            assign active_filter_values = filter.values | where: 'active', true
                            assign inactive_filter_values = filter.values | where: 'active', false
                            assign sorted_values = active_filter_values | concat: inactive_filter_values
                          endif
                        -%}
                        <ul
                          class=" !py-2 !m-0  {{ visual_layout_class }}{% if filter_type == 'vertical' %} {% else %} {% endif %} list-unstyled"
                          role="list"
                        >
                          {%- for value in sorted_values -%}
                            {% liquid
                              assign input_id = 'Filter-' | append: filter.param_name | escape | append: '-' | append: forloop.index
                              assign is_disabled = false
                              if value.count == 0 and value.active == false
                                assign is_disabled = true
                              endif
                            %}

                            {%- capture label_class -%}
                             items-center facet-checkbox hover:bg-gray-200 !px-4{% if is_disabled %} disabled{% endif %}{% if value.active %} active{% endif %}
                            {%- endcapture -%}

                            {%- capture text_value -%}
                              <span class="" aria-hidden="true">
                                <span class="text-[16px] text-nowrap facets-text-color">{{- value.label | escape }}</span>
                              </span>
                              <span class="visually-hidden">
                                {{- value.label | escape }}
                              </span>
                            {%- endcapture -%}

                            <li class="list-menu__item facets__item {% if forloop.index > show_more_number and filter_type == 'vertical' %} show-more-item hidden{% endif %}">
                              {%- if presentation == 'swatch' -%}
                                <div class="{{ label_class }}  !p-0 uppercase !text-[16px] !active:underline-none">
                                  <div class="swatch-input-wrapper">
                                    {% render 'swatch-input',
                                      id: input_id,
                                      type: 'checkbox',
                                      name: value.param_name,
                                      value: value.value,
                                      product_form_id: 'FacetFiltersForm',
                                      swatch: value.swatch,
                                      checked: value.active,
                                      disabled: is_disabled
                                    %}
                                  </div>
                                </div>
                              {%- else -%}
                                <label for="{{ input_id }}" class="{{ label_class }}  !p-0 uppercase text-[16px] ">
                                  <input
                                    type="checkbox"
                                    name="{{ value.param_name }}"
                                    value="{{ value.value }}"
                                    id="{{ input_id }}"
                                    {% if value.active %}
                                      checked
                                    {% endif %}
                                    {% if is_disabled %}
                                      disabled
                                    {% endif %}
                                  >

                                  {%- if presentation == 'image' -%}
                                    <div class="facets__image-wrapper">
                                      {%- if value.image -%}
                                        {{
                                          value.image
                                          | image_url: width: 300
                                          | image_tag: class: 'facets__image', alt: value.alt
                                        }}
                                      {%- endif -%}
                                    </div>
                                  {%- else -%}
                                    {{- 'square.svg' | inline_asset_content -}}

                                    <div
                                      class="svg-wrapper translate-y-[5px] facets-svg-transform"
                                    >
                                      {{- 'icon-checkmark.svg' | inline_asset_content -}}
                                    </div>
                                  {%- endif -%}

                                  {{ text_value }}
                                </label>
                              {%- endif -%}
                            </li>
                          {%- endfor -%}
                        </ul>
                      </fieldset>
                      {%- if filter.values.size > show_more_number and filter_type == 'vertical' -%}
                        <show-more-button>
                          <button
                            class="button-show-more link underlined-link"
                            id="Show-More-{{ forloop.index }}-{{ section.id }}"
                            type="button"
                          >
                            <span class="label-show-more label-text"
                              ><span aria-hidden="true">+ </span>
                              {{- 'products.facets.show_more' | t | default: 'Show more' -}}
                            </span>
                            <span class="label-show-less label-text hidden"
                              ><span aria-hidden="true">- </span>
                              {{- 'products.facets.show_less' | t | default: 'Show less' -}}
                            </span>
                          </button>
                        </show-more-button>
                      {%- endif %}
                    </div>
                  </details>
                {% when 'price_range' %}
                  <details
                    id="Details-{{ filter.param_name | escape }}-{{ section.id }}"
                    class="{% if filter_type == 'horizontal' %}!m-0 disclosure-has-popup facets__disclosure{% else %} facets__disclosure-vertical{% endif %} js-filter"
                    data-index="{{ forloop.index }}"
                    {% if filter_type == 'vertical' and forloop.index == 1 %}
                      open
                    {% endif %}
                  >
                    <summary
                      class="facets__summary caption-large focus-offset"
                      data-facet-summary="price"
                    >
                      <div class="flex items-center">
                        <h1
                          class="facets__summary-label uppercase !text-[16px] !font-[500] facets-text-color"
                        >
                          {{- filter.label | escape -}}
                        </h1>
                        {% if facet_custom_icon_collapsed %}
                          <span class="custom-facet-icon" aria-hidden="true" data-icon-type="custom">
                            <img
                              src="{{ facet_custom_icon_collapsed | image_url: width: 48 }}"
                              alt=""
                              width="48"
                              height="48"
                              class="custom-icon-collapsed"
                              style="width: var(--size); height: var(--size); display: block;"
                            >
                            {% if facet_custom_icon_expanded %}
                              <img
                                src="{{ facet_custom_icon_expanded | image_url: width: 48 }}"
                                alt=""
                                width="48"
                                height="48"
                                class="custom-icon-expanded"
                                style="width: var(--size); height: var(--size); display: none;"
                              >
                            {% endif %}
                          </span>
                        {% else %}
                          <span class="pmorph__icon" aria-hidden="true"></span>
                        {% endif %}
                      </div>
                    </summary>
                    <div
                      id="Facet-{{ forloop.index }}-{{ section.id }}"
                      class="{% if filter_type == 'horizontal' %}-translate-y-[15px] !rounded-lg facets__display {% else %}facets__display-vertical{% endif %} facets-display-transform"
                    >
                      <price-range class="price-range-wrapper">
                        {% render 'price-facet', filter: filter, id_prefix: 'Filter-', filter_type: filter_type %}
                      </price-range>
                    </div>
                  </details>
              {% endcase %}
            {%- endfor -%}
          </div>
        {% endif %}

        {% if results.current_vendor or results.current_type %}
          <input type="hidden" name="q" value="{{ results.current_vendor }}{{ results.current_type }}">
        {% endif %}

        {%- if filter_type == 'horizontal' -%}
          {% comment %} Sorting and product count are the last elements when filter type is horizontal {% endcomment %}
          {%- if enable_sorting -%}
            <div class="facets-container sorting caption small-hide">
              <details
                id="Details-SortBy-{{ section.id }}"
                class="disclosure-has-popup facets__disclosure js-filter !m-0"
              >
                <summary
                  class="facets__summary caption-large focus-offset -translate-y-[10px] !p-0"
                  data-facet-summary="sort"
                >
                  <div class="flex items-center">
                    <h1 class="uppercase !text-[16px]  !font-[500] facets-text-color">Sort By</h1>
                    {% if facet_custom_icon_collapsed %}
                      <span class="custom-facet-icon" aria-hidden="true" data-icon-type="custom">
                        <img
                          src="{{ facet_custom_icon_collapsed | image_url: width: 48 }}"
                          alt=""
                          width="48"
                          height="48"
                          class="custom-icon-collapsed"
                          style="width: var(--size); height: var(--size); display: block;"
                        >
                        {% if facet_custom_icon_expanded %}
                          <img
                            src="{{ facet_custom_icon_expanded | image_url: width: 48 }}"
                            alt=""
                            width="48"
                            height="48"
                            class="custom-icon-expanded"
                            style="width: var(--size); height: var(--size); display: none;"
                          >
                        {% endif %}
                      </span>
                    {% else %}
                      <span class="pmorph__icon" aria-hidden="true"></span>
                    {% endif %}
                  </div>
                </summary>
                <div
                  id="Facet-Sort-{{ section.id }}"
                  class="absolute right-0 top-[20px] !w-auto !rounded-lg border-[1px] facets-sort-dropdown"
                >
                  <fieldset class="facets-wrap parent-wrap">
                    <ul class="!py-2 !m-0 facets-layout facets-layout-list list-unstyled" role="list">
                      {%- for option in results.sort_options -%}
                        <li class="list-menu__item facets__item">
                          <label
                            for="Sort-{{ option.value | escape }}"
                            class="items-center facet-checkbox hover:bg-gray-200 !px-4 !p-0 uppercase text-[16px]"
                          >
                            <input
                              type="checkbox"
                              name="sort_by"
                              value="{{ option.value | escape }}"
                              id="Sort-{{ option.value | escape }}"
                              {% if option.value == sort_by %}
                                checked
                              {% endif %}
                              class="facets-hidden-input sort-by-checkbox"
                            >
                            {{- 'square.svg' | inline_asset_content -}}
                            <div class="svg-wrapper translate-y-[5px] facets-svg-transform">
                              {{- 'icon-checkmark.svg' | inline_asset_content -}}
                            </div>
                            <span class="" aria-hidden="true">
                              <span
                                class="text-[16px] text-nowrap facets-text-color"
                              >
                                {{- option.name | escape -}}
                              </span>
                            </span>
                            <span class="visually-hidden">
                              {{- option.name | escape }}
                            </span>
                          </label>
                        </li>
                      {%- endfor -%}
                    </ul>
                  </fieldset>
                </div>
              </details>
            </div>
          {%- endif -%}
        {%- endif -%}
      </form>
    </facet-filters-form>
  {%- endif -%}
  {% comment %} New Mobile Filter Drawer {% endcomment %}
  <!-- Mobile Filter Overlay -->
  <div
    id="mobile-filter-overlay"
    class="mobile-filter-overlay{% if filter_type == 'horizontal' or filter_type == 'vertical' %} medium-hide large-up-hide{% endif %}"
  >
    <div class="mobile-filter-drawer">
      <div class="mobile-filter-header">
        <h2 class="!text-[30px] uppercase facets-mobile-header">FILTERS</h2>
        <div class="mobile-filter-apply">
          <button type="button" class="mobile-filter-close facets-mobile-close">Close</button>
        </div>
      </div>

      <facet-filters-form>
        <form id="FacetFiltersFormMobile" class="mobile-filter-form">
          {%- if results.terms -%}
            <input type="hidden" name="q" value="{{ results.terms | escape }}">
            <input name="options[prefix]" type="hidden" value="last">
          {%- endif -%}

          <div class="mobile-filter-content">
            {%- if enable_filtering -%}
              {%- for filter in results.filters -%}
                {% liquid
                  assign presentation = filter.presentation | default: default_presentation
                  if presentation == 'image'
                    assign visual_layout_class = 'facets-layout facets-layout-grid facets-layout-grid--' | append: presentation
                  else
                    assign visual_layout_class = 'facets-layout facets-layout-list facets-layout-list--' | append: presentation
                  endif
                %}

                {% case filter.type %}
                  {% when 'boolean', 'list' %}
                    <details class="mobile-filter-section">
                      <summary class="mobile-filter-summary">
                        <span class="uppercase text-lg font-medium facets-mobile-summary">
                          {{- filter.label | escape -}}
                        </span>
                        <span class="pmorph__icon mobile-pmorph__icon" aria-hidden="true"></span>
                      </summary>

                      <div class="mobile-filter-options">
                        {%- liquid
                          assign sorted_values = filter.values
                          if filter.operator == 'AND'
                            assign active_filter_values = filter.values | where: 'active', true
                            assign inactive_filter_values = filter.values | where: 'active', false
                            assign sorted_values = active_filter_values | concat: inactive_filter_values
                          endif
                        -%}

                        {%- for value in sorted_values -%}
                          {% liquid
                            assign input_id = 'Filter-' | append: filter.param_name | escape | append: '-mobile-' | append: forloop.index
                            assign is_disabled = false
                            if value.count == 0 and value.active == false
                              assign is_disabled = true
                            endif
                          %}

                          <label class="mobile-filter-option {% if value.active %}active{% endif %}{% if is_disabled %} disabled{% endif %}">
                            <input
                              type="checkbox"
                              name="{{ value.param_name }}"
                              value="{{ value.value }}"
                              id="{{ input_id }}"
                              {% if value.active %}
                                checked
                              {% endif %}
                              {% if is_disabled %}
                                disabled
                              {% endif %}
                            >
                            <span class="mobile-filter-checkbox"></span>
                            <span class="mobile-filter-label">{{ value.label | escape }}</span>
                          </label>
                        {%- endfor -%}
                      </div>
                    </details>
                  {% when 'price_range' %}
                    <details class="mobile-filter-section">
                      <summary class="mobile-filter-summary">
                        <span class="uppercase text-lg font-medium facets-mobile-summary">
                          {{- filter.label | escape -}}
                        </span>
                        <span class="pmorph__icon mobile-pmorph__icon" aria-hidden="true"></span>
                      </summary>

                      <div class="mobile-filter-options">
                        <price-range class="mobile-price-range">
                          {% render 'price-facet',
                            filter: filter,
                            id_prefix: 'Filter-Mobile-',
                            filter_type: filter_type
                          %}
                        </price-range>
                      </div>
                    </details>
                {% endcase %}
              {%- endfor -%}
            {%- endif -%}
          </div>

          <!-- Active Filters Tags Section (Mobile) - Above Footer -->
          <div class="active-filters-tags-container-mobile">
            <div class="active-filters-tags-wrapper">
              <div class="active-filters-tags">
                {%- for filter in results.filters -%}
                  {%- for value in filter.active_values -%}
                    <div class="active-filter-tag">
                      <span class="active-filter-tag-text">{{ value.label | escape }}</span>
                      <button
                        class="active-filter-tag-remove mobile-tag-remove"
                        data-filter-param="{{ filter.param_name }}"
                        data-filter-value="{{ value.value }}"
                      >
                        <span class="svg-wrapper">
                          {{- 'icon-close-small.svg' | inline_asset_content -}}
                        </span>
                      </button>
                    </div>
                  {%- endfor -%}
                  {% if filter.type == 'price_range' %}
                    {% assign min = filter.min_value.value %}
                    {% assign max = filter.max_value.value %}
                    {%- if min != null or max != null -%}
                      <div class="active-filter-tag">
                        <span class="active-filter-tag-text">
                          {{- min | default: 0 | money }} - {{ max | default: filter.range_max | money -}}
                        </span>
                        <button
                          class="active-filter-tag-remove mobile-tag-remove"
                          data-filter-param="{{ filter.param_name }}"
                        >
                          <span class="svg-wrapper">
                            {{- 'icon-close-small.svg' | inline_asset_content -}}
                          </span>
                        </button>
                      </div>
                    {%- endif -%}
                  {% endif %}
                {%- endfor -%}

                <!-- Sort by tag - Hide default sort (relevance for search) -->
                {%- if results.sort_by and results.sort_by != results.default_sort_by -%}
                  {%- for option in results.sort_options -%}
                    {%- if option.value == results.sort_by -%}
                      <div class="active-filter-tag">
                        <span class="active-filter-tag-text">{{ option.name | escape }}</span>
                        <button class="active-filter-tag-remove mobile-tag-remove" data-sort-remove="true">
                          <span class="svg-wrapper">
                            {{- 'icon-close-small.svg' | inline_asset_content -}}
                          </span>
                        </button>
                      </div>
                    {%- endif -%}
                  {%- endfor -%}
                {%- endif -%}
              </div>

              {%- assign has_active_filters = false -%}
              {%- for filter in results.filters -%}
                {%- if filter.active_values.size > 0 -%}
                  {%- assign has_active_filters = true -%}
                  {%- break -%}
                {%- endif -%}
                {%- if filter.type == 'price_range' -%}
                  {%- assign min = filter.min_value.value -%}
                  {%- assign max = filter.max_value.value -%}
                  {%- if min != null or max != null -%}
                    {%- assign has_active_filters = true -%}
                    {%- break -%}
                  {%- endif -%}
                {%- endif -%}
              {%- endfor -%}

              {%- if has_active_filters or results.sort_by -%}
                <button class="clear-all-filters-btn mobile-clear-all" data-action="clear-all-mobile">CLEAR ALL</button>
              {%- endif -%}
            </div>
          </div>

          <div class="mobile-filter-footer">
            <button type="button" class="mobile-apply-btn">CLOSE</button>
          </div>
        </form>
      </facet-filters-form>
    </div>
  </div>

  <div class="active-facets active-facets-mobile medium-hide large-up-hide">
    {%- for filter in results.filters -%}
      {%- for value in filter.active_values -%}
        <facet-remove>
          <a href="{{ value.url_to_remove }}" class="active-facets__button active-facets__button--light">
            <span class="active-facets__button-inner button button--tertiary">
              {{ filter.label | escape }}: {{ value.label | escape }}
              <span class="svg-wrapper">
                {{- 'icon-close-small.svg' | inline_asset_content -}}
              </span>
              <span class="visually-hidden">{{ 'products.facets.clear_filter' | t }}</span>
            </span>
          </a>
        </facet-remove>
      {%- endfor -%}

      {%- if filter.type == 'price_range' -%}
        {% assign min = filter.min_value.value %}
        {% assign max = filter.max_value.value %}
        {%- if min != null or max != null -%}
          <facet-remove>
            <a href="{{ filter.url_to_remove }}" class="active-facets__button active-facets__button--light">
              <span class="active-facets__button-inner button button--tertiary">
                {{ min | default: 0 | money }} - {{ max | default: filter.range_max | money }}
                <span class="svg-wrapper">
                  {{- 'icon-close-small.svg' | inline_asset_content -}}
                </span>
              </span>
            </a>
          </facet-remove>
        {%- endif -%}
      {%- endif -%}
    {%- endfor -%}
  </div>
</div>

<!-- Active Filters Tags Section -->
<div class="active-filters-tags-container">
  <div class="active-filters-tags-wrapper">
    <div class="active-filters-tags">
      {%- for filter in results.filters -%}
        {%- for value in filter.active_values -%}
          <div class="active-filter-tag">
            <span class="active-filter-tag-text">{{ value.label | escape }}</span>
            <button
              class="active-filter-tag-remove"
              data-filter-param="{{ filter.param_name }}"
              data-filter-value="{{ value.value }}"
            >
              <span class="svg-wrapper">
                {{- 'icon-close-small.svg' | inline_asset_content -}}
              </span>
            </button>
          </div>
        {%- endfor -%}
        {% if filter.type == 'price_range' %}
          {% assign min = filter.min_value.value %}
          {% assign max = filter.max_value.value %}
          {%- if min != null or max != null -%}
            <div class="active-filter-tag">
              <span class="active-filter-tag-text">
                {{- min | default: 0 | money }} - {{ max | default: filter.range_max | money -}}
              </span>
              <button class="active-filter-tag-remove" data-filter-param="{{ filter.param_name }}">
                <span class="svg-wrapper">
                  {{- 'icon-close-small.svg' | inline_asset_content -}}
                </span>
              </button>
            </div>
          {%- endif -%}
        {% endif %}
      {%- endfor -%}

      <!-- Sort by tag - Hide default sort (relevance for search) -->
      {%- if results.sort_by and results.sort_by != results.default_sort_by -%}
        {%- for option in results.sort_options -%}
          {%- if option.value == results.sort_by -%}
            <div class="active-filter-tag">
              <span class="active-filter-tag-text">{{ option.name | escape }}</span>
              <button class="active-filter-tag-remove" data-sort-remove="true">
                <span class="svg-wrapper">
                  {{- 'icon-close-small.svg' | inline_asset_content -}}
                </span>
              </button>
            </div>
          {%- endif -%}
        {%- endfor -%}
      {%- endif -%}
    </div>

    {%- assign has_active_filters = false -%}
    {%- for filter in results.filters -%}
      {%- if filter.active_values.size > 0 -%}
        {%- assign has_active_filters = true -%}
        {%- break -%}
      {%- endif -%}
      {%- if filter.type == 'price_range' -%}
        {%- assign min = filter.min_value.value -%}
        {%- assign max = filter.max_value.value -%}
        {%- if min != null or max != null -%}
          {%- assign has_active_filters = true -%}
          {%- break -%}
        {%- endif -%}
      {%- endif -%}
    {%- endfor -%}

    {%- if has_active_filters or results.sort_by -%}
      <button class="clear-all-filters-btn" data-action="clear-all">CLEAR ALL</button>
    {%- endif -%}
  </div>
</div>

<div
  class="filters-translate medium-hide large-up-hide flex divide-x-4 facets-filters-border"
>
  <button
    class="mobile-facets-trigger flex items-center gap-2 px-4 py-2 w-1/2 justify-center facets-mobile-trigger"
  >
    <span class="uppercase filters-tabs facets-filters-tabs">Filters</span>
  </button>

  <div class="mobile-sort-dropdown relative w-1/2">
    <button
      class="mobile-sort-trigger flex items-center gap-2 px-4 py-2 w-full justify-center"
    >
      <span class="uppercase filters-tabs facets-filters-tabs">Sort</span>
    </button>
    <div
      class="mobile-sort-options hidden absolute top-full left-0 right-0 mt-1 border rounded-lg shadow-lg z-[100000] facets-mobile-sort"
    >
      <fieldset class="facets-wrap parent-wrap">
        <ul class="!py-2 !m-0 facets-layout facets-layout-list list-unstyled" role="list">
          {%- for option in results.sort_options -%}
            <li class="list-menu__item facets__item">
              <label
                for="MobileSort-{{ option.value | escape }}"
                class="items-center facet-checkbox hover:bg-gray-200 !px-4 !p-0 uppercase text-[14px]"
              >
                <input
                  type="checkbox"
                  name="sort_by"
                  value="{{ option.value | escape }}"
                  id="MobileSort-{{ option.value | escape }}"
                  {% if option.value == sort_by %}
                    checked
                  {% endif %}
                  class="facets-hidden-input sort-by-checkbox"
                >
                {{- 'square.svg' | inline_asset_content -}}
                <div class="svg-wrapper translate-y-[5px] facets-svg-transform">
                  {{- 'icon-checkmark.svg' | inline_asset_content -}}
                </div>
                <span class="" aria-hidden="true">
                  <span
                    class="text-[14px] text-nowrap facets-text-color"
                  >
                    {{- option.name | escape -}}
                  </span>
                </span>
                <span class="visually-hidden">
                  {{- option.name | escape }}
                </span>
              </label>
            </li>
          {%- endfor -%}
        </ul>
      </fieldset>
    </div>
  </div>
</div>

<script>
  // Function to close all dropdowns except the one being opened
  function closeOtherDropdowns(currentDropdown) {
    // Get all filter dropdowns
    const allDropdowns = document.querySelectorAll('.facets__disclosure, .disclosure-has-popup');

    allDropdowns.forEach((dropdown) => {
      if (dropdown !== currentDropdown && dropdown.hasAttribute('open')) {
        dropdown.removeAttribute('open');
        // Reset icon animation
        const icon = dropdown.querySelector('.pmorph__icon');
        if (icon) {
          icon.classList.remove('expanded');
        }
      }
    });
  }

  // Function to toggle icon animation
  function toggleArrow(summaryElement) {
    const icon = summaryElement.querySelector('.pmorph__icon');
    if (icon) {
      // Small delay to check if details is opening or closing
      setTimeout(() => {
        const parentDetails = summaryElement.closest('details');
        if (parentDetails.hasAttribute('open')) {
          icon.classList.add('expanded');
          closeOtherDropdowns(parentDetails);
        } else {
          icon.classList.remove('expanded');
        }
      }, 10);
    }
  }

  // Add event listeners to all filter summaries
  document.addEventListener('DOMContentLoaded', function () {
    // ===================================================================
    // FACETS EVENT LISTENERS (CSP-compliant, replaces inline handlers)
    // ===================================================================

    // Toggle arrow for facet summaries (replaces onclick="toggleArrow(this)")
    document.querySelectorAll('.facets__summary').forEach(function (summary) {
      summary.addEventListener('click', function () {
        toggleArrow(this);
      });
    });

    // Handle price and sort summary icon toggles (replaces inline onclick)
    document.querySelectorAll('[data-facet-summary]').forEach(function (summary) {
      summary.addEventListener('click', function () {
        this.closest('details').querySelector('.pmorph__icon').classList.toggle('expanded');
      });
    });

    // Handle sort by checkbox changes (replaces onchange="handleSortByChange(this)")
    document.querySelectorAll('.sort-by-checkbox').forEach(function (checkbox) {
      checkbox.addEventListener('change', function () {
        handleSortByChange(this);
      });
    });

    // Mobile filter buttons
    const mobileFilterTrigger = document.querySelector('.mobile-facets-trigger');
    if (mobileFilterTrigger) {
      mobileFilterTrigger.addEventListener('click', function () {
        openMobileFilters();
      });
    }

    // Mobile filter close buttons
    document.querySelectorAll('.mobile-filter-close, .mobile-apply-btn').forEach(function (btn) {
      btn.addEventListener('click', function () {
        closeMobileFilters();
      });
    });

    // Mobile sort trigger (replaces onclick to toggle dropdown)
    document.querySelectorAll('.mobile-sort-trigger').forEach(function (trigger) {
      trigger.addEventListener('click', function () {
        this.nextElementSibling.classList.toggle('hidden');
      });
    });

    // Facets event listeners initialized (CSP-compliant)

    // Close dropdowns when clicking outside
    document.addEventListener('click', function (e) {
      if (
        !e.target.closest('.facets__disclosure') &&
        !e.target.closest('.disclosure-has-popup') &&
        !e.target.closest('.mobile-sort-dropdown')
      ) {
        const allDropdowns = document.querySelectorAll('.facets__disclosure[open], .disclosure-has-popup[open]');
        allDropdowns.forEach((dropdown) => {
          dropdown.removeAttribute('open');
          // Reset icon animation
          const icon = dropdown.querySelector('.pmorph__icon');
          if (icon) {
            icon.classList.remove('expanded');
          }
        });

        // Also close mobile sort dropdowns
        document.querySelectorAll('.mobile-sort-options').forEach((dropdown) => {
          dropdown.classList.add('hidden');
        });
      }
    });

    // Handle mobile filter icons
    document.querySelectorAll('.mobile-filter-summary').forEach((summary) => {
      summary.addEventListener('click', () => {
        const icon = summary.querySelector('.pmorph__icon');
        const details = summary.closest('details');
        setTimeout(() => {
          if (details.hasAttribute('open')) {
            icon.classList.add('expanded');
          } else {
            icon.classList.remove('expanded');
          }
        }, 10);
      });
    });

    // Add event listeners to sort by summary to close other dropdowns
    document.querySelectorAll('.disclosure-has-popup summary').forEach((summary) => {
      summary.addEventListener('click', () => {
        const parentDetails = summary.closest('details');
        // Close other dropdowns when sort dropdown is opened
        setTimeout(() => {
          if (parentDetails.hasAttribute('open')) {
            closeOtherDropdowns(parentDetails);
          }
        }, 10);
      });
    });
  });

  // Your existing mobile functions
  document.querySelectorAll('.mobile-facets__summary').forEach((summary) => {
    summary.addEventListener('click', () => {
      const arrow = summary.closest('details')?.querySelector('.mobile-facets__arrow');
      arrow?.classList.toggle('rotated');
    });
  });

  document.querySelectorAll('.button--primary.apply-button').forEach((button) => {
    button.addEventListener('click', () => {
      const summary = button.closest('.mobile-facets__wrapper')?.querySelector('summary');
      summary?.click();
    });
  });

  function updateMobileSortFromRadio(radioInput) {
    const value = radioInput.value;
    const form = document.getElementById('FacetFiltersFormMobile');
    let sortInput = form.querySelector('input[name="sort_by"]');
    if (!sortInput) {
      sortInput = document.createElement('input');
      sortInput.type = 'hidden';
      sortInput.name = 'sort_by';
      form.appendChild(sortInput);
    }
    sortInput.value = value;
    // Use AJAX instead of form submission
    if (typeof window.applyFiltersAjax === 'function') {
      window.applyFiltersAjax();
    } else {
      form.submit();
    }
  }

  // Global AJAX filter application function
  window.applyFiltersAjax = function () {
    // Get the active form (desktop or mobile)
    const desktopForm = document.getElementById('FacetFiltersForm');
    const mobileForm = document.getElementById('FacetFiltersFormMobile');
    const activeForm = mobileForm && mobileForm.closest('.mobile-filter-overlay.active') ? mobileForm : desktopForm;

    if (!activeForm) {
      console.error('No filter form found');
      return;
    }

    // Create search params from form data
    const formData = new FormData(activeForm);
    const searchParams = new URLSearchParams(formData).toString();

    // Use FacetFiltersForm to render the page with new filters
    if (typeof FacetFiltersForm !== 'undefined' && typeof FacetFiltersForm.renderPage === 'function') {
      FacetFiltersForm.renderPage(searchParams, null);
    } else {
      // Fallback to form submission
      activeForm.submit();
    }
  };
</script>

<style>
  .facets-container-height {
    z-index: 0 !important;
  }
  .field__label {
    top: 6px;
  }
  .price-range {
    padding-top: 10px;
    padding-bottom: 5px;
  }
  /* Plus/Minus Morphing Icon Styles */
  :root {
    --dur: 400ms;
    --ease-open: ease;
    --ease-close: ease;
    --fg: var(--text);
    --size: {{ facet_icon_size | default: 12 }}px;
    --thickness: {{ facet_icon_thickness | default: 2 }}px;
  }

  .pmorph__icon {
    position: relative;
    width: var(--size);
    height: var(--size);
    flex-shrink: 0;
    margin-left: 6px;
    font-family: var(--font-body-family);
    font-style: var(--font-body-style);
    font-weight: var(--font-body-weight);
    font-size: var(--tm-b-3-size);
    color: var(--text); /* Use body text color */
  }

  /* horizontal bar (always visible) */
  .pmorph__icon::before {
    content: '';
    position: absolute;
    top: 50%;
    left: 0;
    width: 100%;
    height: var(--thickness);
    background: currentColor;
    border-radius: 2px;
    transform: translateY(-50%);
  }

  /* vertical bar (morphs away) */
  .pmorph__icon::after {
    content: '';
    position: absolute;
    top: 50%;
    left: 0;
    width: 100%;
    height: var(--thickness);
    background: currentColor;
    border-radius: 2px;
    transform: translateY(-50%) rotate(90deg) scale(1);
    transform-origin: center;
    opacity: 1;
    transition: transform var(--dur) var(--ease-open), opacity var(--dur) var(--ease-open);
  }

  /* expanded: hide vertical bar smoothly */
  .pmorph__icon.expanded::after {
    opacity: 0;
    transform: translateY(-50%) rotate(90deg) scale(0.5);
    transition: transform var(--dur) var(--ease-open), opacity var(--dur) var(--ease-open);
  }

  /* collapsed: show vertical bar again with crisper ease */
  details:not([open]) .pmorph__icon::after {
    opacity: 1;
    transform: translateY(-50%) rotate(90deg) scale(1);
    transition: transform var(--dur) var(--ease-close), opacity var(--dur) var(--ease-close);
  }

  /* Mobile version */
  .mobile-pmorph__icon {
    width: 12px;
    height: 12px;
    font-family: var(--font-body-family);
    font-style: var(--font-body-style);
    font-weight: var(--font-body-weight);
    font-size: var(--tm-b-3-size);
  }

  /* Custom Icon Styles */
  .custom-facet-icon {
    position: relative;
    width: var(--size);
    height: var(--size);
    flex-shrink: 0;
    margin-left: 6px;
    display: inline-flex;
    align-items: center;
    justify-content: center;
  }

  .custom-facet-icon img {
    transition: opacity var(--dur) var(--ease-open);
  }

  /* Toggle custom icons on expand */
  details[open] .custom-facet-icon .custom-icon-collapsed {
    display: none !important;
  }

  details[open] .custom-facet-icon .custom-icon-expanded {
    display: block !important;
  }

  details:not([open]) .custom-facet-icon .custom-icon-collapsed {
    display: block !important;
  }

  details:not([open]) .custom-facet-icon .custom-icon-expanded {
    display: none !important;
  }

  .facets__summary-label {
    margin-right: 6px !important;
    font-family: var(--font-heading-family) !important;
  }

  /* Apply body font to all facet text elements */
  .facets__form,
  .facets__disclosure,
  .facet-checkbox,
  .facet-checkbox span,
  .mobile-filter-label,
  .mobile-filter-summary span,
  .mobile-sort-options button,
  .filters-tabs {
    font-family: var(--font-body-family) !important;
  }

  .filters-tabs {
    font-size: 12px;
  }
  .rotate-icon {
    transform: rotate(0deg); /* Default state */
    transition: transform 0.3s ease; /* Ensure transition is applied */
  }

  .rotate-icon.rotated {
    transform: rotate(180deg); /* Rotated state */
  }

  /* Hide scrollbar but maintain scroll functionality */
  .parent-display {
    scrollbar-width: none; /* Firefox */
    -ms-overflow-style: none; /* IE and Edge */
  }

  .parent-display::-webkit-scrollbar {
    display: none; /* Chrome, Safari, Opera */
  }
  .facet-checkbox > input[type='checkbox']:checked ~ .svg-wrapper > .icon-checkmark {
    top: -15px !important;
    position: absolute;
    left: 10px;
    stroke-width: 2px !important;
  }

  .facet-checkbox > input[type='radio'] {
    clip: rect(0, 0, 0, 0);
    position: absolute;
    width: 1px;
    height: 1px;
    overflow: hidden;
  }

  .facet-checkbox > input[type='radio']:checked + span + .svg-wrapper + span {
    font-weight: var(--weight-bold);
  }

  .facet-checkbox > input[type='radio'] ~ svg,
  .facet-checkbox > input[type='radio'] ~ .svg-wrapper {
    display: none;
  }
  .facet-checkbox {
    padding-top: 0 !important;
    padding-bottom: 0 !important;
  }

  /* Adjust filter wrapper width */
  .facets__wrapper {
    width: fit-content;
    display: flex;
    gap: 20px;
  }

  /* Filter display backgrounds and borders */
  .facets__display {
    background-color: var(--background) !important;
    border: 1px solid var(--border) !important;
    width: 180px !important;
    max-width: 180px !important;
    left: 50% !important;
    transform: translateX(-50%) translateY(-0px) !important;
    position: absolute !important;
  }

  /* Adjust disclosure width */
  .facets__disclosure {
    width: fit-content;
    min-width: max-content;
  }

  .mobile-sort-trigger .svg-wrapper {
    width: 12px;
    height: 12px;
    transform: rotate(90deg);
  }

  .mobile-sort-options {
    max-height: 60vh;
    overflow-y: auto;
  }

  .mobile-facets__inner {
    height: 100vh;
    display: flex;
    flex-direction: column;
    background: white;
  }

  .mobile-facets__main {
    flex-grow: 1;
    overflow-y: auto;
  }

  .mobile-facets__arrow {
    transform: rotate(90deg);
    width: 12px;
    height: 12px;
    transition: transform 0.3s ease;
  }

  .mobile-facets__arrow.rotated {
    transform: rotate(90deg);
  }

  .mobile-facets__details[open] .mobile-facets__arrow {
    transform: rotate(90deg);
  }

  .mobile-facets__checkbox {
    width: 16px;
    height: 16px;
  }

  .mobile-facets__submenu {
    padding: 1rem;
    background: var(--background);
  }

  .mobile-facets__label {
    display: flex;
    align-items: center;
    gap: 1rem;
    padding: 0.5rem;
  }
  .filters-translate {
    transform: translateY(-5px) !important;
    position: absolute;
    width: 94vw;
    top: 10px;
    left: 10px;
    padding: 0 var(--space-md);
  }

  /* Only animate arrow rotation on click (rotated class), not on hover */
  .facets__summary svg {
    transition: transform 0.3s ease;
  }
  .svg-arrow-down {
    transition: transform 0.3s ease;
    transform: rotate(0deg);
  }

  .svg-arrow-down.rotated {
    transform: rotate(-90deg);
  }

  /* New Mobile Filter Drawer Styles */
  .mobile-filter-overlay {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: rgba(0, 0, 0, 0);
    z-index: 999999 !important; /* Much higher than header */
    opacity: 1;
    visibility: hidden;
    transition: background-color var(--filters-drawer-speed, 0.6s) ease,
                visibility var(--filters-drawer-speed, 0.6s) ease;
    display: flex;
    justify-content: flex-end;
    align-items: stretch;
  }

  .mobile-filter-overlay.active {
    background: rgba(0, 0, 0, 0.5);
    visibility: visible;
  }

  .mobile-filter-drawer {
    position: relative;
    height: 100vh;
    width: 90%;
    max-width: 400px;
    background: white;
    transform: translateX(110%);
    transition: transform var(--filters-drawer-speed, 0.6s) ease;
    display: flex;
    flex-direction: column;
    overflow: hidden;
    z-index: 1000000 !important; /* Highest z-index */
    box-shadow: -4px 0 20px rgba(0, 0, 0, 0.15);
  }

  .mobile-filter-overlay.active .mobile-filter-drawer {
    transform: translateX(11%);
  }

  .mobile-filter-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 20px 20px 40px 20px;
    background: white;
    position: sticky;
    top: 0;
    z-index: 100001 !important; /* Highest z-index for header */
    flex-shrink: 0;
  }

  .mobile-filter-header h2 {
    font-family: var(--font-heading-family);
    font-style: var(--font-heading-style);
    font-weight: var(--font-heading-weight);
    font-size: var(--tm-h-2-size);
    line-height: var(--tm-h-2-line-height);
    margin: 0;
  }

  .mobile-filter-close {
    background: none;
    border: 10px;
    font-family: var(--font-body-family);
    font-style: var(--font-body-style);
    font-weight: var(--font-body-weight);
    font-size: var(--tm-b-3-size);
    line-height: var(--tm-b-3-line-height);
    cursor: pointer;
    position: relative;
  }

  .mobile-filter-content {
    flex: 1;
    overflow-y: auto;
    padding: 0;
    background: var(--background);
    scrollbar-width: thin;
    scrollbar-color: rgba(0, 0, 0, 0.2) transparent;
  }

  .mobile-filter-content::-webkit-scrollbar {
    width: 4px;
  }

  .mobile-filter-content::-webkit-scrollbar-track {
    background: transparent;
  }

  .mobile-filter-content::-webkit-scrollbar-thumb {
    background: rgba(0, 0, 0, 0.2);
    border-radius: 2px;
  }

  .mobile-filter-section {
    padding: 0 20px;
  }

  .mobile-filter-summary {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 10px 0;
    font-family: var(--font-body-family);
    font-style: var(--font-body-style);
    font-weight: var(--font-body-weight);
    font-size: var(--tm-b-2-size);
    line-height: var(--tm-b-2-line-height);
    cursor: pointer;
    list-style: none;
    background: white;
    border-top: 1px solid var(--border);
  }

  .mobile-filter-summary::-webkit-details-marker {
    display: none;
  }

  .mobile-filter-arrow {
    transition: transform 0.2s ease;
  }

  .mobile-filter-section[open] .mobile-filter-arrow {
    transform: rotate(-90deg);
  }

  .mobile-filter-options {
    padding: 0 0 20px 0;
    background: var(--background);
    margin: 0;
  }

  .mobile-filter-option {
    display: flex;
    align-items: center;
    padding: 8px 0;
    cursor: pointer;
  }

  .mobile-filter-option:last-child {
    border-bottom: none;
  }

  .mobile-filter-option input[type='checkbox'] {
    display: none;
  }

  .mobile-filter-checkbox {
    width: 16px;
    height: 16px;
    border: 1px solid var(--border);
    margin-right: 0.5rem;
    position: relative;
    flex-shrink: 0;
    border-radius: 2px;
  }

  .mobile-filter-option.active .mobile-filter-checkbox {
    background: var(--button);
    border-color: var(--border);
  }

  .mobile-filter-option.active .mobile-filter-checkbox::after {
    content: '✓';
    color: var(--button_label);
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    font-size: 10px;
    font-weight: var(--weight-bold);
  }

  .mobile-filter-label {
    font-family: var(--font-body-family);
    font-style: var(--font-body-style);
    font-weight: var(--font-body-weight);
    font-size: var(--tm-b-4-size);
    line-height: var(--tm-b-4-line-height);
    text-transform: uppercase;
    color: var(--text);
  }

  .mobile-filter-option.disabled {
    opacity: 0.5;
    cursor: not-allowed;
  }

  .mobile-filter-footer {
    border-top: 1px solid var(--border) !important;
    background: var(--background);
    display: flex;
    gap: 1rem;
    position: fixed !important;
    bottom: 0 !important;
    width: 100%;
    z-index: 1000001 !important;
    flex-shrink: 0;
    margin-top: auto;
    padding: 20px;
    box-sizing: border-box;
  }

  .mobile-apply-btn {
    flex: 1;
    padding: 12px 24px !important;
    background: var(--button);
    color: var(--button_label);
    border: none;
    border-radius: 5px !important;
    text-transform: uppercase;
    font-family: var(--font-body-family);
    font-style: var(--font-body-style);
    font-weight: var(--font-body-weight);
    font-size: var(--tm-b-2-size);
    line-height: var(--tm-b-2-line-height);
    cursor: pointer;
    transition: all 0.3s ease;
    letter-spacing: 0.5px;
    max-width: 100%;
  }

  .mobile-apply-btn:hover {
    background: var(--hovered_button);
    transform: translateY(-1px);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
  }

  .mobile-price-range {
    padding: 20px 0;
    background: var(--background);
    width: 100%;
  }

  .mobile-price-range .price-facet-container {
    background: transparent;
    border: none;
    border-radius: 0;
    padding: 20px 0;
    margin: 0;
    width: 100%;
    max-width: 100%;
  }

  .mobile-price-range .price-facet-header {
    display: flex;
    justify-content: flex-end;
    margin-bottom: 12px;
  }

  .mobile-price-range .price-reset {
    font-size: 12px;
    color: #000;
    text-decoration: underline;
    cursor: pointer;
    text-transform: uppercase;
    font-weight: normal;
    padding: 0;
    margin: 0;
    background: none;
    border: none;
  }

  .mobile-price-range .price-slider-container {
    margin-bottom: 16px;
    position: relative;
    height: 20px;
  }

  .mobile-price-range .price-input-row {
    display: flex;
    align-items: center;
    gap: 8px;
    margin-top: 16px;
    width: 100%;
  }

  .mobile-price-range .price-field {
    flex: 1;
    position: relative;
    width: 100%;
  }

  .mobile-price-range .price-input {
    width: 100%;
    height: 32px;
    padding: 8px 10px;
    border: 1px solid #000;
    border-radius: 4px;
    font-size: 12px;
    background-color: white;
    color: #000;
    box-sizing: border-box;
    outline: none;
  }

  .mobile-price-range .price-input::placeholder {
    color: #999;
    opacity: 1;
    font-size: 12px;
  }

  .mobile-price-range .price-separator {
    font-size: 14px;
    color: #000;
    font-weight: normal;
    flex-shrink: 0;
  }

  /* Ensure mobile drawer appears above everything */
  .mobile-filter-overlay,
  .mobile-filter-drawer,
  .mobile-filter-header,
  .mobile-filter-footer {
    z-index: 999999 !important;
  }
</style>

<script>
  // Utility function to manage header z-index
  function setHeaderZIndex(zIndex) {
    const headerElements = document.querySelectorAll('.header-main, .header-z-index, [class*="header"]');
    headerElements.forEach((element) => {
      element.style.zIndex = zIndex;
    });
  }

  function openMobileFilters() {
    const overlay = document.getElementById('mobile-filter-overlay');
    if (overlay) {
      // Reset overlay state for animation
      overlay.style.display = 'block';
      overlay.classList.remove('active'); // Ensure clean state

      // Use requestAnimationFrame to ensure proper animation triggering
      requestAnimationFrame(() => {
        overlay.classList.add('active');
      });

      document.body.style.overflow = 'hidden';

      // Change header z-index to 1 when mobile filters are open
      setHeaderZIndex('1');

      // Calculate and set mobile footer height for proper tags positioning
      const footer = document.querySelector('.mobile-filter-footer');
      if (footer) {
        const footerHeight = footer.offsetHeight;
        document.documentElement.style.setProperty('--mobile-footer-height', `${footerHeight}px`);
      }

      // Re-attach mobile filter listeners when drawer opens
      setTimeout(() => {
        if (typeof attachMobileFilterListeners === 'function') {
          attachMobileFilterListeners();
        }
      }, 100);
    }
  }

  function closeMobileFilters() {
    const overlay = document.getElementById('mobile-filter-overlay');
    if (overlay) {
      overlay.classList.remove('active');
      document.body.style.overflow = '';

      // Wait for animation to complete before changing z-index and hiding overlay
      const filtersDrawerSpeed = getComputedStyle(document.documentElement)
        .getPropertyValue('--filters-drawer-speed')
        .trim();
      const animationDuration = parseFloat(filtersDrawerSpeed) * 1000 || 600;

      setTimeout(() => {
        // Reset header z-index back to 2 when mobile filters are closed
        setHeaderZIndex('2');
        overlay.style.display = 'none';
      }, animationDuration);
    }
  }

  // Initialize header z-index on page load
  document.addEventListener('DOMContentLoaded', function () {
    // Ensure header starts with correct z-index
    setHeaderZIndex('2');

    // Add cleanup on page unload to reset z-index
    window.addEventListener('beforeunload', function () {
      setHeaderZIndex('2');
    });
  });

  // Function to attach mobile filter listeners (can be called multiple times)
  function attachMobileFilterListeners() {
    // Handle checkbox changes for mobile filters
    const filterOptions = document.querySelectorAll('.mobile-filter-option');
    filterOptions.forEach((option) => {
      // Remove existing listener to avoid duplicates
      const clonedOption = option.cloneNode(true);
      option.parentNode.replaceChild(clonedOption, option);
    });

    // Reselect after cloning
    document.querySelectorAll('.mobile-filter-option').forEach((option) => {
      option.addEventListener('click', function (e) {
        if (this.classList.contains('disabled')) {
          e.preventDefault();
          return;
        }

        const checkbox = this.querySelector('input[type="checkbox"]');
        if (checkbox && e.target !== checkbox) {
          checkbox.checked = !checkbox.checked;
          
          // Manually dispatch change event (which will trigger the change listener below)
          // The change listener handles both visual state update and form submission
          checkbox.dispatchEvent(new Event('change', { bubbles: true }));
        }
      });
    });

    // Update active state based on initial checked state
    document.querySelectorAll('.mobile-filter-option').forEach((option) => {
      const checkbox = option.querySelector('input[type="checkbox"]');
      if (checkbox && checkbox.checked) {
        option.classList.add('active');
      }
    });

    // Handle mobile filter checkboxes change events (triggered by user or programmatic change)
    const mobileCheckboxes = document.querySelectorAll('.mobile-filter-option input[type="checkbox"]');
    mobileCheckboxes.forEach((checkbox) => {
      checkbox.addEventListener('change', function () {
        // Update visual state
        const option = this.closest('.mobile-filter-option');
        if (option) {
          option.classList.toggle('active', this.checked);
        }
        
        // Apply filters with delay to allow for multiple selections
        clearTimeout(window.mobileFilterTimeout);
        window.mobileFilterTimeout = setTimeout(() => {
          if (typeof window.applyFiltersAjax === 'function') {
            window.applyFiltersAjax();
          } else {
            // Fallback to form submission
            const form = this.closest('form');
            if (form) {
              form.submit();
            }
          }
        }, 300);
      });
    });
  }

  // Close on overlay click
  document.addEventListener('DOMContentLoaded', function () {
    const overlay = document.getElementById('mobile-filter-overlay');
    if (overlay) {
      overlay.addEventListener('click', function (e) {
        if (e.target === overlay) {
          closeMobileFilters();
        }
      });
    }

    // Initialize mobile filter listeners
    attachMobileFilterListeners();

    // Handle regular filter checkboxes (desktop) with AJAX
    const regularCheckboxes = document.querySelectorAll('.facet-checkbox input[type="checkbox"]');
    regularCheckboxes.forEach((checkbox) => {
      checkbox.addEventListener('change', function () {
        // Add a small delay to allow for multiple checkbox changes
        clearTimeout(window.filterTimeout);
        window.filterTimeout = setTimeout(() => {
          if (typeof window.applyFiltersAjax === 'function') {
            window.applyFiltersAjax();
          }
        }, 300);
      });
    });
  });

  // Handle sort by checkbox changes (single selection behavior)
  function handleSortByChange(selectedCheckbox) {
    if (selectedCheckbox.checked) {
      // Uncheck all other sort by checkboxes
      const allSortCheckboxes = document.querySelectorAll('input[name="sort_by"][type="checkbox"]');
      allSortCheckboxes.forEach((checkbox) => {
        if (checkbox !== selectedCheckbox) {
          checkbox.checked = false;
        }
      });

      // Update tags section
      updateTagsSection();

      // Use AJAX instead of form submission
      if (typeof window.applyFiltersAjax === 'function') {
        window.applyFiltersAjax();
      } else {
        const form = selectedCheckbox.closest('form');
        if (form) {
          form.submit();
        }
      }
    }
  }

  // Function to update tags section dynamically
  function updateTagsSection() {
    // This will be called after AJAX updates to refresh the tags
    // The tags are already rendered server-side, so this ensures they stay in sync
    const tagsContainer = document.querySelector('.active-filters-tags-container');
    if (tagsContainer) {
      // Trigger a re-render of the tags section
      const event = new CustomEvent('tagsUpdate');
      document.dispatchEvent(event);
    }
  }

  // Function to show/hide tags container based on content
  function toggleTagsContainer() {
    const tagsContainer = document.querySelector('.active-filters-tags-container');
    if (tagsContainer) {
      const hasTags = tagsContainer.querySelector('.active-filter-tag');
      if (hasTags) {
        tagsContainer.style.display = 'block';
      } else {
        tagsContainer.style.display = 'none';
      }
    }
  }

  // Prevent all filter form submissions - force AJAX only
  document.addEventListener('DOMContentLoaded', function () {
    const filterForms = document.querySelectorAll('#FacetFiltersForm, #FacetFiltersFormMobile');
    filterForms.forEach((form) => {
      // Store handler in a named function to avoid arguments.callee
      const submitHandler = function (event) {
        event.preventDefault();
        event.stopPropagation();
        // Filter form submission prevented, using AJAX instead

        // Try to use AJAX function, fallback to form submission if not available
        if (typeof window.applyFiltersAjax === 'function') {
          try {
            window.applyFiltersAjax();
          } catch (error) {
            // AJAX filter failed, allowing form submission
            // Remove this event listener and resubmit
            form.removeEventListener('submit', submitHandler);
            form.submit();
          }
        } else {
          // applyFiltersAjax not found, allowing form submission
          // Remove this event listener and resubmit
          form.removeEventListener('submit', submitHandler);
          form.submit();
        }

        return false;
      };

      form.addEventListener('submit', submitHandler);
    });

    // Initialize tag event listeners
    if (typeof FacetFiltersForm !== 'undefined' && FacetFiltersForm.attachTagEventListeners) {
      FacetFiltersForm.attachTagEventListeners();
    }

    // Check and toggle tags container visibility on page load
    toggleTagsContainer();

    // Ensure tags are visible on page load if sort by is already selected
    const sortInputs = document.querySelectorAll('input[name="sort_by"]:checked');
    // Sort inputs found
    if (sortInputs.length > 0) {
      // Sort by is selected, checking tags container
      // Trigger a tags update to ensure sort by tags are visible
      const tagsContainer = document.querySelector('.active-filters-tags-container');
      if (tagsContainer) {
        // Tags container found, triggering update
        // Force a re-render of the tags section
        const event = new CustomEvent('tagsUpdate');
        document.dispatchEvent(event);
      } else {
        // Tags container not found
      }
    }
  });

  // Clear all filters function
  window.clearAllFilters = function () {
    // For search pages, preserve the search query
    let searchQuery = '';
    
    // Try to get search query from input
    const searchInput = document.querySelector('input[name="q"]');
    if (searchInput && searchInput.value) {
      searchQuery = searchInput.value;
    } else {
      // Fallback: get from URL if input is empty
      const urlParams = new URLSearchParams(window.location.search);
      searchQuery = urlParams.get('q') || '';
    }
    
    // Navigate to base URL with search query but no filters
    if (searchQuery) {
      // Search page - keep the search term but clear filters
      window.location.href = '{{ routes.search_url }}?q=' + encodeURIComponent(searchQuery) + '&options%5Bprefix%5D=last';
    } else {
      // Collection page - go to base collection URL
      window.location.href = '{{ results_url | split: '?' | first }}';
    }
  };

  // Clear all filters function for mobile
  window.clearAllFiltersMobile = function () {
    // For search pages, preserve the search query
    let searchQuery = '';
    
    // Try to get search query from input
    const searchInput = document.querySelector('input[name="q"]');
    if (searchInput && searchInput.value) {
      searchQuery = searchInput.value;
    } else {
      // Fallback: get from URL if input is empty
      const urlParams = new URLSearchParams(window.location.search);
      searchQuery = urlParams.get('q') || '';
    }
    
    // Navigate to base URL with search query but no filters
    if (searchQuery) {
      // Search page - keep the search term but clear filters
      window.location.href = '{{ routes.search_url }}?q=' + encodeURIComponent(searchQuery) + '&options%5Bprefix%5D=last';
    } else {
      // Collection page - go to base collection URL
      window.location.href = '{{ results_url | split: '?' | first }}';
    }
  };

  // Mobile tag removal event listeners
  document.addEventListener('DOMContentLoaded', function () {
    function attachMobileTagListeners() {
      document.querySelectorAll('.mobile-tag-remove').forEach((button) => {
        button.addEventListener('click', function (e) {
          e.preventDefault();
          const filterParam = this.getAttribute('data-filter-param');
          const filterValue = this.getAttribute('data-filter-value');
          const isSortRemove = this.getAttribute('data-sort-remove') === 'true';

          if (isSortRemove) {
            const sortInputs = document.querySelectorAll('input[name="sort_by"]');
            sortInputs.forEach((input) => {
              input.checked = false;
            });
          } else if (filterParam && filterValue) {
            // Uncheck in mobile form
            const filterInput = document.querySelector(
              `#FacetFiltersFormMobile input[name="${filterParam}"][value="${filterValue}"]`
            );
            if (filterInput) {
              filterInput.checked = false;
            }
          } else if (filterParam) {
            // Clear price range in mobile form
            const priceInputs = document.querySelectorAll(`#FacetFiltersFormMobile input[name="${filterParam}"]`);
            priceInputs.forEach((input) => {
              input.value = '';
            });
          }

          if (typeof window.applyFiltersAjax === 'function') {
            window.applyFiltersAjax();
          } else {
            const form = document.querySelector('#FacetFiltersFormMobile');
            if (form) {
              form.submit();
            }
          }
        });
      });
    }

    // Attach listeners on page load
    attachMobileTagListeners();

    // Re-attach listeners after mobile drawer opens
    const mobileFilterOverlay = document.getElementById('mobile-filter-overlay');
    if (mobileFilterOverlay) {
      const observer = new MutationObserver(function (mutations) {
        mutations.forEach(function (mutation) {
          if (mutation.attributeName === 'class') {
            if (mobileFilterOverlay.classList.contains('active')) {
              setTimeout(attachMobileTagListeners, 100);
            }
          }
        });
      });
      observer.observe(mobileFilterOverlay, { attributes: true });
    }

    // Toggle mobile tags container visibility on page load
    const mobileTagsContainer = document.querySelector('.active-filters-tags-container-mobile');
    if (mobileTagsContainer) {
      const hasTags = mobileTagsContainer.querySelector('.active-filter-tag');
      if (hasTags) {
        mobileTagsContainer.style.display = 'block';
      } else {
        mobileTagsContainer.style.display = 'none';
      }
    }

    // Add event listeners for clear all buttons (CSP compliant)
    document.querySelectorAll('[data-action="clear-all"]').forEach((button) => {
      button.addEventListener('click', function (event) {
        event.preventDefault();
        if (typeof window.clearAllFilters === 'function') {
          window.clearAllFilters();
        }
      });
    });

    document.querySelectorAll('[data-action="clear-all-mobile"]').forEach((button) => {
      button.addEventListener('click', function (event) {
        event.preventDefault();
        if (typeof window.clearAllFiltersMobile === 'function') {
          window.clearAllFiltersMobile();
        }
      });
    });
  });
</script>
