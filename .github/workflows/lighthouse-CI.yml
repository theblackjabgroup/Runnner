name: Shopify Lighthouse CI

on: [push]

jobs:
  lhci:
    name: Lighthouse CI with Slack
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      # 1Ô∏è‚É£ Install Shopify CLI + jq for JSON parsing
      - name: Install Shopify CLI & jq
        run: |
          sudo apt-get update
          sudo apt-get install -y jq
          npm install -g @shopify/cli

      # 2Ô∏è‚É£ Pre‚Äëcheck: count development themes
      - name: Check Development Theme Limit
        id: theme_check
        run: |
          COUNT=$(shopify theme list \
            --store="${{ secrets.STORE_DOMAIN }}" \
            --password="${{ secrets.APIKEY }}" \
            --json | jq '[.[]|select(.role=="development")]|length')
          echo "DEV_THEME_COUNT=$COUNT" >> $GITHUB_ENV
          if [ "$COUNT" -ge 100 ]; then
            echo "FAILURE_TYPE=theme_limit" >> $GITHUB_ENV
          fi

      # 3Ô∏è‚É£ Run Lighthouse CI (always run, even if theme_limit)
      - name: Run Shopify Lighthouse CI
        id: run_lhci
        continue-on-error: true
        uses: shopify/lighthouse-ci-action@v1
        with:
          access_token: ${{ secrets.APIKEY }}
          store: "delhi-dev-themetest.myshopify.com"
          lhci_min_score_accessibility: 1.0
          lhci_min_score_performance: 0.9
          password: "thoolt"

      # 4Ô∏è‚É£ Notify Slack & fail job if *either* theme_limit OR CI step failed
      - name: Notify Slack & Fail Job
        if: always()
        run: |
          # Determine why we‚Äôre here
          if [ "${{ env.FAILURE_TYPE }}" = "theme_limit" ]; then
            REASON="üî∫ Shopify theme limit (100) reached ‚Äî cannot create a new development theme."
          elif [ "${{ steps.run_lhci.outcome }}" != "success" ]; then
            REASON="CI failed before assertions ‚Äî possible infra/config issue or Lighthouse thresholds not met."
          else
            # No failure; exit cleanly
            echo "No failure detected; skipping Slack and job-fail."
            exit 0
          fi

          # Build Slack message
          ACTOR=${{ github.actor }}
          BRANCH=${{ github.ref_name }}
          COMMIT=${{ github.sha }}
          COMMIT_MESSAGE=$(git log -1 --pretty=%s)
          COMMIT_URL="https://github.com/${{ github.repository }}/commit/${COMMIT}"
          WORKFLOW="${{ github.workflow }}"

          MSG=":small_red_triangle: *Shopify Lighthouse CI failed!*\n"
          MSG+="*Triggered by:* \`@${ACTOR}\`\n"
          MSG+="*Branch:* \`${BRANCH}\`\n"
          MSG+="*Commit:* <${COMMIT_URL}|${COMMIT}>\n"
          MSG+="*Message:* ${COMMIT_MESSAGE}\n"
          MSG+="*Workflow:* \`${WORKFLOW}\`\n"
          MSG+="*Reason:* ${REASON}"

          # Send to Slack
          curl -X POST -H 'Content-type: application/json' \
               --data "{\"text\":\"${MSG//\"/\\\"}\"}" \
               ${{ secrets.SLACK_WEBHOOK_URL }}

          # Finally, fail the job so downstream is blocked
          echo "Exiting with failure due to: $REASON"
          exit 1
