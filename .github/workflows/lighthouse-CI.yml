name: Shopify Lighthouse CI

on: [push]

jobs:
  lhci:
    name: Lighthouse CI with Slack
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      # 1Ô∏è‚É£ Check Dev Theme Limit via REST API
      - name: Check Development Theme Limit
        id: theme_check
        run: |
          DEV_THEME_COUNT=$(curl -s -X GET "https://delhi-dev-themetest.myshopify.com/admin/api/2023-01/themes.json" \
            -H "X-Shopify-Access-Token: ${{ secrets.APIKEY }}" \
            -H "Content-Type: application/json" \
          | jq '[.themes[] | select(.role=="development")] | length')
          echo "DEV_THEME_COUNT=$DEV_THEME_COUNT" >> $GITHUB_ENV
          if [ "$DEV_THEME_COUNT" -ge 100 ]; then
            echo "FAILURE_TYPE=theme_limit" >> $GITHUB_ENV
          fi

      # 2Ô∏è‚É£ Install LHCI CLI
      - name: Install Lighthouse CI CLI
        run: npm install -g @lhci/cli@0.11.x

      # 3Ô∏è‚É£ Run LHCI and capture its output
      - name: Run LHCI and Capture Logs
        id: lhci_run
        continue-on-error: true
        run: |
          set -o pipefail
          echo "Running lhci autorun..."
          lhci autorun > lhci_output.txt 2>&1 || echo "LHCI exited with non-zero code"
          
          # Extract assertion lines (‚úò ‚Ä¶)
          grep -E "‚úò" lhci_output.txt > failed_assertions.txt || true
          
          # Extract expected/found pairs
          grep -E "expected:.*found:" -A0 failed_assertions.txt > score_details.txt || true
          
          # Extract report URLs
          grep -o 'https://storage.googleapis.com[^ ]*\.report\.html' lhci_output.txt > report_urls.txt || true

          # If we haven‚Äôt already set theme_limit, and assertions exist, mark assertion failure
          if [ -z "${{ env.FAILURE_TYPE }}" ] && [ -s failed_assertions.txt ]; then
            echo "FAILURE_TYPE=assertion" >> $GITHUB_ENV
          fi

      # 4Ô∏è‚É£ Notify Slack & fail the job if needed
      - name: Notify Slack & Fail Job
        if: always()
        run: |
          # Determine reason
          if [ "${{ env.FAILURE_TYPE }}" = "theme_limit" ]; then
            REASON="üî∫ Shopify theme limit (100) reached ‚Äî cannot create a new development theme."
          elif [ -s failed_assertions.txt ]; then
            # Build a human‚Äëreadable list of failures
            DETAILS=$(awk -F'expected: ' '{print "- " $1 "expected: " $2}' score_details.txt)
            REASON="One or more Lighthouse assertions failed:\n${DETAILS}"
          else
            # A generic infra/CURL error from lhci itself
            REASON="CI failed before assertions ‚Äî possible infra/config issue."
          fi

          # Slack message payload
          ACTOR=${{ github.actor }}
          BRANCH=${{ github.ref_name }}
          COMMIT=${{ github.sha }}
          COMMIT_MESSAGE=$(git log -1 --pretty=%s)
          COMMIT_URL="https://github.com/${{ github.repository }}/commit/${COMMIT}"
          WORKFLOW="${{ github.workflow }}"

          # Build the text
          MSG=":small_red_triangle: *Shopify Lighthouse CI failed!*\n"
          MSG+="*Triggered by:* \`@${ACTOR}\`\n"
          MSG+="*Branch:* \`${BRANCH}\`\n"
          MSG+="*Commit:* <${COMMIT_URL}|${COMMIT}>\n"
          MSG+="*Message:* ${COMMIT_MESSAGE}\n"
          MSG+="*Workflow:* \`${WORKFLOW}\`\n\n"
          MSG+="*Reason:*\n${REASON}\n\n"

          # Append report links if any
          if [ -s report_urls.txt ]; then
            MSG+="*Report Links:*\n"
            while read -r url; do
              MSG+="- ${url}\n"
            done < report_urls.txt
          fi

          # Send Slack notification
          curl -X POST -H 'Content-type: application/json' \
               --data "{\"text\":\"${MSG//\"/\\\"}\"}" \
               ${{ secrets.SLACK_WEBHOOK_URL }}

          # Finally, fail the job if we had any failure condition
          if [ "${{ env.FAILURE_TYPE }}" = "theme_limit" ] || [ -s failed_assertions.txt ] || [ "${{ steps.lhci_run.outcome }}" != "success" ]; then
            echo "Exiting with failure due to: $REASON"
            exit 1
          fi
